
PSXJoystickHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001530  000015c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800110  00800110  000015d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005bbd  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bf8  00000000  00000000  00007499  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000086ca  00000000  00000000  00009091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a88  00000000  00000000  0001175c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00017895  00000000  00000000  000121e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040ff  00000000  00000000  00029a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c10  00000000  00000000  0002db78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007768  00000000  00000000  0002e788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c3 c0       	rjmp	.+390    	; 0x188 <__ctors_end>
       2:	00 00       	nop
       4:	dd c0       	rjmp	.+442    	; 0x1c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	db c0       	rjmp	.+438    	; 0x1c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c0       	rjmp	.+434    	; 0x1c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c0       	rjmp	.+430    	; 0x1c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c0       	rjmp	.+426    	; 0x1c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c0       	rjmp	.+422    	; 0x1c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d1 c0       	rjmp	.+418    	; 0x1c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	cf c0       	rjmp	.+414    	; 0x1c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c0       	rjmp	.+410    	; 0x1c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__vector_10>
      2c:	c9 c0       	rjmp	.+402    	; 0x1c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c0       	rjmp	.+398    	; 0x1c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	c3 c0       	rjmp	.+390    	; 0x1c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c1 c0       	rjmp	.+386    	; 0x1c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c0       	rjmp	.+382    	; 0x1c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c0       	rjmp	.+378    	; 0x1c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	bb c0       	rjmp	.+374    	; 0x1c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b9 c0       	rjmp	.+370    	; 0x1c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b7 c0       	rjmp	.+366    	; 0x1c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c0       	rjmp	.+362    	; 0x1c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c0       	rjmp	.+358    	; 0x1c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c0       	rjmp	.+354    	; 0x1c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c0       	rjmp	.+350    	; 0x1c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c0       	rjmp	.+346    	; 0x1c0 <__bad_interrupt>
      66:	00 00       	nop
      68:	ab c0       	rjmp	.+342    	; 0x1c0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a9 c0       	rjmp	.+338    	; 0x1c0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a7 c0       	rjmp	.+334    	; 0x1c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	a5 c0       	rjmp	.+330    	; 0x1c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	a3 c0       	rjmp	.+326    	; 0x1c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a1 c0       	rjmp	.+322    	; 0x1c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	9f c0       	rjmp	.+318    	; 0x1c0 <__bad_interrupt>
      82:	00 00       	nop
      84:	9d c0       	rjmp	.+314    	; 0x1c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	9b c0       	rjmp	.+310    	; 0x1c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	99 c0       	rjmp	.+306    	; 0x1c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	97 c0       	rjmp	.+302    	; 0x1c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	95 c0       	rjmp	.+298    	; 0x1c0 <__bad_interrupt>
      96:	00 00       	nop
      98:	93 c0       	rjmp	.+294    	; 0x1c0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	91 c0       	rjmp	.+290    	; 0x1c0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	8f c0       	rjmp	.+286    	; 0x1c0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8d c0       	rjmp	.+282    	; 0x1c0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8b c0       	rjmp	.+278    	; 0x1c0 <__bad_interrupt>
	...

000000ac <ProductString>:
      ac:	2e 03 50 00 6c 00 61 00 79 00 73 00 74 00 61 00     ..P.l.a.y.s.t.a.
      bc:	74 00 69 00 6f 00 6e 00 20 00 43 00 6f 00 6e 00     t.i.o.n. .C.o.n.
      cc:	74 00 72 00 6f 00 6c 00 6c 00 65 00 72 00 00 00     t.r.o.l.l.e.r...

000000dc <ManufacturerString>:
      dc:	30 03 53 00 77 00 61 00 6c 00 6c 00 6f 00 77 00     0.S.w.a.l.l.o.w.
      ec:	74 00 61 00 69 00 6c 00 20 00 45 00 6c 00 65 00     t.a.i.l. .E.l.e.
      fc:	63 00 74 00 72 00 6f 00 6e 00 69 00 63 00 73 00     c.t.r.o.n.i.c.s.
	...

0000010e <LanguageString>:
     10e:	04 03 09 04                                         ....

00000112 <ConfigurationDescriptor>:
     112:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     122:	00 00 09 21 11 01 00 01 22 42 00 07 05 81 03 08     ...!...."B......
     132:	00 05                                               ..

00000134 <DeviceDescriptor>:
     134:	12 01 10 01 00 00 00 08 4c 05 85 08 01 00 01 02     ........L.......
     144:	00 01                                               ..

00000146 <JoystickReport>:
     146:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 32     ...........0.1.2
     156:	09 33 09 34 09 35 09 39 16 81 ff 26 7f 00 36 ff     .3.4.5.9...&..6.
     166:	ff 46 01 00 95 07 75 08 81 02 c0 05 09 19 01 29     .F....u........)
     176:	0e 15 00 25 01 75 01 95 0e 81 02 75 02 95 01 81     ...%.u.....u....
     186:	01 c0                                               ..

00000188 <__ctors_end>:
     188:	11 24       	eor	r1, r1
     18a:	1f be       	out	0x3f, r1	; 63
     18c:	cf ef       	ldi	r28, 0xFF	; 255
     18e:	da e0       	ldi	r29, 0x0A	; 10
     190:	de bf       	out	0x3e, r29	; 62
     192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
     194:	11 e0       	ldi	r17, 0x01	; 1
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b1 e0       	ldi	r27, 0x01	; 1
     19a:	e0 e3       	ldi	r30, 0x30	; 48
     19c:	f5 e1       	ldi	r31, 0x15	; 21
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <__do_copy_data+0x10>
     1a0:	05 90       	lpm	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	a0 31       	cpi	r26, 0x10	; 16
     1a6:	b1 07       	cpc	r27, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <__do_copy_data+0xc>

000001aa <__do_clear_bss>:
     1aa:	21 e0       	ldi	r18, 0x01	; 1
     1ac:	a0 e1       	ldi	r26, 0x10	; 16
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <.do_clear_bss_start>

000001b2 <.do_clear_bss_loop>:
     1b2:	1d 92       	st	X+, r1

000001b4 <.do_clear_bss_start>:
     1b4:	ad 32       	cpi	r26, 0x2D	; 45
     1b6:	b2 07       	cpc	r27, r18
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <.do_clear_bss_loop>
     1ba:	af d0       	rcall	.+350    	; 0x31a <main>
     1bc:	0c 94 96 0a 	jmp	0x152c	; 0x152c <_exit>

000001c0 <__bad_interrupt>:
     1c0:	1f cf       	rjmp	.-450    	; 0x0 <__vectors>

000001c2 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     1c2:	29 2f       	mov	r18, r25
     1c4:	33 27       	eor	r19, r19
     1c6:	23 30       	cpi	r18, 0x03	; 3
     1c8:	31 05       	cpc	r19, r1
     1ca:	c9 f0       	breq	.+50     	; 0x1fe <CALLBACK_USB_GetDescriptor+0x3c>
     1cc:	38 f4       	brcc	.+14     	; 0x1dc <CALLBACK_USB_GetDescriptor+0x1a>
     1ce:	21 30       	cpi	r18, 0x01	; 1
     1d0:	31 05       	cpc	r19, r1
     1d2:	59 f0       	breq	.+22     	; 0x1ea <CALLBACK_USB_GetDescriptor+0x28>
     1d4:	22 30       	cpi	r18, 0x02	; 2
     1d6:	31 05       	cpc	r19, r1
     1d8:	69 f0       	breq	.+26     	; 0x1f4 <CALLBACK_USB_GetDescriptor+0x32>
     1da:	35 c0       	rjmp	.+106    	; 0x246 <CALLBACK_USB_GetDescriptor+0x84>
     1dc:	21 32       	cpi	r18, 0x21	; 33
     1de:	31 05       	cpc	r19, r1
     1e0:	41 f1       	breq	.+80     	; 0x232 <CALLBACK_USB_GetDescriptor+0x70>
     1e2:	22 32       	cpi	r18, 0x22	; 34
     1e4:	31 05       	cpc	r19, r1
     1e6:	51 f1       	breq	.+84     	; 0x23c <CALLBACK_USB_GetDescriptor+0x7a>
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <CALLBACK_USB_GetDescriptor+0x84>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     1ea:	82 e1       	ldi	r24, 0x12	; 18
     1ec:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1ee:	24 e3       	ldi	r18, 0x34	; 52
     1f0:	31 e0       	ldi	r19, 0x01	; 1
     1f2:	32 c0       	rjmp	.+100    	; 0x258 <CALLBACK_USB_GetDescriptor+0x96>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1f4:	82 e2       	ldi	r24, 0x22	; 34
     1f6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1f8:	22 e1       	ldi	r18, 0x12	; 18
     1fa:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1fc:	2d c0       	rjmp	.+90     	; 0x258 <CALLBACK_USB_GetDescriptor+0x96>
		case DTYPE_String:
			switch (DescriptorNumber)
     1fe:	99 27       	eor	r25, r25
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	91 05       	cpc	r25, r1
     204:	51 f0       	breq	.+20     	; 0x21a <CALLBACK_USB_GetDescriptor+0x58>
     206:	18 f0       	brcs	.+6      	; 0x20e <CALLBACK_USB_GetDescriptor+0x4c>
     208:	02 97       	sbiw	r24, 0x02	; 2
     20a:	69 f0       	breq	.+26     	; 0x226 <CALLBACK_USB_GetDescriptor+0x64>
     20c:	21 c0       	rjmp	.+66     	; 0x250 <CALLBACK_USB_GetDescriptor+0x8e>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     20e:	ee e0       	ldi	r30, 0x0E	; 14
     210:	f1 e0       	ldi	r31, 0x01	; 1
     212:	84 91       	lpm	r24, Z
     214:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     216:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     218:	1f c0       	rjmp	.+62     	; 0x258 <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     21a:	ec ed       	ldi	r30, 0xDC	; 220
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	84 91       	lpm	r24, Z
     220:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     222:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     224:	19 c0       	rjmp	.+50     	; 0x258 <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     226:	ec ea       	ldi	r30, 0xAC	; 172
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	84 91       	lpm	r24, Z
     22c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     22e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     230:	13 c0       	rjmp	.+38     	; 0x258 <CALLBACK_USB_GetDescriptor+0x96>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     232:	89 e0       	ldi	r24, 0x09	; 9
     234:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
     236:	24 e2       	ldi	r18, 0x24	; 36
     238:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     23a:	0e c0       	rjmp	.+28     	; 0x258 <CALLBACK_USB_GetDescriptor+0x96>
		case HID_DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
     23c:	82 e4       	ldi	r24, 0x42	; 66
     23e:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &JoystickReport;
     240:	26 e4       	ldi	r18, 0x46	; 70
     242:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
     244:	09 c0       	rjmp	.+18     	; 0x258 <CALLBACK_USB_GetDescriptor+0x96>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	04 c0       	rjmp	.+8      	; 0x258 <CALLBACK_USB_GetDescriptor+0x96>
	uint16_t    Size    = NO_DESCRIPTOR;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
     258:	fa 01       	movw	r30, r20
     25a:	31 83       	std	Z+1, r19	; 0x01
     25c:	20 83       	st	Z, r18
	return Size;
}
     25e:	08 95       	ret

00000260 <SPI_init>:
  /******************** Functions **************************/

  //Initialize the USI on the ATmega168/328 for Three-Wire Operation
  void SPI_init(){
	  //Initialize the output for SPI Master Mode
	  DDR_SPI |= (1<<SS)|(1<<MOSI)|(0<<MISO)|(1<<SCK); //SS | MOSI | MISO | SCK
     260:	84 b1       	in	r24, 0x04	; 4
     262:	87 60       	ori	r24, 0x07	; 7
     264:	84 b9       	out	0x04, r24	; 4
	  //Set the default values for outputs to zero and inputs to have pull-up resistors
	  PORT_SPI |= (0<<SS)|(0<<MOSI)|(1<<MISO)|(0<<SCK); //SS | MOSI | MISO | SCK
     266:	2b 9a       	sbi	0x05, 3	; 5
     268:	08 95       	ret

0000026a <SPI_Enable>:
  }

  //Enable the slave select line
  void SPI_Enable(){
	  //Enable SS Line
	  PORT_SPI &= ~(1<<SS);
     26a:	28 98       	cbi	0x05, 0	; 5
     26c:	08 95       	ret

0000026e <SPI_Disable>:
  }

  //Enable the slave select line
  void SPI_Disable(){
	  //Disable SS Line
	  PORT_SPI |= (1<<SS);
     26e:	28 9a       	sbi	0x05, 0	; 5
     270:	08 95       	ret

00000272 <SPI_Transfer>:
  }

  //Writes the byte into the device and receives byte back using software
  uint8_t SPI_Transfer(uint8_t byte){
     272:	e8 2f       	mov	r30, r24
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
	  // 1. The clock is held high until a byte is to be sent.
	  uint8_t out = 0x00;
     278:	80 e0       	ldi	r24, 0x00	; 0
	  for (i = 0; i < 8; i++){
		  // 2. When the clock edge drops low, the values on the line start to change
		  PORT_SPI &= ~(1<<SCK);
		  _delay_us(HOLD_TIME);
		  //Get bit i from byte
		if(((byte & ( 1 << i )) >> i)){
     27a:	a1 e0       	ldi	r26, 0x01	; 1
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	f0 e0       	ldi	r31, 0x00	; 0
	  // 1. The clock is held high until a byte is to be sent.
	  uint8_t out = 0x00;
	  uint8_t i = 0;
	  for (i = 0; i < 8; i++){
		  // 2. When the clock edge drops low, the values on the line start to change
		  PORT_SPI &= ~(1<<SCK);
     280:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     282:	95 e1       	ldi	r25, 0x15	; 21
     284:	9a 95       	dec	r25
     286:	f1 f7       	brne	.-4      	; 0x284 <SPI_Transfer+0x12>
     288:	00 00       	nop
		  _delay_us(HOLD_TIME);
		  //Get bit i from byte
		if(((byte & ( 1 << i )) >> i)){
     28a:	bd 01       	movw	r22, r26
     28c:	02 2e       	mov	r0, r18
     28e:	02 c0       	rjmp	.+4      	; 0x294 <SPI_Transfer+0x22>
     290:	66 0f       	add	r22, r22
     292:	77 1f       	adc	r23, r23
     294:	0a 94       	dec	r0
     296:	e2 f7       	brpl	.-8      	; 0x290 <SPI_Transfer+0x1e>
     298:	af 01       	movw	r20, r30
     29a:	46 23       	and	r20, r22
     29c:	57 23       	and	r21, r23
     29e:	02 2e       	mov	r0, r18
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <SPI_Transfer+0x34>
     2a2:	55 95       	asr	r21
     2a4:	47 95       	ror	r20
     2a6:	0a 94       	dec	r0
     2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <SPI_Transfer+0x30>
     2aa:	45 2b       	or	r20, r21
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <SPI_Transfer+0x40>
			PORT_SPI |= (1<<MOSI);
     2ae:	2a 9a       	sbi	0x05, 2	; 5
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <SPI_Transfer+0x42>
		}
		else{
			PORT_SPI &= ~(1<<MOSI);
     2b2:	2a 98       	cbi	0x05, 2	; 5
     2b4:	90 e4       	ldi	r25, 0x40	; 64
     2b6:	9a 95       	dec	r25
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <SPI_Transfer+0x44>
		}
		_delay_us(CLOCK_PER / 2 - HOLD_TIME);
		// 3. When the clock goes from low to high, value are actually read
		PORT_SPI |= (1<<SCK);
     2ba:	29 9a       	sbi	0x05, 1	; 5
     2bc:	95 e1       	ldi	r25, 0x15	; 21
     2be:	9a 95       	dec	r25
     2c0:	f1 f7       	brne	.-4      	; 0x2be <SPI_Transfer+0x4c>
     2c2:	00 00       	nop
		_delay_us(HOLD_TIME);
		if((PIN_SPI & (1<<MISO))){
     2c4:	1b 99       	sbic	0x03, 3	; 3
			out |= (1<<i);
     2c6:	86 2b       	or	r24, r22
     2c8:	90 e4       	ldi	r25, 0x40	; 64
     2ca:	9a 95       	dec	r25
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <SPI_Transfer+0x58>
     2ce:	2f 5f       	subi	r18, 0xFF	; 255
     2d0:	3f 4f       	sbci	r19, 0xFF	; 255
  //Writes the byte into the device and receives byte back using software
  uint8_t SPI_Transfer(uint8_t byte){
	  // 1. The clock is held high until a byte is to be sent.
	  uint8_t out = 0x00;
	  uint8_t i = 0;
	  for (i = 0; i < 8; i++){
     2d2:	28 30       	cpi	r18, 0x08	; 8
     2d4:	31 05       	cpc	r19, r1
     2d6:	a1 f6       	brne	.-88     	; 0x280 <SPI_Transfer+0xe>
			out |= (1<<i);
		}
		_delay_us(CLOCK_PER / 2 - HOLD_TIME);
	  }
	  return out;
  }
     2d8:	08 95       	ret

000002da <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2da:	84 b7       	in	r24, 0x34	; 52
     2dc:	87 7f       	andi	r24, 0xF7	; 247
     2de:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	a8 95       	wdr
     2e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2ea:	88 61       	ori	r24, 0x18	; 24
     2ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	80 e8       	ldi	r24, 0x80	; 128
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     302:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     306:	0f be       	out	0x3f, r0	; 63

/******************** Functions **************************/

static inline void Joystick_Init(void){
	//Initialize the output for SPI Master Mode
	DDR_PSX |= (0<<ACK);
     308:	84 b1       	in	r24, 0x04	; 4
     30a:	84 b9       	out	0x04, r24	; 4
	//Set the default values for outputs to zero and inputs to have pull-up resistors
	PORT_PSX |= (1<<ACK);
     30c:	2c 9a       	sbi	0x05, 4	; 5
	//Initialize the SPI Connection
	SPI_init();
     30e:	a8 df       	rcall	.-176    	; 0x260 <SPI_init>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	Joystick_Init();
	USB_Init();
     310:	7d d6       	rcall	.+3322   	; 0x100c <USB_Init>
     312:	50 9a       	sbi	0x0a, 0	; 10
	
	DDRD |= (1<<PD0);
     314:	8b b1       	in	r24, 0x0b	; 11
	PORTD |= (0<<PD0);
     316:	8b b9       	out	0x0b, r24	; 11
     318:	08 95       	ret

0000031a <main>:
     31a:	df df       	rcall	.-66     	; 0x2da <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     31c:	78 94       	sei

	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&Joystick_HID_Interface);
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	7d d2       	rcall	.+1274   	; 0x81e <HID_Device_USBTask>
		USB_USBTask();
     324:	0e 94 5f 0a 	call	0x14be	; 0x14be <USB_USBTask>
     328:	fa cf       	rjmp	.-12     	; 0x31e <main+0x4>

0000032a <EVENT_USB_Device_Connect>:
	PORTD |= (0<<PD0);
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     32a:	08 95       	ret

0000032c <EVENT_USB_Device_Disconnect>:
	
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     32c:	08 95       	ret

0000032e <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	61 d2       	rcall	.+1218   	; 0x7f6 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     334:	e2 ee       	ldi	r30, 0xE2	; 226
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	80 81       	ld	r24, Z
     33a:	84 60       	ori	r24, 0x04	; 4
     33c:	80 83       	st	Z, r24
     33e:	08 95       	ret

00000340 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0f c1       	rjmp	.+542    	; 0x564 <HID_Device_ProcessControlRequest>
     346:	08 95       	ret

00000348 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     348:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Joystick_HID_Interface+0xe>
     34c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Joystick_HID_Interface+0xf>
     350:	00 97       	sbiw	r24, 0x00	; 0
     352:	29 f0       	breq	.+10     	; 0x35e <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Joystick_HID_Interface+0xf>
     35a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Joystick_HID_Interface+0xe>
     35e:	08 95       	ret

00000360 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     360:	df 92       	push	r13
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	e9 01       	movw	r28, r18
	*
	*  \return Mask of \c JOYSTICK_* constants indicating the current joystick direction(s).
	*/
static inline uint8_t Joystick_GetStatus(PSXControllerStatus *controller){
	//Wake up the controller with the ATT (Attention Line)
	SPI_Enable();
     370:	7c df       	rcall	.-264    	; 0x26a <SPI_Enable>
	//Send 0x01 to receive the controller ID
	SPI_Transfer(0x01);
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	7e df       	rcall	.-260    	; 0x272 <SPI_Transfer>
	//Transfer returns controller ID
	//Send 0x42 and if we received a 0x5A, the controller is ready for send data
	controller->id = SPI_Transfer(0x42);
     376:	82 e4       	ldi	r24, 0x42	; 66
     378:	7c df       	rcall	.-264    	; 0x272 <SPI_Transfer>
     37a:	0f 2e       	mov	r0, r31
     37c:	f0 e1       	ldi	r31, 0x10	; 16
     37e:	ef 2e       	mov	r14, r31
     380:	f1 e0       	ldi	r31, 0x01	; 1
     382:	ff 2e       	mov	r15, r31
     384:	f0 2d       	mov	r31, r0
     386:	f7 01       	movw	r30, r14
     388:	80 83       	st	Z, r24
	SPI_Transfer(0xFF);
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	72 df       	rcall	.-284    	; 0x272 <SPI_Transfer>
	//Data is ready and sending the two bytes for button status
	uint8_t upper = ~SPI_Transfer(0x00); //First Byte
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	70 df       	rcall	.-288    	; 0x272 <SPI_Transfer>
     392:	d8 2e       	mov	r13, r24
	controller->buttons = (uint16_t)(upper << 8) | (~SPI_Transfer(0x00) & 0xFF); //Last Byte
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	6d df       	rcall	.-294    	; 0x272 <SPI_Transfer>
     398:	d0 94       	com	r13
     39a:	2d 2d       	mov	r18, r13
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	32 2f       	mov	r19, r18
     3a0:	22 27       	eor	r18, r18
     3a2:	80 95       	com	r24
     3a4:	28 2b       	or	r18, r24
     3a6:	f7 01       	movw	r30, r14
     3a8:	32 83       	std	Z+2, r19	; 0x02
     3aa:	21 83       	std	Z+1, r18	; 0x01
	controller->joyrx = ~SPI_Transfer(0xFF);
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	61 df       	rcall	.-318    	; 0x272 <SPI_Transfer>
     3b0:	80 95       	com	r24
     3b2:	f7 01       	movw	r30, r14
     3b4:	85 83       	std	Z+5, r24	; 0x05
	controller->joyry = ~SPI_Transfer(0xFF);
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	5c df       	rcall	.-328    	; 0x272 <SPI_Transfer>
     3ba:	80 95       	com	r24
     3bc:	f7 01       	movw	r30, r14
     3be:	86 83       	std	Z+6, r24	; 0x06
	controller->joylx = ~SPI_Transfer(0xFF);
     3c0:	8f ef       	ldi	r24, 0xFF	; 255
     3c2:	57 df       	rcall	.-338    	; 0x272 <SPI_Transfer>
     3c4:	80 95       	com	r24
     3c6:	f7 01       	movw	r30, r14
     3c8:	83 83       	std	Z+3, r24	; 0x03
	controller->joyly = ~SPI_Transfer(0xFF);
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	52 df       	rcall	.-348    	; 0x272 <SPI_Transfer>
     3ce:	80 95       	com	r24
     3d0:	f7 01       	movw	r30, r14
     3d2:	84 83       	std	Z+4, r24	; 0x04
     3d4:	4c df       	rcall	.-360    	; 0x26e <SPI_Disable>
	SPI_Disable();
     3d6:	f7 01       	movw	r30, r14
     3d8:	81 81       	ldd	r24, Z+1	; 0x01
	static PSXControllerStatus controller;
	uint8_t success = Joystick_GetStatus(&controller);
	//If the X button was pressed/LED ON
	if(success){
		//Fill in the report
		if (controller.buttons & (1<<PSX_SQR))
     3da:	87 ff       	sbrs	r24, 7
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <CALLBACK_HID_Device_CreateHIDReport+0x86>
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	30 e0       	ldi	r19, 0x00	; 0
			JoystickReport->Button = (1 << 0);
     3e2:	38 87       	std	Y+8, r19	; 0x08
     3e4:	2f 83       	std	Y+7, r18	; 0x07
     3e6:	86 ff       	sbrs	r24, 6
     3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <CALLBACK_HID_Device_CreateHIDReport+0x94>
		if (controller.buttons & (1<<PSX_X))
     3ea:	2f 81       	ldd	r18, Y+7	; 0x07
     3ec:	38 85       	ldd	r19, Y+8	; 0x08
			JoystickReport->Button |= (1 << 1);
     3ee:	22 60       	ori	r18, 0x02	; 2
     3f0:	38 87       	std	Y+8, r19	; 0x08
     3f2:	2f 83       	std	Y+7, r18	; 0x07
     3f4:	85 ff       	sbrs	r24, 5
     3f6:	05 c0       	rjmp	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		if (controller.buttons & (1<<PSX_CIRC))
     3f8:	2f 81       	ldd	r18, Y+7	; 0x07
     3fa:	38 85       	ldd	r19, Y+8	; 0x08
			JoystickReport->Button |= (1 << 2);
     3fc:	24 60       	ori	r18, 0x04	; 4
     3fe:	38 87       	std	Y+8, r19	; 0x08
     400:	2f 83       	std	Y+7, r18	; 0x07
     402:	84 ff       	sbrs	r24, 4
     404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		if (controller.buttons & (1<<PSX_TRGL))
     406:	2f 81       	ldd	r18, Y+7	; 0x07
     408:	38 85       	ldd	r19, Y+8	; 0x08
			JoystickReport->Button |= (1 << 3);
     40a:	28 60       	ori	r18, 0x08	; 8
     40c:	38 87       	std	Y+8, r19	; 0x08
     40e:	2f 83       	std	Y+7, r18	; 0x07
     410:	83 ff       	sbrs	r24, 3
     412:	05 c0       	rjmp	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		if (controller.buttons & (1<<PSX_R1))
     414:	2f 81       	ldd	r18, Y+7	; 0x07
     416:	38 85       	ldd	r19, Y+8	; 0x08
			JoystickReport->Button |= (1 << 5);
     418:	20 62       	ori	r18, 0x20	; 32
     41a:	38 87       	std	Y+8, r19	; 0x08
     41c:	2f 83       	std	Y+7, r18	; 0x07
     41e:	82 ff       	sbrs	r24, 2
     420:	05 c0       	rjmp	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		if (controller.buttons & (1<<PSX_L1))
     422:	2f 81       	ldd	r18, Y+7	; 0x07
     424:	38 85       	ldd	r19, Y+8	; 0x08
			JoystickReport->Button |= (1 << 4);
     426:	20 61       	ori	r18, 0x10	; 16
     428:	38 87       	std	Y+8, r19	; 0x08
     42a:	2f 83       	std	Y+7, r18	; 0x07
     42c:	81 ff       	sbrs	r24, 1
     42e:	08 c0       	rjmp	.+16     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		if (controller.buttons & (1<<PSX_R2)){
     430:	8f 81       	ldd	r24, Y+7	; 0x07
     432:	98 85       	ldd	r25, Y+8	; 0x08
			JoystickReport->Button |= (1 << 7);
     434:	80 68       	ori	r24, 0x80	; 128
     436:	98 87       	std	Y+8, r25	; 0x08
     438:	8f 83       	std	Y+7, r24	; 0x07
     43a:	8f e7       	ldi	r24, 0x7F	; 127
     43c:	8c 83       	std	Y+4, r24	; 0x04
			JoystickReport->Ry = 127;
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     440:	81 e8       	ldi	r24, 0x81	; 129
     442:	8c 83       	std	Y+4, r24	; 0x04
		}
		else{
			JoystickReport->Ry = -127;
     444:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__data_end+0x1>
		}
		if (controller.buttons & (1<<PSX_L2)){
     448:	80 ff       	sbrs	r24, 0
     44a:	08 c0       	rjmp	.+16     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     44c:	8f 81       	ldd	r24, Y+7	; 0x07
     44e:	98 85       	ldd	r25, Y+8	; 0x08
			JoystickReport->Button |= (1 << 6);
     450:	80 64       	ori	r24, 0x40	; 64
     452:	98 87       	std	Y+8, r25	; 0x08
     454:	8f 83       	std	Y+7, r24	; 0x07
     456:	8f e7       	ldi	r24, 0x7F	; 127
     458:	8b 83       	std	Y+3, r24	; 0x03
			JoystickReport->Rx = 127;
     45a:	02 c0       	rjmp	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45c:	81 e8       	ldi	r24, 0x81	; 129
     45e:	8b 83       	std	Y+3, r24	; 0x03
		}
		else{
			JoystickReport->Rx = -127;
     460:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__data_end+0x1>
		}
		int8_t dpad = ((controller.buttons & 0xF000)>>12);
     464:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <__data_end+0x2>
     468:	29 2f       	mov	r18, r25
     46a:	22 95       	swap	r18
		switch (dpad)
     46c:	2f 70       	andi	r18, 0x0F	; 15
     46e:	24 30       	cpi	r18, 0x04	; 4
     470:	91 f0       	breq	.+36     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     472:	34 f4       	brge	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     474:	22 30       	cpi	r18, 0x02	; 2
     476:	01 f1       	breq	.+64     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     478:	e4 f4       	brge	.+56     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     47a:	21 30       	cpi	r18, 0x01	; 1
     47c:	b9 f0       	breq	.+46     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     47e:	22 c0       	rjmp	.+68     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     480:	28 30       	cpi	r18, 0x08	; 8
     482:	71 f0       	breq	.+28     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     484:	1c f4       	brge	.+6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     486:	26 30       	cpi	r18, 0x06	; 6
     488:	d1 f0       	breq	.+52     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     48a:	1c c0       	rjmp	.+56     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     48c:	29 30       	cpi	r18, 0x09	; 9
     48e:	59 f0       	breq	.+22     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     490:	2c 30       	cpi	r18, 0x0C	; 12
     492:	19 f0       	breq	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     494:	17 c0       	rjmp	.+46     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     496:	1e 82       	std	Y+6, r1	; 0x06
     498:	17 c0       	rjmp	.+46     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
		{
		case 0x04:
			//Down
			JoystickReport->Slider = 0x00;
     49a:	20 e2       	ldi	r18, 0x20	; 32
			break;
     49c:	2e 83       	std	Y+6, r18	; 0x06
		case 0x0C:
			//Down Right
			JoystickReport->Slider = 0x20;
     49e:	14 c0       	rjmp	.+40     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4a0:	20 e4       	ldi	r18, 0x40	; 64
			break;
     4a2:	2e 83       	std	Y+6, r18	; 0x06
		case 0x08:
			//Right
			JoystickReport->Slider = 0x40;
     4a4:	11 c0       	rjmp	.+34     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4a6:	20 e6       	ldi	r18, 0x60	; 96
			break;
     4a8:	2e 83       	std	Y+6, r18	; 0x06
		case 0x09:
			//Up Right
			JoystickReport->Slider = 0x60;
     4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4ac:	21 e8       	ldi	r18, 0x81	; 129
			break;
     4ae:	2e 83       	std	Y+6, r18	; 0x06
		case 0x01:
			//Up
			JoystickReport->Slider = 0x81;
     4b0:	0b c0       	rjmp	.+22     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4b2:	20 ea       	ldi	r18, 0xA0	; 160
			break;
     4b4:	2e 83       	std	Y+6, r18	; 0x06
		case 0x03:
			//Up Left
			JoystickReport->Slider = 0xA0;
     4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4b8:	20 ec       	ldi	r18, 0xC0	; 192
			break;
     4ba:	2e 83       	std	Y+6, r18	; 0x06
		case 0x02:
			//Left
			JoystickReport->Slider = 0xC0;
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4be:	20 ee       	ldi	r18, 0xE0	; 224
			break;
     4c0:	2e 83       	std	Y+6, r18	; 0x06
		case 0x06:
			//Left Down
			JoystickReport->Slider = 0xE0;
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c4:	20 e8       	ldi	r18, 0x80	; 128
			break;
     4c6:	2e 83       	std	Y+6, r18	; 0x06
		default:
			//Act like nothing was pressed
			JoystickReport->Slider = 0x80;
     4c8:	ac 01       	movw	r20, r24
     4ca:	44 27       	eor	r20, r20
			break;
		}
		if ((controller.buttons & (1<<PSX_STRT)) && !(controller.buttons & (1<<PSX_SLCT)))
     4cc:	58 70       	andi	r21, 0x08	; 8
     4ce:	93 ff       	sbrs	r25, 3
     4d0:	07 c0       	rjmp	.+14     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4d2:	90 fd       	sbrc	r25, 0
     4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4d6:	2f 81       	ldd	r18, Y+7	; 0x07
     4d8:	38 85       	ldd	r19, Y+8	; 0x08
			JoystickReport->Button |= (1 << 9);
     4da:	32 60       	ori	r19, 0x02	; 2
     4dc:	38 87       	std	Y+8, r19	; 0x08
     4de:	2f 83       	std	Y+7, r18	; 0x07
     4e0:	91 ff       	sbrs	r25, 1
     4e2:	05 c0       	rjmp	.+10     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
		if (controller.buttons & (1<<PSX_R3))
     4e4:	2f 81       	ldd	r18, Y+7	; 0x07
     4e6:	38 85       	ldd	r19, Y+8	; 0x08
			JoystickReport->Button |= (1 << 10);
     4e8:	34 60       	ori	r19, 0x04	; 4
     4ea:	38 87       	std	Y+8, r19	; 0x08
     4ec:	2f 83       	std	Y+7, r18	; 0x07
     4ee:	92 ff       	sbrs	r25, 2
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		if (controller.buttons & (1<<PSX_L3))
     4f2:	2f 81       	ldd	r18, Y+7	; 0x07
     4f4:	38 85       	ldd	r19, Y+8	; 0x08
			JoystickReport->Button |= (1 << 11);
     4f6:	38 60       	ori	r19, 0x08	; 8
     4f8:	38 87       	std	Y+8, r19	; 0x08
     4fa:	2f 83       	std	Y+7, r18	; 0x07
     4fc:	45 2b       	or	r20, r21
     4fe:	39 f4       	brne	.+14     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
		if (!(controller.buttons & (1<<PSX_STRT)) && (controller.buttons & (1<<PSX_SLCT)))
     500:	90 ff       	sbrs	r25, 0
     502:	05 c0       	rjmp	.+10     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     504:	2f 81       	ldd	r18, Y+7	; 0x07
     506:	38 85       	ldd	r19, Y+8	; 0x08
			JoystickReport->Button |= (1 << 8);
     508:	31 60       	ori	r19, 0x01	; 1
     50a:	38 87       	std	Y+8, r19	; 0x08
     50c:	2f 83       	std	Y+7, r18	; 0x07
     50e:	88 27       	eor	r24, r24
     510:	99 70       	andi	r25, 0x09	; 9
		if ((controller.buttons & (1<<PSX_STRT)) && (controller.buttons & (1<<PSX_SLCT)))
     512:	81 15       	cp	r24, r1
     514:	99 40       	sbci	r25, 0x09	; 9
     516:	29 f4       	brne	.+10     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     518:	8f 81       	ldd	r24, Y+7	; 0x07
     51a:	98 85       	ldd	r25, Y+8	; 0x08
			JoystickReport->Button |= (1 << 12);
     51c:	90 61       	ori	r25, 0x10	; 16
     51e:	98 87       	std	Y+8, r25	; 0x08
     520:	8f 83       	std	Y+7, r24	; 0x07
     522:	e0 e1       	ldi	r30, 0x10	; 16
     524:	f1 e0       	ldi	r31, 0x01	; 1
		
		JoystickReport->X = -1*(controller.joylx-127);
     526:	8f e7       	ldi	r24, 0x7F	; 127
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	28 2f       	mov	r18, r24
     52c:	29 1b       	sub	r18, r25
     52e:	28 83       	st	Y, r18
     530:	94 81       	ldd	r25, Z+4	; 0x04
     532:	28 2f       	mov	r18, r24
		JoystickReport->Y = -1*(controller.joyly-127);
     534:	29 1b       	sub	r18, r25
     536:	29 83       	std	Y+1, r18	; 0x01
     538:	96 81       	ldd	r25, Z+6	; 0x06
     53a:	28 2f       	mov	r18, r24
		JoystickReport->Rz = -1*(controller.joyry-127);
     53c:	29 1b       	sub	r18, r25
     53e:	2d 83       	std	Y+5, r18	; 0x05
     540:	95 81       	ldd	r25, Z+5	; 0x05
     542:	89 1b       	sub	r24, r25
		JoystickReport->Z = -1*(controller.joyrx-127);
     544:	8a 83       	std	Y+2, r24	; 0x02
     546:	89 e0       	ldi	r24, 0x09	; 9
     548:	90 e0       	ldi	r25, 0x00	; 0
		//Send that report out
		*ReportSize = sizeof(USB_JoystickReport_Data_t);
     54a:	f8 01       	movw	r30, r16
     54c:	91 83       	std	Z+1, r25	; 0x01
     54e:	80 83       	st	Z, r24
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	df 91       	pop	r29
	}
	return false;
}
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	08 95       	ret

00000562 <CALLBACK_HID_Device_ProcessHIDReport>:
     562:	08 95       	ret

00000564 <HID_Device_ProcessControlRequest>:
     564:	3f 92       	push	r3
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     566:	4f 92       	push	r4
     568:	5f 92       	push	r5
     56a:	6f 92       	push	r6
     56c:	7f 92       	push	r7
     56e:	8f 92       	push	r8
     570:	9f 92       	push	r9
     572:	af 92       	push	r10
     574:	bf 92       	push	r11
     576:	cf 92       	push	r12
     578:	df 92       	push	r13
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	00 d0       	rcall	.+0      	; 0x588 <HID_Device_ProcessControlRequest+0x24>
     588:	1f 92       	push	r1
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     590:	ed b6       	in	r14, 0x3d	; 61
     592:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     594:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     598:	83 ff       	sbrs	r24, 3
     59a:	13 c1       	rjmp	.+550    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     59c:	f6 01       	movw	r30, r12
     59e:	80 81       	ld	r24, Z
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <USB_ControlRequest+0x4>
     5a6:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <USB_ControlRequest+0x5>
     5aa:	28 17       	cp	r18, r24
     5ac:	39 07       	cpc	r19, r25
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <HID_Device_ProcessControlRequest+0x4e>
     5b0:	08 c1       	rjmp	.+528    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
	  return;

	switch (USB_ControlRequest.bRequest)
     5b2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <USB_ControlRequest+0x1>
     5b6:	83 30       	cpi	r24, 0x03	; 3
     5b8:	09 f4       	brne	.+2      	; 0x5bc <HID_Device_ProcessControlRequest+0x58>
     5ba:	a0 c0       	rjmp	.+320    	; 0x6fc <HID_Device_ProcessControlRequest+0x198>
     5bc:	30 f4       	brcc	.+12     	; 0x5ca <HID_Device_ProcessControlRequest+0x66>
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	71 f0       	breq	.+28     	; 0x5de <HID_Device_ProcessControlRequest+0x7a>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <HID_Device_ProcessControlRequest+0x64>
     5c6:	e2 c0       	rjmp	.+452    	; 0x78c <HID_Device_ProcessControlRequest+0x228>
     5c8:	fc c0       	rjmp	.+504    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
     5ca:	8a 30       	cpi	r24, 0x0A	; 10
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <HID_Device_ProcessControlRequest+0x6c>
     5ce:	c2 c0       	rjmp	.+388    	; 0x754 <HID_Device_ProcessControlRequest+0x1f0>
     5d0:	8b 30       	cpi	r24, 0x0B	; 11
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <HID_Device_ProcessControlRequest+0x72>
     5d4:	ab c0       	rjmp	.+342    	; 0x72c <HID_Device_ProcessControlRequest+0x1c8>
     5d6:	89 30       	cpi	r24, 0x09	; 9
     5d8:	09 f0       	breq	.+2      	; 0x5dc <HID_Device_ProcessControlRequest+0x78>
     5da:	f3 c0       	rjmp	.+486    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
     5dc:	51 c0       	rjmp	.+162    	; 0x680 <HID_Device_ProcessControlRequest+0x11c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     5de:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest>
     5e2:	81 3a       	cpi	r24, 0xA1	; 161
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <HID_Device_ProcessControlRequest+0x84>
     5e6:	ed c0       	rjmp	.+474    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
			{
     5e8:	ad b6       	in	r10, 0x3d	; 61
     5ea:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
     5ec:	1a 82       	std	Y+2, r1	; 0x02
     5ee:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     5f0:	e5 e2       	ldi	r30, 0x25	; 37
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	82 81       	ldd	r24, Z+2	; 0x02
     5f6:	13 81       	ldd	r17, Z+3	; 0x03
     5f8:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     5fa:	f6 01       	movw	r30, r12
     5fc:	80 85       	ldd	r24, Z+8	; 0x08
     5fe:	48 2f       	mov	r20, r24
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	8d b7       	in	r24, 0x3d	; 61
     604:	9e b7       	in	r25, 0x3e	; 62
     606:	84 1b       	sub	r24, r20
     608:	95 0b       	sbc	r25, r21
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	9e bf       	out	0x3e, r25	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	8d bf       	out	0x3d, r24	; 61
     614:	ed b7       	in	r30, 0x3d	; 61
     616:	fe b7       	in	r31, 0x3e	; 62
     618:	31 96       	adiw	r30, 0x01	; 1
     61a:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	cf 01       	movw	r24, r30
     622:	7d d7       	rcall	.+3834   	; 0x151e <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     624:	4f ef       	ldi	r20, 0xFF	; 255
     626:	41 0f       	add	r20, r17
     628:	8e 01       	movw	r16, r28
     62a:	0f 5f       	subi	r16, 0xFF	; 255
     62c:	1f 4f       	sbci	r17, 0xFF	; 255
     62e:	94 01       	movw	r18, r8
     630:	be 01       	movw	r22, r28
     632:	6d 5f       	subi	r22, 0xFD	; 253
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	c6 01       	movw	r24, r12
     638:	93 de       	rcall	.-730    	; 0x360 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     63a:	f6 01       	movw	r30, r12
     63c:	86 81       	ldd	r24, Z+6	; 0x06
     63e:	97 81       	ldd	r25, Z+7	; 0x07
     640:	00 97       	sbiw	r24, 0x00	; 0
     642:	21 f0       	breq	.+8      	; 0x64c <HID_Device_ProcessControlRequest+0xe8>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     644:	40 85       	ldd	r20, Z+8	; 0x08
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	b4 01       	movw	r22, r8
     64a:	60 d7       	rcall	.+3776   	; 0x150c <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     64c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     650:	e8 ee       	ldi	r30, 0xE8	; 232
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	87 7f       	andi	r24, 0xF7	; 247
     658:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     65e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     662:	69 81       	ldd	r22, Y+1	; 0x01
     664:	7a 81       	ldd	r23, Y+2	; 0x02
     666:	c4 01       	movw	r24, r8
     668:	f4 d1       	rcall	.+1000   	; 0xa52 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     66a:	e8 ee       	ldi	r30, 0xE8	; 232
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	8b 77       	andi	r24, 0x7B	; 123
     672:	80 83       	st	Z, r24
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	be be       	out	0x3e, r11	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	ad be       	out	0x3d, r10	; 61
     67e:	a1 c0       	rjmp	.+322    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     680:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest>
     684:	81 32       	cpi	r24, 0x21	; 33
     686:	09 f0       	breq	.+2      	; 0x68a <HID_Device_ProcessControlRequest+0x126>
     688:	9c c0       	rjmp	.+312    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
			{
     68a:	6d b6       	in	r6, 0x3d	; 61
     68c:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     68e:	e5 e2       	ldi	r30, 0x25	; 37
     690:	f1 e0       	ldi	r31, 0x01	; 1
     692:	06 81       	ldd	r16, Z+6	; 0x06
     694:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     696:	52 80       	ldd	r5, Z+2	; 0x02
     698:	43 80       	ldd	r4, Z+3	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     69a:	8d b7       	in	r24, 0x3d	; 61
     69c:	9e b7       	in	r25, 0x3e	; 62
     69e:	80 1b       	sub	r24, r16
     6a0:	91 0b       	sbc	r25, r17
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	9e bf       	out	0x3e, r25	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	8d bf       	out	0x3d, r24	; 61
     6ac:	ed b7       	in	r30, 0x3d	; 61
     6ae:	fe b7       	in	r31, 0x3e	; 62
     6b0:	31 96       	adiw	r30, 0x01	; 1
     6b2:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6b4:	0f 2e       	mov	r0, r31
     6b6:	f8 ee       	ldi	r31, 0xE8	; 232
     6b8:	af 2e       	mov	r10, r31
     6ba:	b1 2c       	mov	r11, r1
     6bc:	f0 2d       	mov	r31, r0
     6be:	f5 01       	movw	r30, r10
     6c0:	80 81       	ld	r24, Z
     6c2:	87 7f       	andi	r24, 0xF7	; 247

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     6c4:	80 83       	st	Z, r24
     6c6:	b8 01       	movw	r22, r16
     6c8:	c4 01       	movw	r24, r8
     6ca:	47 d2       	rcall	.+1166   	; 0xb5a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6cc:	f5 01       	movw	r30, r10
     6ce:	80 81       	ld	r24, Z
     6d0:	8e 77       	andi	r24, 0x7E	; 126
     6d2:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	51 10       	cpse	r5, r1
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <HID_Device_ProcessControlRequest+0x178>
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	02 1b       	sub	r16, r18
     6e0:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     6e2:	28 0d       	add	r18, r8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     6e4:	39 1d       	adc	r19, r9
     6e6:	4f ef       	ldi	r20, 0xFF	; 255
     6e8:	44 0d       	add	r20, r4
     6ea:	65 2d       	mov	r22, r5
     6ec:	c6 01       	movw	r24, r12
     6ee:	39 df       	rcall	.-398    	; 0x562 <CALLBACK_HID_Device_ProcessHIDReport>
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	7e be       	out	0x3e, r7	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	6d be       	out	0x3d, r6	; 61
     6fa:	63 c0       	rjmp	.+198    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     6fc:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest>
     700:	81 3a       	cpi	r24, 0xA1	; 161
     702:	09 f0       	breq	.+2      	; 0x706 <HID_Device_ProcessControlRequest+0x1a2>
     704:	5e c0       	rjmp	.+188    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     706:	e8 ee       	ldi	r30, 0xE8	; 232
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	87 7f       	andi	r24, 0xF7	; 247
     70e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     710:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     712:	80 ff       	sbrs	r24, 0
     714:	fd cf       	rjmp	.-6      	; 0x710 <HID_Device_ProcessControlRequest+0x1ac>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     716:	f6 01       	movw	r30, r12
     718:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     71a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     71e:	e8 ee       	ldi	r30, 0xE8	; 232
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     726:	80 83       	st	Z, r24
     728:	cc d3       	rcall	.+1944   	; 0xec2 <Endpoint_ClearStatusStage>
     72a:	4b c0       	rjmp	.+150    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     72c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest>
     730:	81 32       	cpi	r24, 0x21	; 33
     732:	09 f0       	breq	.+2      	; 0x736 <HID_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     734:	46 c0       	rjmp	.+140    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
     736:	e8 ee       	ldi	r30, 0xE8	; 232
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     73e:	80 83       	st	Z, r24
     740:	c0 d3       	rcall	.+1920   	; 0xec2 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     742:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <USB_ControlRequest+0x2>
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	91 11       	cpse	r25, r1
     74a:	01 c0       	rjmp	.+2      	; 0x74e <HID_Device_ProcessControlRequest+0x1ea>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	f6 01       	movw	r30, r12
     750:	81 87       	std	Z+9, r24	; 0x09
     752:	37 c0       	rjmp	.+110    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     754:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest>
     758:	81 32       	cpi	r24, 0x21	; 33
     75a:	99 f5       	brne	.+102    	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
     75c:	e8 ee       	ldi	r30, 0xE8	; 232
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     764:	80 83       	st	Z, r24
     766:	ad d3       	rcall	.+1882   	; 0xec2 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     768:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <USB_ControlRequest+0x2>
     76c:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <USB_ControlRequest+0x3>
     770:	88 27       	eor	r24, r24
     772:	00 24       	eor	r0, r0
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	00 1c       	adc	r0, r0
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	00 1c       	adc	r0, r0
     780:	89 2f       	mov	r24, r25
     782:	90 2d       	mov	r25, r0
     784:	f6 01       	movw	r30, r12
     786:	95 87       	std	Z+13, r25	; 0x0d
     788:	84 87       	std	Z+12, r24	; 0x0c
     78a:	1b c0       	rjmp	.+54     	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     78c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest>
     790:	81 3a       	cpi	r24, 0xA1	; 161
     792:	b9 f4       	brne	.+46     	; 0x7c2 <HID_Device_ProcessControlRequest+0x25e>
     794:	e8 ee       	ldi	r30, 0xE8	; 232
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	87 7f       	andi	r24, 0xF7	; 247
     79c:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     79e:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     7a0:	80 ff       	sbrs	r24, 0
     7a2:	fd cf       	rjmp	.-6      	; 0x79e <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     7a4:	f6 01       	movw	r30, r12
     7a6:	84 85       	ldd	r24, Z+12	; 0x0c
     7a8:	95 85       	ldd	r25, Z+13	; 0x0d
     7aa:	96 95       	lsr	r25
     7ac:	87 95       	ror	r24
     7ae:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7b0:	87 95       	ror	r24
     7b2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7b6:	e8 ee       	ldi	r30, 0xE8	; 232
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     7be:	80 83       	st	Z, r24
     7c0:	80 d3       	rcall	.+1792   	; 0xec2 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	fe be       	out	0x3e, r15	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	ed be       	out	0x3d, r14	; 61
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	bf 90       	pop	r11
     7e4:	af 90       	pop	r10
     7e6:	9f 90       	pop	r9
     7e8:	8f 90       	pop	r8
     7ea:	7f 90       	pop	r7
     7ec:	6f 90       	pop	r6
     7ee:	5f 90       	pop	r5
     7f0:	4f 90       	pop	r4
     7f2:	3f 90       	pop	r3
     7f4:	08 95       	ret

000007f6 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     7f6:	fc 01       	movw	r30, r24
     7f8:	39 96       	adiw	r30, 0x09	; 9
     7fa:	27 e0       	ldi	r18, 0x07	; 7
     7fc:	df 01       	movw	r26, r30
     7fe:	1d 92       	st	X+, r1
     800:	2a 95       	dec	r18
     802:	e9 f7       	brne	.-6      	; 0x7fe <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	fc 01       	movw	r30, r24
     808:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     80a:	24 ef       	ldi	r18, 0xF4	; 244
     80c:	31 e0       	ldi	r19, 0x01	; 1
     80e:	35 87       	std	Z+13, r19	; 0x0d
     810:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     812:	23 e0       	ldi	r18, 0x03	; 3
     814:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	04 c3       	rjmp	.+1544   	; 0xe24 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     81c:	08 95       	ret

0000081e <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     81e:	5f 92       	push	r5
     820:	6f 92       	push	r6
     822:	7f 92       	push	r7
     824:	8f 92       	push	r8
     826:	9f 92       	push	r9
     828:	af 92       	push	r10
     82a:	bf 92       	push	r11
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	00 d0       	rcall	.+0      	; 0x83e <HID_Device_USBTask+0x20>
     83e:	1f 92       	push	r1
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     846:	ad b6       	in	r10, 0x3d	; 61
     848:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     84a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>
     84e:	84 30       	cpi	r24, 0x04	; 4
     850:	09 f0       	breq	.+2      	; 0x854 <HID_Device_USBTask+0x36>
     852:	8a c0       	rjmp	.+276    	; 0x968 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     854:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     858:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     85c:	f7 01       	movw	r30, r14
     85e:	22 85       	ldd	r18, Z+10	; 0x0a
     860:	33 85       	ldd	r19, Z+11	; 0x0b
     862:	28 17       	cp	r18, r24
     864:	39 07       	cpc	r19, r25
     866:	09 f4       	brne	.+2      	; 0x86a <HID_Device_USBTask+0x4c>
     868:	7f c0       	rjmp	.+254    	; 0x968 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     86a:	81 81       	ldd	r24, Z+1	; 0x01
     86c:	8f 70       	andi	r24, 0x0F	; 15
     86e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     872:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     876:	85 ff       	sbrs	r24, 5
     878:	77 c0       	rjmp	.+238    	; 0x968 <HID_Device_USBTask+0x14a>
	{
     87a:	8d b6       	in	r8, 0x3d	; 61
     87c:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     87e:	40 85       	ldd	r20, Z+8	; 0x08
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	8d b7       	in	r24, 0x3d	; 61
     884:	9e b7       	in	r25, 0x3e	; 62
     886:	84 1b       	sub	r24, r20
     888:	95 0b       	sbc	r25, r21
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	9e bf       	out	0x3e, r25	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	8d bf       	out	0x3d, r24	; 61
     894:	ed b7       	in	r30, 0x3d	; 61
     896:	fe b7       	in	r31, 0x3e	; 62
     898:	31 96       	adiw	r30, 0x01	; 1
     89a:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     89c:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     89e:	1a 82       	std	Y+2, r1	; 0x02
     8a0:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	cf 01       	movw	r24, r30
     8a8:	3a d6       	rcall	.+3188   	; 0x151e <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     8aa:	8e 01       	movw	r16, r28
     8ac:	0f 5f       	subi	r16, 0xFF	; 255
     8ae:	1f 4f       	sbci	r17, 0xFF	; 255
     8b0:	96 01       	movw	r18, r12
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	be 01       	movw	r22, r28
     8b6:	6d 5f       	subi	r22, 0xFD	; 253
     8b8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ba:	c7 01       	movw	r24, r14
     8bc:	51 dd       	rcall	.-1374   	; 0x360 <CALLBACK_HID_Device_CreateHIDReport>
     8be:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     8c0:	f7 01       	movw	r30, r14
     8c2:	84 85       	ldd	r24, Z+12	; 0x0c
     8c4:	95 85       	ldd	r25, Z+13	; 0x0d
     8c6:	89 2b       	or	r24, r25
     8c8:	41 f0       	breq	.+16     	; 0x8da <HID_Device_USBTask+0xbc>
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	26 85       	ldd	r18, Z+14	; 0x0e
     8ce:	37 85       	ldd	r19, Z+15	; 0x0f
     8d0:	23 2b       	or	r18, r19
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <HID_Device_USBTask+0xb8>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	78 2e       	mov	r7, r24
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <HID_Device_USBTask+0xbe>
     8da:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     8dc:	f7 01       	movw	r30, r14
     8de:	06 81       	ldd	r16, Z+6	; 0x06
     8e0:	17 81       	ldd	r17, Z+7	; 0x07
     8e2:	01 15       	cp	r16, r1
     8e4:	11 05       	cpc	r17, r1
     8e6:	89 f0       	breq	.+34     	; 0x90a <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     8e8:	49 81       	ldd	r20, Y+1	; 0x01
     8ea:	5a 81       	ldd	r21, Y+2	; 0x02
     8ec:	b8 01       	movw	r22, r16
     8ee:	c6 01       	movw	r24, r12
     8f0:	00 d6       	rcall	.+3072   	; 0x14f2 <memcmp>
     8f2:	66 24       	eor	r6, r6
     8f4:	63 94       	inc	r6
     8f6:	89 2b       	or	r24, r25
     8f8:	09 f4       	brne	.+2      	; 0x8fc <HID_Device_USBTask+0xde>
     8fa:	61 2c       	mov	r6, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     8fc:	f7 01       	movw	r30, r14
     8fe:	40 85       	ldd	r20, Z+8	; 0x08
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	b6 01       	movw	r22, r12
     904:	c8 01       	movw	r24, r16
     906:	02 d6       	rcall	.+3076   	; 0x150c <memcpy>
     908:	01 c0       	rjmp	.+2      	; 0x90c <HID_Device_USBTask+0xee>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     90a:	61 2c       	mov	r6, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     90c:	89 81       	ldd	r24, Y+1	; 0x01
     90e:	9a 81       	ldd	r25, Y+2	; 0x02
     910:	89 2b       	or	r24, r25
     912:	f1 f0       	breq	.+60     	; 0x950 <HID_Device_USBTask+0x132>
     914:	51 10       	cpse	r5, r1
     916:	04 c0       	rjmp	.+8      	; 0x920 <HID_Device_USBTask+0x102>
     918:	61 10       	cpse	r6, r1
     91a:	02 c0       	rjmp	.+4      	; 0x920 <HID_Device_USBTask+0x102>
     91c:	70 fe       	sbrs	r7, 0
     91e:	18 c0       	rjmp	.+48     	; 0x950 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     920:	f7 01       	movw	r30, r14
     922:	84 85       	ldd	r24, Z+12	; 0x0c
     924:	95 85       	ldd	r25, Z+13	; 0x0d
     926:	97 87       	std	Z+15, r25	; 0x0f
     928:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     92a:	81 81       	ldd	r24, Z+1	; 0x01
     92c:	8f 70       	andi	r24, 0x0F	; 15
     92e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     936:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     93a:	69 81       	ldd	r22, Y+1	; 0x01
     93c:	7a 81       	ldd	r23, Y+2	; 0x02
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	c6 01       	movw	r24, r12
     944:	29 d0       	rcall	.+82     	; 0x998 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     946:	e8 ee       	ldi	r30, 0xE8	; 232
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	8e 77       	andi	r24, 0x7E	; 126
     94e:	80 83       	st	Z, r24
     950:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     954:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     958:	f7 01       	movw	r30, r14
     95a:	93 87       	std	Z+11, r25	; 0x0b
     95c:	82 87       	std	Z+10, r24	; 0x0a
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	9e be       	out	0x3e, r9	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	8d be       	out	0x3d, r8	; 61
	}
}
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	be be       	out	0x3e, r11	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	ad be       	out	0x3d, r10	; 61
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	bf 90       	pop	r11
     98a:	af 90       	pop	r10
     98c:	9f 90       	pop	r9
     98e:	8f 90       	pop	r8
     990:	7f 90       	pop	r7
     992:	6f 90       	pop	r6
     994:	5f 90       	pop	r5
     996:	08 95       	ret

00000998 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     998:	8f 92       	push	r8
     99a:	9f 92       	push	r9
     99c:	af 92       	push	r10
     99e:	bf 92       	push	r11
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	8c 01       	movw	r16, r24
     9b2:	eb 01       	movw	r28, r22
     9b4:	5a 01       	movw	r10, r20
     9b6:	a9 d2       	rcall	.+1362   	; 0xf0a <Endpoint_WaitUntilReady>
     9b8:	81 11       	cpse	r24, r1
     9ba:	3e c0       	rjmp	.+124    	; 0xa38 <Endpoint_Write_Stream_LE+0xa0>
     9bc:	a1 14       	cp	r10, r1
     9be:	b1 04       	cpc	r11, r1
     9c0:	39 f0       	breq	.+14     	; 0x9d0 <Endpoint_Write_Stream_LE+0x38>
     9c2:	f5 01       	movw	r30, r10
     9c4:	80 81       	ld	r24, Z
     9c6:	91 81       	ldd	r25, Z+1	; 0x01
     9c8:	c8 1b       	sub	r28, r24
     9ca:	d9 0b       	sbc	r29, r25
     9cc:	08 0f       	add	r16, r24
     9ce:	19 1f       	adc	r17, r25
     9d0:	20 97       	sbiw	r28, 0x00	; 0
     9d2:	89 f1       	breq	.+98     	; 0xa36 <Endpoint_Write_Stream_LE+0x9e>
     9d4:	e1 2c       	mov	r14, r1
     9d6:	f1 2c       	mov	r15, r1
     9d8:	0f 2e       	mov	r0, r31
     9da:	f8 ee       	ldi	r31, 0xE8	; 232
     9dc:	8f 2e       	mov	r8, r31
     9de:	91 2c       	mov	r9, r1
     9e0:	f0 2d       	mov	r31, r0
     9e2:	0f 2e       	mov	r0, r31
     9e4:	f1 ef       	ldi	r31, 0xF1	; 241
     9e6:	cf 2e       	mov	r12, r31
     9e8:	d1 2c       	mov	r13, r1
     9ea:	f0 2d       	mov	r31, r0
     9ec:	f4 01       	movw	r30, r8
     9ee:	80 81       	ld	r24, Z
     9f0:	85 fd       	sbrc	r24, 5
     9f2:	14 c0       	rjmp	.+40     	; 0xa1c <Endpoint_Write_Stream_LE+0x84>
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 77       	andi	r24, 0x7E	; 126
     9f8:	80 83       	st	Z, r24
     9fa:	61 d5       	rcall	.+2754   	; 0x14be <USB_USBTask>
     9fc:	a1 14       	cp	r10, r1
     9fe:	b1 04       	cpc	r11, r1
     a00:	49 f0       	breq	.+18     	; 0xa14 <Endpoint_Write_Stream_LE+0x7c>
     a02:	f5 01       	movw	r30, r10
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	e8 0e       	add	r14, r24
     a0a:	f9 1e       	adc	r15, r25
     a0c:	f1 82       	std	Z+1, r15	; 0x01
     a0e:	e0 82       	st	Z, r14
     a10:	85 e0       	ldi	r24, 0x05	; 5
     a12:	12 c0       	rjmp	.+36     	; 0xa38 <Endpoint_Write_Stream_LE+0xa0>
     a14:	7a d2       	rcall	.+1268   	; 0xf0a <Endpoint_WaitUntilReady>
     a16:	88 23       	and	r24, r24
     a18:	51 f0       	breq	.+20     	; 0xa2e <Endpoint_Write_Stream_LE+0x96>
     a1a:	0e c0       	rjmp	.+28     	; 0xa38 <Endpoint_Write_Stream_LE+0xa0>
     a1c:	f8 01       	movw	r30, r16
     a1e:	81 91       	ld	r24, Z+
     a20:	8f 01       	movw	r16, r30
     a22:	f6 01       	movw	r30, r12
     a24:	80 83       	st	Z, r24
     a26:	21 97       	sbiw	r28, 0x01	; 1
     a28:	ff ef       	ldi	r31, 0xFF	; 255
     a2a:	ef 1a       	sub	r14, r31
     a2c:	ff 0a       	sbc	r15, r31
     a2e:	20 97       	sbiw	r28, 0x00	; 0
     a30:	e9 f6       	brne	.-70     	; 0x9ec <Endpoint_Write_Stream_LE+0x54>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <Endpoint_Write_Stream_LE+0xa0>
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	bf 90       	pop	r11
     a4a:	af 90       	pop	r10
     a4c:	9f 90       	pop	r9
     a4e:	8f 90       	pop	r8
     a50:	08 95       	ret

00000a52 <Endpoint_Write_Control_Stream_LE>:
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <USB_ControlRequest+0x6>
     a64:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <USB_ControlRequest+0x7>
     a68:	26 17       	cp	r18, r22
     a6a:	37 07       	cpc	r19, r23
     a6c:	58 f0       	brcs	.+22     	; 0xa84 <Endpoint_Write_Control_Stream_LE+0x32>
     a6e:	61 15       	cp	r22, r1
     a70:	71 05       	cpc	r23, r1
     a72:	39 f4       	brne	.+14     	; 0xa82 <Endpoint_Write_Control_Stream_LE+0x30>
     a74:	e8 ee       	ldi	r30, 0xE8	; 232
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	20 81       	ld	r18, Z
     a7a:	2e 77       	andi	r18, 0x7E	; 126
     a7c:	20 83       	st	Z, r18
     a7e:	9b 01       	movw	r18, r22
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <Endpoint_Write_Control_Stream_LE+0x32>
     a82:	9b 01       	movw	r18, r22
     a84:	a8 2f       	mov	r26, r24
     a86:	b9 2f       	mov	r27, r25
     a88:	10 e0       	ldi	r17, 0x00	; 0
     a8a:	e8 ee       	ldi	r30, 0xE8	; 232
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	63 ef       	ldi	r22, 0xF3	; 243
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	42 ef       	ldi	r20, 0xF2	; 242
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	0f 2e       	mov	r0, r31
     a98:	f1 ef       	ldi	r31, 0xF1	; 241
     a9a:	cf 2e       	mov	r12, r31
     a9c:	d1 2c       	mov	r13, r1
     a9e:	f0 2d       	mov	r31, r0
     aa0:	01 e0       	ldi	r16, 0x01	; 1
     aa2:	f1 2c       	mov	r15, r1
     aa4:	30 c0       	rjmp	.+96     	; 0xb06 <__stack+0x7>
     aa6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>
     aaa:	88 23       	and	r24, r24
     aac:	09 f4       	brne	.+2      	; 0xab0 <Endpoint_Write_Control_Stream_LE+0x5e>
     aae:	42 c0       	rjmp	.+132    	; 0xb34 <__stack+0x35>
     ab0:	85 30       	cpi	r24, 0x05	; 5
     ab2:	09 f4       	brne	.+2      	; 0xab6 <Endpoint_Write_Control_Stream_LE+0x64>
     ab4:	41 c0       	rjmp	.+130    	; 0xb38 <__stack+0x39>
     ab6:	80 81       	ld	r24, Z
     ab8:	83 fd       	sbrc	r24, 3
     aba:	40 c0       	rjmp	.+128    	; 0xb3c <__stack+0x3d>
     abc:	80 81       	ld	r24, Z
     abe:	82 fd       	sbrc	r24, 2
     ac0:	32 c0       	rjmp	.+100    	; 0xb26 <__stack+0x27>
     ac2:	80 81       	ld	r24, Z
     ac4:	80 ff       	sbrs	r24, 0
     ac6:	1f c0       	rjmp	.+62     	; 0xb06 <__stack+0x7>
     ac8:	eb 01       	movw	r28, r22
     aca:	18 81       	ld	r17, Y
     acc:	ea 01       	movw	r28, r20
     ace:	88 81       	ld	r24, Y
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	91 2b       	or	r25, r17
     ad4:	21 15       	cp	r18, r1
     ad6:	31 05       	cpc	r19, r1
     ad8:	79 f0       	breq	.+30     	; 0xaf8 <Endpoint_Write_Control_Stream_LE+0xa6>
     ada:	88 30       	cpi	r24, 0x08	; 8
     adc:	91 05       	cpc	r25, r1
     ade:	60 f4       	brcc	.+24     	; 0xaf8 <Endpoint_Write_Control_Stream_LE+0xa6>
     ae0:	1d 91       	ld	r17, X+
     ae2:	e6 01       	movw	r28, r12
     ae4:	18 83       	st	Y, r17
     ae6:	21 50       	subi	r18, 0x01	; 1
     ae8:	31 09       	sbc	r19, r1
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	21 15       	cp	r18, r1
     aee:	31 05       	cpc	r19, r1
     af0:	19 f0       	breq	.+6      	; 0xaf8 <Endpoint_Write_Control_Stream_LE+0xa6>
     af2:	88 30       	cpi	r24, 0x08	; 8
     af4:	91 05       	cpc	r25, r1
     af6:	a1 f7       	brne	.-24     	; 0xae0 <Endpoint_Write_Control_Stream_LE+0x8e>
     af8:	10 2f       	mov	r17, r16
     afa:	08 97       	sbiw	r24, 0x08	; 8
     afc:	09 f0       	breq	.+2      	; 0xb00 <__stack+0x1>
     afe:	1f 2d       	mov	r17, r15
     b00:	80 81       	ld	r24, Z
     b02:	8e 77       	andi	r24, 0x7E	; 126
     b04:	80 83       	st	Z, r24
     b06:	21 15       	cp	r18, r1
     b08:	31 05       	cpc	r19, r1
     b0a:	69 f6       	brne	.-102    	; 0xaa6 <Endpoint_Write_Control_Stream_LE+0x54>
     b0c:	11 11       	cpse	r17, r1
     b0e:	cb cf       	rjmp	.-106    	; 0xaa6 <Endpoint_Write_Control_Stream_LE+0x54>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__stack+0x27>
     b12:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>
     b16:	88 23       	and	r24, r24
     b18:	99 f0       	breq	.+38     	; 0xb40 <__stack+0x41>
     b1a:	85 30       	cpi	r24, 0x05	; 5
     b1c:	99 f0       	breq	.+38     	; 0xb44 <__stack+0x45>
     b1e:	80 81       	ld	r24, Z
     b20:	83 ff       	sbrs	r24, 3
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <__stack+0x2b>
     b24:	11 c0       	rjmp	.+34     	; 0xb48 <__stack+0x49>
     b26:	e8 ee       	ldi	r30, 0xE8	; 232
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	82 ff       	sbrs	r24, 2
     b2e:	f1 cf       	rjmp	.-30     	; 0xb12 <__stack+0x13>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0b c0       	rjmp	.+22     	; 0xb4a <__stack+0x4b>
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	09 c0       	rjmp	.+18     	; 0xb4a <__stack+0x4b>
     b38:	83 e0       	ldi	r24, 0x03	; 3
     b3a:	07 c0       	rjmp	.+14     	; 0xb4a <__stack+0x4b>
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <__stack+0x4b>
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	03 c0       	rjmp	.+6      	; 0xb4a <__stack+0x4b>
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <__stack+0x4b>
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	df 90       	pop	r13
     b56:	cf 90       	pop	r12
     b58:	08 95       	ret

00000b5a <Endpoint_Read_Control_Stream_LE>:
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	61 15       	cp	r22, r1
     b66:	71 05       	cpc	r23, r1
     b68:	51 f5       	brne	.+84     	; 0xbbe <Endpoint_Read_Control_Stream_LE+0x64>
     b6a:	e8 ee       	ldi	r30, 0xE8	; 232
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	8b 77       	andi	r24, 0x7B	; 123
     b72:	80 83       	st	Z, r24
     b74:	45 c0       	rjmp	.+138    	; 0xc00 <Endpoint_Read_Control_Stream_LE+0xa6>
     b76:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>
     b7a:	88 23       	and	r24, r24
     b7c:	09 f4       	brne	.+2      	; 0xb80 <Endpoint_Read_Control_Stream_LE+0x26>
     b7e:	47 c0       	rjmp	.+142    	; 0xc0e <Endpoint_Read_Control_Stream_LE+0xb4>
     b80:	85 30       	cpi	r24, 0x05	; 5
     b82:	09 f4       	brne	.+2      	; 0xb86 <Endpoint_Read_Control_Stream_LE+0x2c>
     b84:	46 c0       	rjmp	.+140    	; 0xc12 <Endpoint_Read_Control_Stream_LE+0xb8>
     b86:	80 81       	ld	r24, Z
     b88:	83 fd       	sbrc	r24, 3
     b8a:	45 c0       	rjmp	.+138    	; 0xc16 <Endpoint_Read_Control_Stream_LE+0xbc>
     b8c:	80 81       	ld	r24, Z
     b8e:	82 ff       	sbrs	r24, 2
     b90:	f2 cf       	rjmp	.-28     	; 0xb76 <Endpoint_Read_Control_Stream_LE+0x1c>
     b92:	4d c0       	rjmp	.+154    	; 0xc2e <Endpoint_Read_Control_Stream_LE+0xd4>
     b94:	ea 01       	movw	r28, r20
     b96:	88 81       	ld	r24, Y
     b98:	8d 93       	st	X+, r24
     b9a:	61 50       	subi	r22, 0x01	; 1
     b9c:	71 09       	sbc	r23, r1
     b9e:	41 f0       	breq	.+16     	; 0xbb0 <Endpoint_Read_Control_Stream_LE+0x56>
     ba0:	e9 01       	movw	r28, r18
     ba2:	18 81       	ld	r17, Y
     ba4:	e7 01       	movw	r28, r14
     ba6:	88 81       	ld	r24, Y
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	91 2b       	or	r25, r17
     bac:	89 2b       	or	r24, r25
     bae:	91 f7       	brne	.-28     	; 0xb94 <Endpoint_Read_Control_Stream_LE+0x3a>
     bb0:	80 81       	ld	r24, Z
     bb2:	8b 77       	andi	r24, 0x7B	; 123
     bb4:	80 83       	st	Z, r24
     bb6:	61 15       	cp	r22, r1
     bb8:	71 05       	cpc	r23, r1
     bba:	71 f4       	brne	.+28     	; 0xbd8 <Endpoint_Read_Control_Stream_LE+0x7e>
     bbc:	21 c0       	rjmp	.+66     	; 0xc00 <Endpoint_Read_Control_Stream_LE+0xa6>
     bbe:	a8 2f       	mov	r26, r24
     bc0:	b9 2f       	mov	r27, r25
     bc2:	e8 ee       	ldi	r30, 0xE8	; 232
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	23 ef       	ldi	r18, 0xF3	; 243
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	0f 2e       	mov	r0, r31
     bcc:	f2 ef       	ldi	r31, 0xF2	; 242
     bce:	ef 2e       	mov	r14, r31
     bd0:	f1 2c       	mov	r15, r1
     bd2:	f0 2d       	mov	r31, r0
     bd4:	41 ef       	ldi	r20, 0xF1	; 241
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>
     bdc:	88 23       	and	r24, r24
     bde:	e9 f0       	breq	.+58     	; 0xc1a <Endpoint_Read_Control_Stream_LE+0xc0>
     be0:	85 30       	cpi	r24, 0x05	; 5
     be2:	e9 f0       	breq	.+58     	; 0xc1e <Endpoint_Read_Control_Stream_LE+0xc4>
     be4:	80 81       	ld	r24, Z
     be6:	83 fd       	sbrc	r24, 3
     be8:	1c c0       	rjmp	.+56     	; 0xc22 <Endpoint_Read_Control_Stream_LE+0xc8>
     bea:	80 81       	ld	r24, Z
     bec:	82 fd       	sbrc	r24, 2
     bee:	1f c0       	rjmp	.+62     	; 0xc2e <Endpoint_Read_Control_Stream_LE+0xd4>
     bf0:	c2 cf       	rjmp	.-124    	; 0xb76 <Endpoint_Read_Control_Stream_LE+0x1c>
     bf2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>
     bf6:	88 23       	and	r24, r24
     bf8:	b1 f0       	breq	.+44     	; 0xc26 <Endpoint_Read_Control_Stream_LE+0xcc>
     bfa:	85 30       	cpi	r24, 0x05	; 5
     bfc:	19 f4       	brne	.+6      	; 0xc04 <Endpoint_Read_Control_Stream_LE+0xaa>
     bfe:	15 c0       	rjmp	.+42     	; 0xc2a <Endpoint_Read_Control_Stream_LE+0xd0>
     c00:	e8 ee       	ldi	r30, 0xE8	; 232
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	80 ff       	sbrs	r24, 0
     c08:	f4 cf       	rjmp	.-24     	; 0xbf2 <Endpoint_Read_Control_Stream_LE+0x98>
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	1a c0       	rjmp	.+52     	; 0xc42 <Endpoint_Read_Control_Stream_LE+0xe8>
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	18 c0       	rjmp	.+48     	; 0xc42 <Endpoint_Read_Control_Stream_LE+0xe8>
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	16 c0       	rjmp	.+44     	; 0xc42 <Endpoint_Read_Control_Stream_LE+0xe8>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	14 c0       	rjmp	.+40     	; 0xc42 <Endpoint_Read_Control_Stream_LE+0xe8>
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	12 c0       	rjmp	.+36     	; 0xc42 <Endpoint_Read_Control_Stream_LE+0xe8>
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	10 c0       	rjmp	.+32     	; 0xc42 <Endpoint_Read_Control_Stream_LE+0xe8>
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	0e c0       	rjmp	.+28     	; 0xc42 <Endpoint_Read_Control_Stream_LE+0xe8>
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	0c c0       	rjmp	.+24     	; 0xc42 <Endpoint_Read_Control_Stream_LE+0xe8>
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	0a c0       	rjmp	.+20     	; 0xc42 <Endpoint_Read_Control_Stream_LE+0xe8>
     c2e:	e9 01       	movw	r28, r18
     c30:	18 81       	ld	r17, Y
     c32:	e7 01       	movw	r28, r14
     c34:	88 81       	ld	r24, Y
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	91 2b       	or	r25, r17
     c3a:	89 2b       	or	r24, r25
     c3c:	09 f0       	breq	.+2      	; 0xc40 <Endpoint_Read_Control_Stream_LE+0xe6>
     c3e:	aa cf       	rjmp	.-172    	; 0xb94 <Endpoint_Read_Control_Stream_LE+0x3a>
     c40:	b7 cf       	rjmp	.-146    	; 0xbb0 <Endpoint_Read_Control_Stream_LE+0x56>
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     c4e:	cf 92       	push	r12
     c50:	df 92       	push	r13
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     c5c:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <USB_ControlRequest+0x6>
     c60:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <USB_ControlRequest+0x7>
     c64:	26 17       	cp	r18, r22
     c66:	37 07       	cpc	r19, r23
     c68:	58 f0       	brcs	.+22     	; 0xc80 <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     c6a:	61 15       	cp	r22, r1
     c6c:	71 05       	cpc	r23, r1
     c6e:	39 f4       	brne	.+14     	; 0xc7e <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c70:	e8 ee       	ldi	r30, 0xE8	; 232
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	20 81       	ld	r18, Z
     c76:	2e 77       	andi	r18, 0x7E	; 126
     c78:	20 83       	st	Z, r18
     c7a:	9b 01       	movw	r18, r22
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <Endpoint_Write_Control_PStream_LE+0x32>
     c7e:	9b 01       	movw	r18, r22
     c80:	e8 2f       	mov	r30, r24
     c82:	f9 2f       	mov	r31, r25
     c84:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c86:	a8 ee       	ldi	r26, 0xE8	; 232
     c88:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     c8a:	63 ef       	ldi	r22, 0xF3	; 243
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	42 ef       	ldi	r20, 0xF2	; 242
     c90:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c92:	0f 2e       	mov	r0, r31
     c94:	f1 ef       	ldi	r31, 0xF1	; 241
     c96:	cf 2e       	mov	r12, r31
     c98:	d1 2c       	mov	r13, r1
     c9a:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     c9c:	01 e0       	ldi	r16, 0x01	; 1
     c9e:	f1 2c       	mov	r15, r1
     ca0:	31 c0       	rjmp	.+98     	; 0xd04 <Endpoint_Write_Control_PStream_LE+0xb6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ca2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ca6:	88 23       	and	r24, r24
     ca8:	09 f4       	brne	.+2      	; 0xcac <Endpoint_Write_Control_PStream_LE+0x5e>
     caa:	43 c0       	rjmp	.+134    	; 0xd32 <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     cac:	85 30       	cpi	r24, 0x05	; 5
     cae:	09 f4       	brne	.+2      	; 0xcb2 <Endpoint_Write_Control_PStream_LE+0x64>
     cb0:	42 c0       	rjmp	.+132    	; 0xd36 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cb2:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     cb4:	83 fd       	sbrc	r24, 3
     cb6:	41 c0       	rjmp	.+130    	; 0xd3a <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cb8:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     cba:	82 fd       	sbrc	r24, 2
     cbc:	33 c0       	rjmp	.+102    	; 0xd24 <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cbe:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     cc0:	80 ff       	sbrs	r24, 0
     cc2:	20 c0       	rjmp	.+64     	; 0xd04 <Endpoint_Write_Control_PStream_LE+0xb6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     cc4:	eb 01       	movw	r28, r22
     cc6:	18 81       	ld	r17, Y
     cc8:	ea 01       	movw	r28, r20
     cca:	88 81       	ld	r24, Y
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     cd0:	21 15       	cp	r18, r1
     cd2:	31 05       	cpc	r19, r1
     cd4:	81 f0       	breq	.+32     	; 0xcf6 <Endpoint_Write_Control_PStream_LE+0xa8>
     cd6:	88 30       	cpi	r24, 0x08	; 8
     cd8:	91 05       	cpc	r25, r1
     cda:	68 f4       	brcc	.+26     	; 0xcf6 <Endpoint_Write_Control_PStream_LE+0xa8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     cdc:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cde:	e6 01       	movw	r28, r12
     ce0:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ce2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     ce4:	21 50       	subi	r18, 0x01	; 1
     ce6:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     ce8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     cea:	21 15       	cp	r18, r1
     cec:	31 05       	cpc	r19, r1
     cee:	19 f0       	breq	.+6      	; 0xcf6 <Endpoint_Write_Control_PStream_LE+0xa8>
     cf0:	88 30       	cpi	r24, 0x08	; 8
     cf2:	91 05       	cpc	r25, r1
     cf4:	99 f7       	brne	.-26     	; 0xcdc <Endpoint_Write_Control_PStream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     cf6:	10 2f       	mov	r17, r16
     cf8:	08 97       	sbiw	r24, 0x08	; 8
     cfa:	09 f0       	breq	.+2      	; 0xcfe <Endpoint_Write_Control_PStream_LE+0xb0>
     cfc:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cfe:	8c 91       	ld	r24, X
     d00:	8e 77       	andi	r24, 0x7E	; 126
     d02:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     d04:	21 15       	cp	r18, r1
     d06:	31 05       	cpc	r19, r1
     d08:	61 f6       	brne	.-104    	; 0xca2 <Endpoint_Write_Control_PStream_LE+0x54>
     d0a:	11 11       	cpse	r17, r1
     d0c:	ca cf       	rjmp	.-108    	; 0xca2 <Endpoint_Write_Control_PStream_LE+0x54>
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <Endpoint_Write_Control_PStream_LE+0xd6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d10:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d14:	88 23       	and	r24, r24
     d16:	99 f0       	breq	.+38     	; 0xd3e <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d18:	85 30       	cpi	r24, 0x05	; 5
     d1a:	99 f0       	breq	.+38     	; 0xd42 <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d1c:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     d1e:	83 ff       	sbrs	r24, 3
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <Endpoint_Write_Control_PStream_LE+0xda>
     d22:	11 c0       	rjmp	.+34     	; 0xd46 <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d24:	e8 ee       	ldi	r30, 0xE8	; 232
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     d2a:	82 ff       	sbrs	r24, 2
     d2c:	f1 cf       	rjmp	.-30     	; 0xd10 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0b c0       	rjmp	.+22     	; 0xd48 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	09 c0       	rjmp	.+18     	; 0xd48 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	07 c0       	rjmp	.+14     	; 0xd48 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     d42:	83 e0       	ldi	r24, 0x03	; 3
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     d46:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	df 90       	pop	r13
     d54:	cf 90       	pop	r12
     d56:	08 95       	ret

00000d58 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     d58:	8f 92       	push	r8
     d5a:	9f 92       	push	r9
     d5c:	bf 92       	push	r11
     d5e:	cf 92       	push	r12
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	87 30       	cpi	r24, 0x07	; 7
     d70:	70 f1       	brcs	.+92     	; 0xdce <Endpoint_ConfigureEndpoint_Prv+0x76>
     d72:	26 c0       	rjmp	.+76     	; 0xdc0 <Endpoint_ConfigureEndpoint_Prv+0x68>
     d74:	29 2f       	mov	r18, r25
     d76:	2f 70       	andi	r18, 0x0F	; 15
     d78:	e7 01       	movw	r28, r14
     d7a:	28 83       	st	Y, r18
     d7c:	89 17       	cp	r24, r25
     d7e:	31 f0       	breq	.+12     	; 0xd8c <Endpoint_ConfigureEndpoint_Prv+0x34>
     d80:	e8 01       	movw	r28, r16
     d82:	78 81       	ld	r23, Y
     d84:	20 81       	ld	r18, Z
     d86:	e4 01       	movw	r28, r8
     d88:	58 81       	ld	r21, Y
     d8a:	03 c0       	rjmp	.+6      	; 0xd92 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     d8c:	24 2f       	mov	r18, r20
     d8e:	76 2f       	mov	r23, r22
     d90:	5b 2d       	mov	r21, r11
     d92:	21 ff       	sbrs	r18, 1
     d94:	12 c0       	rjmp	.+36     	; 0xdba <Endpoint_ConfigureEndpoint_Prv+0x62>
     d96:	3c 91       	ld	r19, X
     d98:	3e 7f       	andi	r19, 0xFE	; 254
     d9a:	3c 93       	st	X, r19
     d9c:	30 81       	ld	r19, Z
     d9e:	3d 7f       	andi	r19, 0xFD	; 253
     da0:	30 83       	st	Z, r19
     da2:	3c 91       	ld	r19, X
     da4:	31 60       	ori	r19, 0x01	; 1
     da6:	3c 93       	st	X, r19
     da8:	e8 01       	movw	r28, r16
     daa:	78 83       	st	Y, r23
     dac:	20 83       	st	Z, r18
     dae:	e4 01       	movw	r28, r8
     db0:	58 83       	st	Y, r21
     db2:	e6 01       	movw	r28, r12
     db4:	28 81       	ld	r18, Y
     db6:	22 23       	and	r18, r18
     db8:	44 f4       	brge	.+16     	; 0xdca <Endpoint_ConfigureEndpoint_Prv+0x72>
     dba:	9f 5f       	subi	r25, 0xFF	; 255
     dbc:	97 30       	cpi	r25, 0x07	; 7
     dbe:	d1 f6       	brne	.-76     	; 0xd74 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     dc0:	8f 70       	andi	r24, 0x0F	; 15
     dc2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	21 c0       	rjmp	.+66     	; 0xe0c <Endpoint_ConfigureEndpoint_Prv+0xb4>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	1f c0       	rjmp	.+62     	; 0xe0c <Endpoint_ConfigureEndpoint_Prv+0xb4>
     dce:	98 2f       	mov	r25, r24
     dd0:	9f 70       	andi	r25, 0x0F	; 15
     dd2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     dd6:	98 2f       	mov	r25, r24
     dd8:	24 2f       	mov	r18, r20
     dda:	76 2f       	mov	r23, r22
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	ab ee       	ldi	r26, 0xEB	; 235
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ed ee       	ldi	r30, 0xED	; 237
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	0c ee       	ldi	r16, 0xEC	; 236
     de8:	10 e0       	ldi	r17, 0x00	; 0
     dea:	0f 2e       	mov	r0, r31
     dec:	f0 ef       	ldi	r31, 0xF0	; 240
     dee:	8f 2e       	mov	r8, r31
     df0:	91 2c       	mov	r9, r1
     df2:	f0 2d       	mov	r31, r0
     df4:	0f 2e       	mov	r0, r31
     df6:	fe ee       	ldi	r31, 0xEE	; 238
     df8:	cf 2e       	mov	r12, r31
     dfa:	d1 2c       	mov	r13, r1
     dfc:	f0 2d       	mov	r31, r0
     dfe:	0f 2e       	mov	r0, r31
     e00:	f9 ee       	ldi	r31, 0xE9	; 233
     e02:	ef 2e       	mov	r14, r31
     e04:	f1 2c       	mov	r15, r1
     e06:	f0 2d       	mov	r31, r0
     e08:	b1 2c       	mov	r11, r1
     e0a:	c3 cf       	rjmp	.-122    	; 0xd92 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	9f 90       	pop	r9
     e20:	8f 90       	pop	r8
     e22:	08 95       	ret

00000e24 <Endpoint_ConfigureEndpointTable>:
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	66 23       	and	r22, r22
     e32:	e9 f1       	breq	.+122    	; 0xeae <Endpoint_ConfigureEndpointTable+0x8a>
     e34:	06 2f       	mov	r16, r22
     e36:	c8 2f       	mov	r28, r24
     e38:	d9 2f       	mov	r29, r25
     e3a:	10 e0       	ldi	r17, 0x00	; 0
     e3c:	0f 2e       	mov	r0, r31
     e3e:	f6 e0       	ldi	r31, 0x06	; 6
     e40:	ff 2e       	mov	r15, r31
     e42:	f0 2d       	mov	r31, r0
     e44:	68 94       	set
     e46:	ee 24       	eor	r14, r14
     e48:	e1 f8       	bld	r14, 1
     e4a:	58 81       	ld	r21, Y
     e4c:	55 23       	and	r21, r21
     e4e:	49 f1       	breq	.+82     	; 0xea2 <Endpoint_ConfigureEndpointTable+0x7e>
     e50:	9c 81       	ldd	r25, Y+4	; 0x04
     e52:	e9 81       	ldd	r30, Y+1	; 0x01
     e54:	fa 81       	ldd	r31, Y+2	; 0x02
     e56:	6b 81       	ldd	r22, Y+3	; 0x03
     e58:	85 2f       	mov	r24, r21
     e5a:	8f 70       	andi	r24, 0x0F	; 15
     e5c:	87 30       	cpi	r24, 0x07	; 7
     e5e:	48 f5       	brcc	.+82     	; 0xeb2 <Endpoint_ConfigureEndpointTable+0x8e>
     e60:	92 30       	cpi	r25, 0x02	; 2
     e62:	10 f4       	brcc	.+4      	; 0xe68 <Endpoint_ConfigureEndpointTable+0x44>
     e64:	4e 2d       	mov	r20, r14
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <Endpoint_ConfigureEndpointTable+0x46>
     e68:	4f 2d       	mov	r20, r15
     e6a:	e9 30       	cpi	r30, 0x09	; 9
     e6c:	f1 05       	cpc	r31, r1
     e6e:	50 f0       	brcs	.+20     	; 0xe84 <Endpoint_ConfigureEndpointTable+0x60>
     e70:	28 e0       	ldi	r18, 0x08	; 8
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9f 5f       	subi	r25, 0xFF	; 255
     e78:	22 0f       	add	r18, r18
     e7a:	33 1f       	adc	r19, r19
     e7c:	2e 17       	cp	r18, r30
     e7e:	3f 07       	cpc	r19, r31
     e80:	d0 f3       	brcs	.-12     	; 0xe76 <Endpoint_ConfigureEndpointTable+0x52>
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <Endpoint_ConfigureEndpointTable+0x62>
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	92 95       	swap	r25
     e88:	90 7f       	andi	r25, 0xF0	; 240
     e8a:	49 2b       	or	r20, r25
     e8c:	90 e4       	ldi	r25, 0x40	; 64
     e8e:	69 9f       	mul	r22, r25
     e90:	b0 01       	movw	r22, r0
     e92:	11 24       	eor	r1, r1
     e94:	55 1f       	adc	r21, r21
     e96:	55 27       	eor	r21, r21
     e98:	55 1f       	adc	r21, r21
     e9a:	65 2b       	or	r22, r21
     e9c:	5d df       	rcall	.-326    	; 0xd58 <Endpoint_ConfigureEndpoint_Prv>
     e9e:	88 23       	and	r24, r24
     ea0:	49 f0       	breq	.+18     	; 0xeb4 <Endpoint_ConfigureEndpointTable+0x90>
     ea2:	1f 5f       	subi	r17, 0xFF	; 255
     ea4:	25 96       	adiw	r28, 0x05	; 5
     ea6:	01 13       	cpse	r16, r17
     ea8:	d0 cf       	rjmp	.-96     	; 0xe4a <Endpoint_ConfigureEndpointTable+0x26>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <Endpoint_ConfigureEndpointTable+0x90>
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <Endpoint_ConfigureEndpointTable+0x90>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	08 95       	ret

00000ec2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ec2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest>
     ec6:	88 23       	and	r24, r24
     ec8:	44 f0       	brlt	.+16     	; 0xeda <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eca:	e8 ee       	ldi	r30, 0xE8	; 232
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	14 c0       	rjmp	.+40     	; 0xef8 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ed0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>
     ed4:	81 11       	cpse	r24, r1
     ed6:	03 c0       	rjmp	.+6      	; 0xede <Endpoint_ClearStatusStage+0x1c>
     ed8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     eda:	e8 ee       	ldi	r30, 0xE8	; 232
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     ee0:	82 ff       	sbrs	r24, 2
     ee2:	f6 cf       	rjmp	.-20     	; 0xed0 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ee4:	e8 ee       	ldi	r30, 0xE8	; 232
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8b 77       	andi	r24, 0x7B	; 123
     eec:	80 83       	st	Z, r24
     eee:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ef0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>
     ef4:	88 23       	and	r24, r24
     ef6:	41 f0       	breq	.+16     	; 0xf08 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ef8:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     efa:	80 ff       	sbrs	r24, 0
     efc:	f9 cf       	rjmp	.-14     	; 0xef0 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     efe:	e8 ee       	ldi	r30, 0xE8	; 232
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8e 77       	andi	r24, 0x7E	; 126
     f06:	80 83       	st	Z, r24
     f08:	08 95       	ret

00000f0a <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     f12:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     f16:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
     f1a:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f1c:	ac ee       	ldi	r26, 0xEC	; 236
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f20:	e8 ee       	ldi	r30, 0xE8	; 232
     f22:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f24:	0b ee       	ldi	r16, 0xEB	; 235
     f26:	10 e0       	ldi	r17, 0x00	; 0
     f28:	44 ee       	ldi	r20, 0xE4	; 228
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <Endpoint_WaitUntilReady+0x26>
     f2e:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f30:	9c 91       	ld	r25, X
     f32:	89 2f       	mov	r24, r25
     f34:	81 70       	andi	r24, 0x01	; 1
     f36:	90 fd       	sbrc	r25, 0
     f38:	1d c0       	rjmp	.+58     	; 0xf74 <Endpoint_WaitUntilReady+0x6a>
     f3a:	20 c0       	rjmp	.+64     	; 0xf7c <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f3c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f40:	88 23       	and	r24, r24
     f42:	81 f0       	breq	.+32     	; 0xf64 <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f44:	85 30       	cpi	r24, 0x05	; 5
     f46:	81 f0       	breq	.+32     	; 0xf68 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f48:	e8 01       	movw	r28, r16
     f4a:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     f4c:	85 fd       	sbrc	r24, 5
     f4e:	0e c0       	rjmp	.+28     	; 0xf6c <Endpoint_WaitUntilReady+0x62>
     f50:	ea 01       	movw	r28, r20
     f52:	88 81       	ld	r24, Y
     f54:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     f56:	28 17       	cp	r18, r24
     f58:	39 07       	cpc	r19, r25
     f5a:	51 f3       	breq	.-44     	; 0xf30 <Endpoint_WaitUntilReady+0x26>
     f5c:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     f5e:	39 f7       	brne	.-50     	; 0xf2e <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
     f60:	84 e0       	ldi	r24, 0x04	; 4
     f62:	0f c0       	rjmp	.+30     	; 0xf82 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	0d c0       	rjmp	.+26     	; 0xf82 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	0b c0       	rjmp	.+22     	; 0xf82 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	07 c0       	rjmp	.+14     	; 0xf82 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f74:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     f76:	80 ff       	sbrs	r24, 0
     f78:	e1 cf       	rjmp	.-62     	; 0xf3c <Endpoint_WaitUntilReady+0x32>
     f7a:	fa cf       	rjmp	.-12     	; 0xf70 <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f7c:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     f7e:	92 ff       	sbrs	r25, 2
     f80:	dd cf       	rjmp	.-70     	; 0xf3c <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	08 95       	ret

00000f8c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     f94:	4c d0       	rcall	.+152    	; 0x102e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f96:	53 d0       	rcall	.+166    	; 0x103e <USB_INT_ClearAllInterrupts>
     f98:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     f9a:	d0 e0       	ldi	r29, 0x00	; 0
     f9c:	88 81       	ld	r24, Y
     f9e:	8f 77       	andi	r24, 0x7F	; 127
     fa0:	88 83       	st	Y, r24
     fa2:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     fa4:	80 68       	ori	r24, 0x80	; 128
     fa6:	88 83       	st	Y, r24
     fa8:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     faa:	8f 7d       	andi	r24, 0xDF	; 223
     fac:	88 83       	st	Y, r24
     fae:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     fb0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     fb4:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     fb8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     fbc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     fc0:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	f8 01       	movw	r30, r16
     fc6:	80 81       	ld	r24, Z
     fc8:	8b 7f       	andi	r24, 0xFB	; 251
     fca:	80 83       	st	Z, r24
     fcc:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	88 83       	st	Y, r24
     fd2:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	bf de       	rcall	.-642    	; 0xd58 <Endpoint_ConfigureEndpoint_Prv>
     fda:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8e 7f       	andi	r24, 0xFE	; 254
     fe2:	80 83       	st	Z, r24
     fe4:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	81 60       	ori	r24, 0x01	; 1
     fec:	80 83       	st	Z, r24
     fee:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	80 83       	st	Z, r24
     ff4:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ff6:	80 81       	ld	r24, Z
     ff8:	8e 7f       	andi	r24, 0xFE	; 254
     ffa:	80 83       	st	Z, r24
     ffc:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     ffe:	80 61       	ori	r24, 0x10	; 16
    1000:	88 83       	st	Y, r24
    1002:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	08 95       	ret

0000100c <USB_Init>:
    100c:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8f 7e       	andi	r24, 0xEF	; 239
    1014:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1016:	e7 ed       	ldi	r30, 0xD7	; 215
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	81 60       	ori	r24, 0x01	; 1
    101e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1020:	84 e0       	ldi	r24, 0x04	; 4
    1022:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <USB_IsInitialized>

	USB_ResetInterface();
    102a:	b0 cf       	rjmp	.-160    	; 0xf8c <USB_ResetInterface>
    102c:	08 95       	ret

0000102e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    102e:	e8 ed       	ldi	r30, 0xD8	; 216
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8e 7f       	andi	r24, 0xFE	; 254
    1036:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1038:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    103c:	08 95       	ret

0000103e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    103e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1042:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1046:	08 95       	ret

00001048 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1048:	1f 92       	push	r1
    104a:	0f 92       	push	r0
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	0f 92       	push	r0
    1050:	11 24       	eor	r1, r1
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	5f 93       	push	r21
    105a:	6f 93       	push	r22
    105c:	7f 93       	push	r23
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	af 93       	push	r26
    1064:	bf 93       	push	r27
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    106a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    106e:	82 ff       	sbrs	r24, 2
    1070:	0a c0       	rjmp	.+20     	; 0x1086 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1072:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1076:	82 ff       	sbrs	r24, 2
    1078:	06 c0       	rjmp	.+12     	; 0x1086 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    107a:	e1 ee       	ldi	r30, 0xE1	; 225
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8b 7f       	andi	r24, 0xFB	; 251
    1082:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1084:	61 d9       	rcall	.-3390   	; 0x348 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1086:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    108a:	80 ff       	sbrs	r24, 0
    108c:	1d c0       	rjmp	.+58     	; 0x10c8 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    108e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    1092:	80 ff       	sbrs	r24, 0
    1094:	19 c0       	rjmp	.+50     	; 0x10c8 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1096:	ea ed       	ldi	r30, 0xDA	; 218
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8e 7f       	andi	r24, 0xFE	; 254
    109e:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    10a0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    10a4:	80 ff       	sbrs	r24, 0
    10a6:	0c c0       	rjmp	.+24     	; 0x10c0 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    10a8:	80 e1       	ldi	r24, 0x10	; 16
    10aa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    10ac:	82 e1       	ldi	r24, 0x12	; 18
    10ae:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    10b0:	09 b4       	in	r0, 0x29	; 41
    10b2:	00 fe       	sbrs	r0, 0
    10b4:	fd cf       	rjmp	.-6      	; 0x10b0 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    10bc:	36 d9       	rcall	.-3476   	; 0x32a <EVENT_USB_Device_Connect>
    10be:	04 c0       	rjmp	.+8      	; 0x10c8 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    10c0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    10c2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    10c6:	32 d9       	rcall	.-3484   	; 0x32c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    10c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    10cc:	80 ff       	sbrs	r24, 0
    10ce:	16 c0       	rjmp	.+44     	; 0x10fc <__vector_10+0xb4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    10d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    10d4:	80 ff       	sbrs	r24, 0
    10d6:	12 c0       	rjmp	.+36     	; 0x10fc <__vector_10+0xb4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    10d8:	e2 ee       	ldi	r30, 0xE2	; 226
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8e 7f       	andi	r24, 0xFE	; 254
    10e0:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    10e2:	80 81       	ld	r24, Z
    10e4:	80 61       	ori	r24, 0x10	; 16
    10e6:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    10e8:	e8 ed       	ldi	r30, 0xD8	; 216
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	80 62       	ori	r24, 0x20	; 32
    10f0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    10f2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    10f4:	85 e0       	ldi	r24, 0x05	; 5
    10f6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    10fa:	e0 d1       	rcall	.+960    	; 0x14bc <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    10fc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1100:	84 ff       	sbrs	r24, 4
    1102:	2f c0       	rjmp	.+94     	; 0x1162 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1104:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1108:	84 ff       	sbrs	r24, 4
    110a:	2b c0       	rjmp	.+86     	; 0x1162 <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    110c:	80 e1       	ldi	r24, 0x10	; 16
    110e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1110:	82 e1       	ldi	r24, 0x12	; 18
    1112:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1114:	09 b4       	in	r0, 0x29	; 41
    1116:	00 fe       	sbrs	r0, 0
    1118:	fd cf       	rjmp	.-6      	; 0x1114 <__vector_10+0xcc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    111a:	e8 ed       	ldi	r30, 0xD8	; 216
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8f 7d       	andi	r24, 0xDF	; 223
    1122:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1124:	e1 ee       	ldi	r30, 0xE1	; 225
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8f 7e       	andi	r24, 0xEF	; 239
    112c:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    112e:	e2 ee       	ldi	r30, 0xE2	; 226
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8f 7e       	andi	r24, 0xEF	; 239
    1136:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1138:	80 81       	ld	r24, Z
    113a:	81 60       	ori	r24, 0x01	; 1
    113c:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    113e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_Device_ConfigurationNumber>
    1142:	88 23       	and	r24, r24
    1144:	21 f0       	breq	.+8      	; 0x114e <__vector_10+0x106>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_DeviceState>
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    114e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1152:	88 23       	and	r24, r24
    1154:	14 f0       	brlt	.+4      	; 0x115a <__vector_10+0x112>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	01 c0       	rjmp	.+2      	; 0x115c <__vector_10+0x114>
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1160:	ad d1       	rcall	.+858    	; 0x14bc <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1162:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1166:	83 ff       	sbrs	r24, 3
    1168:	1e c0       	rjmp	.+60     	; 0x11a6 <__vector_10+0x15e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    116a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    116e:	83 ff       	sbrs	r24, 3
    1170:	1a c0       	rjmp	.+52     	; 0x11a6 <__vector_10+0x15e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1172:	e1 ee       	ldi	r30, 0xE1	; 225
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	87 7f       	andi	r24, 0xF7	; 247
    117a:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1182:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1186:	80 81       	ld	r24, Z
    1188:	8e 7f       	andi	r24, 0xFE	; 254
    118a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    118c:	e2 ee       	ldi	r30, 0xE2	; 226
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8e 7f       	andi	r24, 0xFE	; 254
    1194:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1196:	80 81       	ld	r24, Z
    1198:	80 61       	ori	r24, 0x10	; 16
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    119a:	80 83       	st	Z, r24
    119c:	42 e0       	ldi	r20, 0x02	; 2
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	da dd       	rcall	.-1100   	; 0xd58 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    11a4:	8b d1       	rcall	.+790    	; 0x14bc <USB_Event_Stub>
    11a6:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    11a8:	ef 91       	pop	r30
    11aa:	bf 91       	pop	r27
    11ac:	af 91       	pop	r26
    11ae:	9f 91       	pop	r25
    11b0:	8f 91       	pop	r24
    11b2:	7f 91       	pop	r23
    11b4:	6f 91       	pop	r22
    11b6:	5f 91       	pop	r21
    11b8:	4f 91       	pop	r20
    11ba:	3f 91       	pop	r19
    11bc:	2f 91       	pop	r18
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

000011c8 <USB_Device_ProcessControlRequest>:
    11c8:	0f 93       	push	r16
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	aa 97       	sbiw	r28, 0x2a	; 42
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	e5 e2       	ldi	r30, 0x25	; 37
    11e2:	f1 e0       	ldi	r31, 0x01	; 1
    11e4:	2d e2       	ldi	r18, 0x2D	; 45
    11e6:	31 e0       	ldi	r19, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    11e8:	a1 ef       	ldi	r26, 0xF1	; 241
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    11ee:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    11f0:	2e 17       	cp	r18, r30
    11f2:	3f 07       	cpc	r19, r31
    11f4:	d9 f7       	brne	.-10     	; 0x11ec <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    11f6:	a4 d8       	rcall	.-3768   	; 0x340 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	if (Endpoint_IsSETUPReceived())
    11fc:	83 ff       	sbrs	r24, 3
    11fe:	39 c1       	rjmp	.+626    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1200:	e5 e2       	ldi	r30, 0x25	; 37
    1202:	f1 e0       	ldi	r31, 0x01	; 1
    1204:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    1206:	81 81       	ldd	r24, Z+1	; 0x01
    1208:	85 30       	cpi	r24, 0x05	; 5
    120a:	09 f4       	brne	.+2      	; 0x120e <USB_Device_ProcessControlRequest+0x46>
    120c:	7f c0       	rjmp	.+254    	; 0x130c <USB_Device_ProcessControlRequest+0x144>
    120e:	30 f4       	brcc	.+12     	; 0x121c <USB_Device_ProcessControlRequest+0x54>
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	c9 f1       	breq	.+114    	; 0x1286 <USB_Device_ProcessControlRequest+0xbe>
    1214:	68 f0       	brcs	.+26     	; 0x1230 <USB_Device_ProcessControlRequest+0x68>
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	b1 f1       	breq	.+108    	; 0x1286 <USB_Device_ProcessControlRequest+0xbe>
    121a:	2b c1       	rjmp	.+598    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
    121c:	88 30       	cpi	r24, 0x08	; 8
    121e:	09 f4       	brne	.+2      	; 0x1222 <USB_Device_ProcessControlRequest+0x5a>
    1220:	f2 c0       	rjmp	.+484    	; 0x1406 <USB_Device_ProcessControlRequest+0x23e>
    1222:	89 30       	cpi	r24, 0x09	; 9
    1224:	09 f4       	brne	.+2      	; 0x1228 <USB_Device_ProcessControlRequest+0x60>
    1226:	ff c0       	rjmp	.+510    	; 0x1426 <USB_Device_ProcessControlRequest+0x25e>
    1228:	86 30       	cpi	r24, 0x06	; 6
    122a:	09 f0       	breq	.+2      	; 0x122e <USB_Device_ProcessControlRequest+0x66>
    122c:	22 c1       	rjmp	.+580    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
    122e:	91 c0       	rjmp	.+290    	; 0x1352 <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1230:	90 38       	cpi	r25, 0x80	; 128
    1232:	21 f0       	breq	.+8      	; 0x123c <USB_Device_ProcessControlRequest+0x74>
    1234:	92 38       	cpi	r25, 0x82	; 130
    1236:	09 f0       	breq	.+2      	; 0x123a <USB_Device_ProcessControlRequest+0x72>
    1238:	1c c1       	rjmp	.+568    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
    123a:	08 c0       	rjmp	.+16     	; 0x124c <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    123c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1240:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <USB_Device_RemoteWakeupEnabled>
    1244:	99 23       	and	r25, r25
    1246:	89 f0       	breq	.+34     	; 0x126a <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1248:	82 60       	ori	r24, 0x02	; 2
    124a:	0f c0       	rjmp	.+30     	; 0x126a <USB_Device_ProcessControlRequest+0xa2>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    124c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_ControlRequest+0x4>
    1250:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1252:	87 30       	cpi	r24, 0x07	; 7
    1254:	08 f0       	brcs	.+2      	; 0x1258 <USB_Device_ProcessControlRequest+0x90>
    1256:	0d c1       	rjmp	.+538    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1258:	e9 ee       	ldi	r30, 0xE9	; 233
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    125e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1262:	85 fb       	bst	r24, 5
    1264:	88 27       	eor	r24, r24
    1266:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1268:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    126a:	e8 ee       	ldi	r30, 0xE8	; 232
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	90 81       	ld	r25, Z
    1270:	97 7f       	andi	r25, 0xF7	; 247
    1272:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1274:	a1 ef       	ldi	r26, 0xF1	; 241
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    127a:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    127c:	80 81       	ld	r24, Z
    127e:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1280:	80 83       	st	Z, r24
    1282:	1f de       	rcall	.-962    	; 0xec2 <Endpoint_ClearStatusStage>
    1284:	f6 c0       	rjmp	.+492    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1286:	99 23       	and	r25, r25
    1288:	09 f4       	brne	.+2      	; 0x128c <USB_Device_ProcessControlRequest+0xc4>
    128a:	02 c1       	rjmp	.+516    	; 0x1490 <USB_Device_ProcessControlRequest+0x2c8>
    128c:	92 30       	cpi	r25, 0x02	; 2
    128e:	09 f0       	breq	.+2      	; 0x1292 <USB_Device_ProcessControlRequest+0xca>
    1290:	f0 c0       	rjmp	.+480    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
    1292:	03 c1       	rjmp	.+518    	; 0x149a <USB_Device_ProcessControlRequest+0x2d2>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	09 f0       	breq	.+2      	; 0x129c <USB_Device_ProcessControlRequest+0xd4>
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <USB_Device_RemoteWakeupEnabled>
    12a0:	2c c0       	rjmp	.+88     	; 0x12fa <USB_Device_ProcessControlRequest+0x132>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    12a2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <USB_ControlRequest+0x4>
    12a6:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    12a8:	9f ef       	ldi	r25, 0xFF	; 255
    12aa:	98 0f       	add	r25, r24
    12ac:	96 30       	cpi	r25, 0x06	; 6
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <USB_Device_ProcessControlRequest+0xea>
    12b0:	e0 c0       	rjmp	.+448    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    12b6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    12ba:	90 ff       	sbrs	r25, 0
    12bc:	1e c0       	rjmp	.+60     	; 0x12fa <USB_Device_ProcessControlRequest+0x132>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    12be:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <USB_ControlRequest+0x1>
    12c2:	93 30       	cpi	r25, 0x03	; 3
    12c4:	31 f4       	brne	.+12     	; 0x12d2 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    12c6:	eb ee       	ldi	r30, 0xEB	; 235
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 62       	ori	r24, 0x20	; 32
    12ce:	80 83       	st	Z, r24
    12d0:	14 c0       	rjmp	.+40     	; 0x12fa <USB_Device_ProcessControlRequest+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    12d2:	eb ee       	ldi	r30, 0xEB	; 235
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	90 81       	ld	r25, Z
    12d8:	90 61       	ori	r25, 0x10	; 16
    12da:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <USB_Device_ProcessControlRequest+0x120>
    12e4:	44 0f       	add	r20, r20
    12e6:	55 1f       	adc	r21, r21
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <USB_Device_ProcessControlRequest+0x11c>
    12ec:	aa ee       	ldi	r26, 0xEA	; 234
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	4c 93       	st	X, r20
				UERST = 0;
    12f2:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    12f4:	80 81       	ld	r24, Z
    12f6:	88 60       	ori	r24, 0x08	; 8
    12f8:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12fa:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12fe:	e8 ee       	ldi	r30, 0xE8	; 232
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1306:	80 83       	st	Z, r24
    1308:	dc dd       	rcall	.-1096   	; 0xec2 <Endpoint_ClearStatusStage>
    130a:	b3 c0       	rjmp	.+358    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    130c:	91 11       	cpse	r25, r1
    130e:	b1 c0       	rjmp	.+354    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1310:	10 91 27 01 	lds	r17, 0x0127	; 0x800127 <USB_ControlRequest+0x2>
    1314:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1316:	e3 ee       	ldi	r30, 0xE3	; 227
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	80 78       	andi	r24, 0x80	; 128
    131e:	81 2b       	or	r24, r17
    1320:	80 83       	st	Z, r24
    1322:	e8 ee       	ldi	r30, 0xE8	; 232
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    132a:	80 83       	st	Z, r24
    132c:	ca dd       	rcall	.-1132   	; 0xec2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    132e:	e8 ee       	ldi	r30, 0xE8	; 232
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    1334:	80 ff       	sbrs	r24, 0
    1336:	fd cf       	rjmp	.-6      	; 0x1332 <USB_Device_ProcessControlRequest+0x16a>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1338:	e3 ee       	ldi	r30, 0xE3	; 227
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	80 68       	ori	r24, 0x80	; 128
    1340:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1342:	11 11       	cpse	r17, r1
    1344:	02 c0       	rjmp	.+4      	; 0x134a <USB_Device_ProcessControlRequest+0x182>
    1346:	82 e0       	ldi	r24, 0x02	; 2
    1348:	01 c0       	rjmp	.+2      	; 0x134c <USB_Device_ProcessControlRequest+0x184>
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_DeviceState>
    1350:	90 c0       	rjmp	.+288    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1352:	90 58       	subi	r25, 0x80	; 128
    1354:	92 30       	cpi	r25, 0x02	; 2
    1356:	08 f0       	brcs	.+2      	; 0x135a <USB_Device_ProcessControlRequest+0x192>
    1358:	8c c0       	rjmp	.+280    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    135a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <USB_ControlRequest+0x2>
    135e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <USB_ControlRequest+0x3>
    1362:	8c 3d       	cpi	r24, 0xDC	; 220
    1364:	53 e0       	ldi	r21, 0x03	; 3
    1366:	95 07       	cpc	r25, r21
    1368:	99 f5       	brne	.+102    	; 0x13d0 <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    136a:	83 e0       	ldi	r24, 0x03	; 3
    136c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    136e:	8a e2       	ldi	r24, 0x2A	; 42
    1370:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1372:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1374:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1376:	de 01       	movw	r26, r28
    1378:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    137a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    137c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    137e:	41 e2       	ldi	r20, 0x21	; 33
    1380:	e3 2f       	mov	r30, r19
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1388:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    138a:	20 ff       	sbrs	r18, 0
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
    138e:	82 95       	swap	r24
    1390:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1392:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1394:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1396:	8a 30       	cpi	r24, 0x0A	; 10
    1398:	18 f0       	brcs	.+6      	; 0x13a0 <USB_Device_ProcessControlRequest+0x1d8>
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	c7 96       	adiw	r24, 0x37	; 55
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <USB_Device_ProcessControlRequest+0x1dc>
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	c0 96       	adiw	r24, 0x30	; 48
    13a4:	8d 93       	st	X+, r24
    13a6:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    13a8:	2f 5f       	subi	r18, 0xFF	; 255
    13aa:	24 31       	cpi	r18, 0x14	; 20
    13ac:	49 f7       	brne	.-46     	; 0x1380 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    13ae:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13b0:	08 ee       	ldi	r16, 0xE8	; 232
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	f8 01       	movw	r30, r16
    13b6:	80 81       	ld	r24, Z
    13b8:	87 7f       	andi	r24, 0xF7	; 247
    13ba:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    13bc:	6a e2       	ldi	r22, 0x2A	; 42
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	46 db       	rcall	.-2420   	; 0xa52 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13c6:	f8 01       	movw	r30, r16
    13c8:	80 81       	ld	r24, Z
    13ca:	8b 77       	andi	r24, 0x7B	; 123
    13cc:	80 83       	st	Z, r24
    13ce:	51 c0       	rjmp	.+162    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    13d0:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <USB_ControlRequest+0x4>
    13d4:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <USB_ControlRequest+0x5>
    13d8:	ae 01       	movw	r20, r28
    13da:	4f 5f       	subi	r20, 0xFF	; 255
    13dc:	5f 4f       	sbci	r21, 0xFF	; 255
    13de:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <CALLBACK_USB_GetDescriptor>
    13e2:	bc 01       	movw	r22, r24
    13e4:	89 2b       	or	r24, r25
    13e6:	09 f4       	brne	.+2      	; 0x13ea <USB_Device_ProcessControlRequest+0x222>
    13e8:	44 c0       	rjmp	.+136    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13ea:	08 ee       	ldi	r16, 0xE8	; 232
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	f8 01       	movw	r30, r16
    13f0:	90 81       	ld	r25, Z
    13f2:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    13f4:	90 83       	st	Z, r25
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	29 dc       	rcall	.-1966   	; 0xc4e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13fc:	f8 01       	movw	r30, r16
    13fe:	80 81       	ld	r24, Z
    1400:	8b 77       	andi	r24, 0x7B	; 123
    1402:	80 83       	st	Z, r24
    1404:	36 c0       	rjmp	.+108    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1406:	90 38       	cpi	r25, 0x80	; 128
    1408:	a1 f5       	brne	.+104    	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    140a:	e8 ee       	ldi	r30, 0xE8	; 232
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	87 7f       	andi	r24, 0xF7	; 247
    1412:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1414:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1418:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    141c:	80 81       	ld	r24, Z
    141e:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1420:	80 83       	st	Z, r24
    1422:	4f dd       	rcall	.-1378   	; 0xec2 <Endpoint_ClearStatusStage>
    1424:	26 c0       	rjmp	.+76     	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1426:	91 11       	cpse	r25, r1
    1428:	24 c0       	rjmp	.+72     	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    142a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <USB_ControlRequest+0x2>
    142e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <USB_ControlRequest+0x3>
    1432:	99 27       	eor	r25, r25
    1434:	02 97       	sbiw	r24, 0x02	; 2
    1436:	ec f4       	brge	.+58     	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1438:	e8 ee       	ldi	r30, 0xE8	; 232
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1440:	80 83       	st	Z, r24
    1442:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <USB_ControlRequest+0x2>
    1446:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    144a:	3b dd       	rcall	.-1418   	; 0xec2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    144c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_Device_ConfigurationNumber>
    1450:	88 23       	and	r24, r24
    1452:	21 f0       	breq	.+8      	; 0x145c <USB_Device_ProcessControlRequest+0x294>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_DeviceState>
    145a:	09 c0       	rjmp	.+18     	; 0x146e <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    145c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1460:	88 23       	and	r24, r24
    1462:	14 f0       	brlt	.+4      	; 0x1468 <USB_Device_ProcessControlRequest+0x2a0>
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	01 c0       	rjmp	.+2      	; 0x146a <USB_Device_ProcessControlRequest+0x2a2>
    1468:	84 e0       	ldi	r24, 0x04	; 4
    146a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    146e:	0e 94 97 01 	call	0x32e	; 0x32e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1472:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1476:	83 ff       	sbrs	r24, 3
    1478:	16 c0       	rjmp	.+44     	; 0x14a6 <USB_Device_ProcessControlRequest+0x2de>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    147a:	e8 ee       	ldi	r30, 0xE8	; 232
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	87 7f       	andi	r24, 0xF7	; 247
    1482:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1484:	eb ee       	ldi	r30, 0xEB	; 235
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	80 62       	ori	r24, 0x20	; 32
    148c:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    148e:	0b c0       	rjmp	.+22     	; 0x14a6 <USB_Device_ProcessControlRequest+0x2de>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1490:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <USB_ControlRequest+0x2>
    1494:	91 30       	cpi	r25, 0x01	; 1
    1496:	69 f7       	brne	.-38     	; 0x1472 <USB_Device_ProcessControlRequest+0x2aa>
    1498:	fd ce       	rjmp	.-518    	; 0x1294 <USB_Device_ProcessControlRequest+0xcc>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    149a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <USB_ControlRequest+0x2>
    149e:	88 23       	and	r24, r24
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <USB_Device_ProcessControlRequest+0x2dc>
    14a2:	ff ce       	rjmp	.-514    	; 0x12a2 <USB_Device_ProcessControlRequest+0xda>
    14a4:	2a cf       	rjmp	.-428    	; 0x12fa <USB_Device_ProcessControlRequest+0x132>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    14a6:	aa 96       	adiw	r28, 0x2a	; 42
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	08 95       	ret

000014bc <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    14bc:	08 95       	ret

000014be <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    14be:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    14c0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <USB_DeviceState>
    14c4:	88 23       	and	r24, r24
    14c6:	99 f0       	breq	.+38     	; 0x14ee <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14c8:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    14cc:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    14ce:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    14d2:	98 2f       	mov	r25, r24
    14d4:	91 70       	andi	r25, 0x01	; 1
    14d6:	80 fd       	sbrc	r24, 0
    14d8:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14da:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14dc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    14e4:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    14e6:	70 de       	rcall	.-800    	; 0x11c8 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14e8:	cf 70       	andi	r28, 0x0F	; 15
    14ea:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <memcmp>:
    14f2:	fb 01       	movw	r30, r22
    14f4:	dc 01       	movw	r26, r24
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <memcmp+0xe>
    14f8:	8d 91       	ld	r24, X+
    14fa:	01 90       	ld	r0, Z+
    14fc:	80 19       	sub	r24, r0
    14fe:	21 f4       	brne	.+8      	; 0x1508 <memcmp+0x16>
    1500:	41 50       	subi	r20, 0x01	; 1
    1502:	50 40       	sbci	r21, 0x00	; 0
    1504:	c8 f7       	brcc	.-14     	; 0x14f8 <memcmp+0x6>
    1506:	88 1b       	sub	r24, r24
    1508:	99 0b       	sbc	r25, r25
    150a:	08 95       	ret

0000150c <memcpy>:
    150c:	fb 01       	movw	r30, r22
    150e:	dc 01       	movw	r26, r24
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <memcpy+0xa>
    1512:	01 90       	ld	r0, Z+
    1514:	0d 92       	st	X+, r0
    1516:	41 50       	subi	r20, 0x01	; 1
    1518:	50 40       	sbci	r21, 0x00	; 0
    151a:	d8 f7       	brcc	.-10     	; 0x1512 <memcpy+0x6>
    151c:	08 95       	ret

0000151e <memset>:
    151e:	dc 01       	movw	r26, r24
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <memset+0x6>
    1522:	6d 93       	st	X+, r22
    1524:	41 50       	subi	r20, 0x01	; 1
    1526:	50 40       	sbci	r21, 0x00	; 0
    1528:	e0 f7       	brcc	.-8      	; 0x1522 <memset+0x4>
    152a:	08 95       	ret

0000152c <_exit>:
    152c:	f8 94       	cli

0000152e <__stop_program>:
    152e:	ff cf       	rjmp	.-2      	; 0x152e <__stop_program>
