
DreamcastJoystickHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00002888  0000291c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002888  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a4  00800110  00800110  0000292c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000295c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  0000299c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b4c  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d37  00000000  00000000  000097b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008dc4  00000000  00000000  0000b4ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c28  00000000  00000000  000142b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001815c  00000000  00000000  00014edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005850  00000000  00000000  0002d038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c98  00000000  00000000  00032888  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000078cb  00000000  00000000  00033520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c1       	rjmp	.+806    	; 0x328 <__ctors_end>
       2:	00 00       	nop
       4:	ae c1       	rjmp	.+860    	; 0x362 <__bad_interrupt>
       6:	00 00       	nop
       8:	ac c1       	rjmp	.+856    	; 0x362 <__bad_interrupt>
       a:	00 00       	nop
       c:	aa c1       	rjmp	.+852    	; 0x362 <__bad_interrupt>
       e:	00 00       	nop
      10:	a8 c1       	rjmp	.+848    	; 0x362 <__bad_interrupt>
      12:	00 00       	nop
      14:	a6 c1       	rjmp	.+844    	; 0x362 <__bad_interrupt>
      16:	00 00       	nop
      18:	a4 c1       	rjmp	.+840    	; 0x362 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a2 c1       	rjmp	.+836    	; 0x362 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a0 c1       	rjmp	.+832    	; 0x362 <__bad_interrupt>
      22:	00 00       	nop
      24:	9e c1       	rjmp	.+828    	; 0x362 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__vector_10>
      2c:	9a c1       	rjmp	.+820    	; 0x362 <__bad_interrupt>
      2e:	00 00       	nop
      30:	98 c1       	rjmp	.+816    	; 0x362 <__bad_interrupt>
      32:	00 00       	nop
      34:	96 c1       	rjmp	.+812    	; 0x362 <__bad_interrupt>
      36:	00 00       	nop
      38:	94 c1       	rjmp	.+808    	; 0x362 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	92 c1       	rjmp	.+804    	; 0x362 <__bad_interrupt>
      3e:	00 00       	nop
      40:	90 c1       	rjmp	.+800    	; 0x362 <__bad_interrupt>
      42:	00 00       	nop
      44:	8e c1       	rjmp	.+796    	; 0x362 <__bad_interrupt>
      46:	00 00       	nop
      48:	8c c1       	rjmp	.+792    	; 0x362 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8a c1       	rjmp	.+788    	; 0x362 <__bad_interrupt>
      4e:	00 00       	nop
      50:	88 c1       	rjmp	.+784    	; 0x362 <__bad_interrupt>
      52:	00 00       	nop
      54:	86 c1       	rjmp	.+780    	; 0x362 <__bad_interrupt>
      56:	00 00       	nop
      58:	84 c1       	rjmp	.+776    	; 0x362 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	82 c1       	rjmp	.+772    	; 0x362 <__bad_interrupt>
      5e:	00 00       	nop
      60:	80 c1       	rjmp	.+768    	; 0x362 <__bad_interrupt>
      62:	00 00       	nop
      64:	7e c1       	rjmp	.+764    	; 0x362 <__bad_interrupt>
      66:	00 00       	nop
      68:	7c c1       	rjmp	.+760    	; 0x362 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7a c1       	rjmp	.+756    	; 0x362 <__bad_interrupt>
      6e:	00 00       	nop
      70:	78 c1       	rjmp	.+752    	; 0x362 <__bad_interrupt>
      72:	00 00       	nop
      74:	76 c1       	rjmp	.+748    	; 0x362 <__bad_interrupt>
      76:	00 00       	nop
      78:	74 c1       	rjmp	.+744    	; 0x362 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	72 c1       	rjmp	.+740    	; 0x362 <__bad_interrupt>
      7e:	00 00       	nop
      80:	70 c1       	rjmp	.+736    	; 0x362 <__bad_interrupt>
      82:	00 00       	nop
      84:	6e c1       	rjmp	.+732    	; 0x362 <__bad_interrupt>
      86:	00 00       	nop
      88:	6c c1       	rjmp	.+728    	; 0x362 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6a c1       	rjmp	.+724    	; 0x362 <__bad_interrupt>
      8e:	00 00       	nop
      90:	68 c1       	rjmp	.+720    	; 0x362 <__bad_interrupt>
      92:	00 00       	nop
      94:	66 c1       	rjmp	.+716    	; 0x362 <__bad_interrupt>
      96:	00 00       	nop
      98:	64 c1       	rjmp	.+712    	; 0x362 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	62 c1       	rjmp	.+708    	; 0x362 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	60 c1       	rjmp	.+704    	; 0x362 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5e c1       	rjmp	.+700    	; 0x362 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5c c1       	rjmp	.+696    	; 0x362 <__bad_interrupt>
	...

000000ac <ProductString>:
      ac:	2a 03 44 00 72 00 65 00 61 00 6d 00 63 00 61 00     *.D.r.e.a.m.c.a.
      bc:	73 00 74 00 20 00 43 00 6f 00 6e 00 74 00 72 00     s.t. .C.o.n.t.r.
      cc:	6f 00 6c 00 6c 00 65 00 72 00 00 00                 o.l.l.e.r...

000000d8 <ManufacturerString>:
      d8:	30 03 53 00 77 00 61 00 6c 00 6c 00 6f 00 77 00     0.S.w.a.l.l.o.w.
      e8:	74 00 61 00 69 00 6c 00 20 00 45 00 6c 00 65 00     t.a.i.l. .E.l.e.
      f8:	63 00 74 00 72 00 6f 00 6e 00 69 00 63 00 73 00     c.t.r.o.n.i.c.s.
	...

0000010a <LanguageString>:
     10a:	04 03 09 04                                         ....

0000010e <ConfigurationDescriptor>:
     10e:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     11e:	00 00 09 21 11 01 00 01 22 55 00 07 05 81 03 08     ...!...."U......
     12e:	00 05                                               ..

00000130 <DeviceDescriptor>:
     130:	12 01 10 01 00 00 00 08 a3 0c 20 04 01 00 01 02     .......... .....
     140:	00 01                                               ..

00000142 <JoystickReport>:
     142:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 39     ...........0.1.9
     152:	16 81 ff 26 7f 00 36 ff ff 46 01 00 95 03 75 08     ...&..6..F....u.
     162:	81 02 c0 05 02 a1 00 09 c5 09 bb 16 81 ff 26 7f     ..............&.
     172:	00 36 ff ff 46 01 00 75 08 95 02 81 02 c0 05 09     .6..F..u........
     182:	19 01 29 05 15 00 25 01 75 01 95 05 81 02 75 03     ..)...%.u.....u.
     192:	95 01 81 01 c0                                      .....

00000197 <lcd_data_swallowtail>:
     197:	00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 1e     ................
     1a7:	00 00 00 00 00 13 00 00 00 00 00 09 80 00 00 00     ................
     1b7:	00 05 fc 00 00 00 00 06 02 00 00 00 00 05 01 38     ...............8
     1c7:	00 00 00 05 34 e8 00 00 00 05 12 68 00 00 00 05     ....4......h....
     1d7:	09 2c 00 00 00 05 08 b4 00 00 00 05 24 b5 00 00     .,..........$...
     1e7:	00 02 a2 bd 00 00 00 02 ff e6 40 00 00 02 80 7b     ..........@....{
     1f7:	50 00 00 02 80 8d 90 00 00 02 bf 1a a0 00 00 05     P...............
     207:	00 25 40 00 00 05 00 46 e0 00 00 05 3f 89 a0 00     .%@....F....?...
     217:	00 0a 01 19 f0 00 00 0a 02 29 a8 00 00 0a 04 69     .........).....i
     227:	28 00 00 0a f8 a9 14 00 00 0a 09 2a 14 00 00 0a     (..........*....
     237:	12 2a 10 00 00 0a 24 2a 10 00 00 0a c8 2c 00 00     .*....$*.....,..
     247:	00 0a 10 2c 00 00 00 0b f0 2c 00 00 00 0f e0 18     ...,.....,......
	...

0000025f <lcd_data_boosto>:
     25f:	00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00     ................
     26f:	00 00 00 00 00 00 01 00 00 00 00 00 00 c0 00 00     ................
     27f:	00 00 00 60 00 00 00 00 00 f8 00 00 00 00 01 fc     ...`............
     28f:	00 00 00 00 06 3e 00 00 00 00 00 7e 00 00 00 00     .....>.....~....
     29f:	01 fe 00 00 00 00 03 c6 00 00 00 00 01 83 00 00     ................
     2af:	00 00 01 81 80 00 00 00 01 01 c0 00 00 00 01 81     ................
     2bf:	c0 00 00 00 01 8f e0 00 00 00 01 c7 e0 00 00 00     ................
     2cf:	00 83 e0 00 00 00 00 41 e0 00 00 00 00 03 e0 00     .......A........
     2df:	00 00 00 0f e0 00 00 00 00 0f e0 00 00 00 00 0f     ................
     2ef:	e0 00 00 00 00 03 e0 00 00 00 00 01 e0 00 00 00     ................
     2ff:	00 01 c0 00 00 00 00 01 c0 00 00 00 00 03 00 00     ................
     30f:	00 00 00 0e 00 00 00 00 00 08 00 00 00 00 00 00     ................
	...

00000328 <__ctors_end>:
     328:	11 24       	eor	r1, r1
     32a:	1f be       	out	0x3f, r1	; 63
     32c:	cf ef       	ldi	r28, 0xFF	; 255
     32e:	da e0       	ldi	r29, 0x0A	; 10
     330:	de bf       	out	0x3e, r29	; 62
     332:	cd bf       	out	0x3d, r28	; 61

00000334 <__do_copy_data>:
     334:	11 e0       	ldi	r17, 0x01	; 1
     336:	a0 e0       	ldi	r26, 0x00	; 0
     338:	b1 e0       	ldi	r27, 0x01	; 1
     33a:	e8 e8       	ldi	r30, 0x88	; 136
     33c:	f8 e2       	ldi	r31, 0x28	; 40
     33e:	02 c0       	rjmp	.+4      	; 0x344 <__do_copy_data+0x10>
     340:	05 90       	lpm	r0, Z+
     342:	0d 92       	st	X+, r0
     344:	a0 31       	cpi	r26, 0x10	; 16
     346:	b1 07       	cpc	r27, r17
     348:	d9 f7       	brne	.-10     	; 0x340 <__do_copy_data+0xc>

0000034a <__do_clear_bss>:
     34a:	23 e0       	ldi	r18, 0x03	; 3
     34c:	a0 e1       	ldi	r26, 0x10	; 16
     34e:	b1 e0       	ldi	r27, 0x01	; 1
     350:	01 c0       	rjmp	.+2      	; 0x354 <.do_clear_bss_start>

00000352 <.do_clear_bss_loop>:
     352:	1d 92       	st	X+, r1

00000354 <.do_clear_bss_start>:
     354:	a4 3b       	cpi	r26, 0xB4	; 180
     356:	b2 07       	cpc	r27, r18
     358:	e1 f7       	brne	.-8      	; 0x352 <.do_clear_bss_loop>
     35a:	0e 94 c6 0b 	call	0x178c	; 0x178c <main>
     35e:	0c 94 42 14 	jmp	0x2884	; 0x2884 <_exit>

00000362 <__bad_interrupt>:
     362:	4e ce       	rjmp	.-868    	; 0x0 <__vectors>

00000364 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     364:	29 2f       	mov	r18, r25
     366:	33 27       	eor	r19, r19
     368:	23 30       	cpi	r18, 0x03	; 3
     36a:	31 05       	cpc	r19, r1
     36c:	c9 f0       	breq	.+50     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x3c>
     36e:	38 f4       	brcc	.+14     	; 0x37e <CALLBACK_USB_GetDescriptor+0x1a>
     370:	21 30       	cpi	r18, 0x01	; 1
     372:	31 05       	cpc	r19, r1
     374:	59 f0       	breq	.+22     	; 0x38c <CALLBACK_USB_GetDescriptor+0x28>
     376:	22 30       	cpi	r18, 0x02	; 2
     378:	31 05       	cpc	r19, r1
     37a:	69 f0       	breq	.+26     	; 0x396 <CALLBACK_USB_GetDescriptor+0x32>
     37c:	35 c0       	rjmp	.+106    	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x84>
     37e:	21 32       	cpi	r18, 0x21	; 33
     380:	31 05       	cpc	r19, r1
     382:	41 f1       	breq	.+80     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x70>
     384:	22 32       	cpi	r18, 0x22	; 34
     386:	31 05       	cpc	r19, r1
     388:	51 f1       	breq	.+84     	; 0x3de <CALLBACK_USB_GetDescriptor+0x7a>
     38a:	2e c0       	rjmp	.+92     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x84>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     38c:	82 e1       	ldi	r24, 0x12	; 18
     38e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     390:	20 e3       	ldi	r18, 0x30	; 48
     392:	31 e0       	ldi	r19, 0x01	; 1
     394:	32 c0       	rjmp	.+100    	; 0x3fa <CALLBACK_USB_GetDescriptor+0x96>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     396:	82 e2       	ldi	r24, 0x22	; 34
     398:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     39a:	2e e0       	ldi	r18, 0x0E	; 14
     39c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     39e:	2d c0       	rjmp	.+90     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x96>
		case DTYPE_String:
			switch (DescriptorNumber)
     3a0:	99 27       	eor	r25, r25
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	91 05       	cpc	r25, r1
     3a6:	51 f0       	breq	.+20     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x58>
     3a8:	18 f0       	brcs	.+6      	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x4c>
     3aa:	02 97       	sbiw	r24, 0x02	; 2
     3ac:	69 f0       	breq	.+26     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x64>
     3ae:	21 c0       	rjmp	.+66     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x8e>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3b0:	ea e0       	ldi	r30, 0x0A	; 10
     3b2:	f1 e0       	ldi	r31, 0x01	; 1
     3b4:	84 91       	lpm	r24, Z
     3b6:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     3b8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     3ba:	1f c0       	rjmp	.+62     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3bc:	e8 ed       	ldi	r30, 0xD8	; 216
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	84 91       	lpm	r24, Z
     3c2:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     3c4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     3c6:	19 c0       	rjmp	.+50     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3c8:	ec ea       	ldi	r30, 0xAC	; 172
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	84 91       	lpm	r24, Z
     3ce:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     3d0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     3d2:	13 c0       	rjmp	.+38     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x96>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3d4:	89 e0       	ldi	r24, 0x09	; 9
     3d6:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
     3d8:	20 e2       	ldi	r18, 0x20	; 32
     3da:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3dc:	0e c0       	rjmp	.+28     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x96>
		case HID_DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
     3de:	85 e5       	ldi	r24, 0x55	; 85
     3e0:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &JoystickReport;
     3e2:	22 e4       	ldi	r18, 0x42	; 66
     3e4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
     3e6:	09 c0       	rjmp	.+18     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x96>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	04 c0       	rjmp	.+8      	; 0x3fa <CALLBACK_USB_GetDescriptor+0x96>
	uint16_t    Size    = NO_DESCRIPTOR;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
     3fa:	fa 01       	movw	r30, r20
     3fc:	31 83       	std	Z+1, r19	; 0x01
     3fe:	20 83       	st	Z, r18
	return Size;
}
     400:	08 95       	ret

00000402 <maple_sendByte>:

//Initialize the USI on the ATmega168/328 for Three-Wire Operation
void Joystick_Init(){
	
	//Initialize the Maple Bus Connection
	maple_init();
     402:	94 e0       	ldi	r25, 0x04	; 4
     404:	9b b9       	out	0x0b, r25	; 11
     406:	95 e0       	ldi	r25, 0x05	; 5
     408:	9a 95       	dec	r25
     40a:	f1 f7       	brne	.-4      	; 0x408 <maple_sendByte+0x6>
     40c:	00 00       	nop
     40e:	88 23       	and	r24, r24
     410:	0c f4       	brge	.+2      	; 0x414 <maple_sendByte+0x12>
     412:	5b 9a       	sbi	0x0b, 3	; 11
     414:	00 00       	nop
     416:	5a 98       	cbi	0x0b, 2	; 11
     418:	95 e0       	ldi	r25, 0x05	; 5
     41a:	9a 95       	dec	r25
     41c:	f1 f7       	brne	.-4      	; 0x41a <maple_sendByte+0x18>
     41e:	00 00       	nop
     420:	98 e0       	ldi	r25, 0x08	; 8
     422:	9b b9       	out	0x0b, r25	; 11
     424:	95 e0       	ldi	r25, 0x05	; 5
     426:	9a 95       	dec	r25
     428:	f1 f7       	brne	.-4      	; 0x426 <maple_sendByte+0x24>
     42a:	00 00       	nop
     42c:	86 fd       	sbrc	r24, 6
     42e:	5a 9a       	sbi	0x0b, 2	; 11
     430:	00 00       	nop
     432:	5b 98       	cbi	0x0b, 3	; 11
     434:	95 e0       	ldi	r25, 0x05	; 5
     436:	9a 95       	dec	r25
     438:	f1 f7       	brne	.-4      	; 0x436 <maple_sendByte+0x34>
     43a:	00 00       	nop
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	9b b9       	out	0x0b, r25	; 11
     440:	95 e0       	ldi	r25, 0x05	; 5
     442:	9a 95       	dec	r25
     444:	f1 f7       	brne	.-4      	; 0x442 <maple_sendByte+0x40>
     446:	00 00       	nop
     448:	85 fd       	sbrc	r24, 5
     44a:	5b 9a       	sbi	0x0b, 3	; 11
     44c:	00 00       	nop
     44e:	5a 98       	cbi	0x0b, 2	; 11
     450:	95 e0       	ldi	r25, 0x05	; 5
     452:	9a 95       	dec	r25
     454:	f1 f7       	brne	.-4      	; 0x452 <maple_sendByte+0x50>
     456:	00 00       	nop
     458:	98 e0       	ldi	r25, 0x08	; 8
     45a:	9b b9       	out	0x0b, r25	; 11
     45c:	95 e0       	ldi	r25, 0x05	; 5
     45e:	9a 95       	dec	r25
     460:	f1 f7       	brne	.-4      	; 0x45e <maple_sendByte+0x5c>
     462:	00 00       	nop
     464:	84 fd       	sbrc	r24, 4
     466:	5a 9a       	sbi	0x0b, 2	; 11
     468:	00 00       	nop
     46a:	5b 98       	cbi	0x0b, 3	; 11
     46c:	95 e0       	ldi	r25, 0x05	; 5
     46e:	9a 95       	dec	r25
     470:	f1 f7       	brne	.-4      	; 0x46e <maple_sendByte+0x6c>
     472:	00 00       	nop
     474:	94 e0       	ldi	r25, 0x04	; 4
     476:	9b b9       	out	0x0b, r25	; 11
     478:	95 e0       	ldi	r25, 0x05	; 5
     47a:	9a 95       	dec	r25
     47c:	f1 f7       	brne	.-4      	; 0x47a <maple_sendByte+0x78>
     47e:	00 00       	nop
     480:	83 fd       	sbrc	r24, 3
     482:	5b 9a       	sbi	0x0b, 3	; 11
     484:	00 00       	nop
     486:	5a 98       	cbi	0x0b, 2	; 11
     488:	95 e0       	ldi	r25, 0x05	; 5
     48a:	9a 95       	dec	r25
     48c:	f1 f7       	brne	.-4      	; 0x48a <maple_sendByte+0x88>
     48e:	00 00       	nop
     490:	98 e0       	ldi	r25, 0x08	; 8
     492:	9b b9       	out	0x0b, r25	; 11
     494:	95 e0       	ldi	r25, 0x05	; 5
     496:	9a 95       	dec	r25
     498:	f1 f7       	brne	.-4      	; 0x496 <maple_sendByte+0x94>
     49a:	00 00       	nop
     49c:	82 fd       	sbrc	r24, 2
     49e:	5a 9a       	sbi	0x0b, 2	; 11
     4a0:	00 00       	nop
     4a2:	5b 98       	cbi	0x0b, 3	; 11
     4a4:	95 e0       	ldi	r25, 0x05	; 5
     4a6:	9a 95       	dec	r25
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <maple_sendByte+0xa4>
     4aa:	00 00       	nop
     4ac:	94 e0       	ldi	r25, 0x04	; 4
     4ae:	9b b9       	out	0x0b, r25	; 11
     4b0:	95 e0       	ldi	r25, 0x05	; 5
     4b2:	9a 95       	dec	r25
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <maple_sendByte+0xb0>
     4b6:	00 00       	nop
     4b8:	81 fd       	sbrc	r24, 1
     4ba:	5b 9a       	sbi	0x0b, 3	; 11
     4bc:	00 00       	nop
     4be:	5a 98       	cbi	0x0b, 2	; 11
     4c0:	95 e0       	ldi	r25, 0x05	; 5
     4c2:	9a 95       	dec	r25
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <maple_sendByte+0xc0>
     4c6:	00 00       	nop
     4c8:	98 e0       	ldi	r25, 0x08	; 8
     4ca:	9b b9       	out	0x0b, r25	; 11
     4cc:	95 e0       	ldi	r25, 0x05	; 5
     4ce:	9a 95       	dec	r25
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <maple_sendByte+0xcc>
     4d2:	00 00       	nop
     4d4:	80 fd       	sbrc	r24, 0
     4d6:	5a 9a       	sbi	0x0b, 2	; 11
     4d8:	00 00       	nop
     4da:	5b 98       	cbi	0x0b, 3	; 11
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	8a 95       	dec	r24
     4e0:	f1 f7       	brne	.-4      	; 0x4de <maple_sendByte+0xdc>
     4e2:	00 00       	nop
     4e4:	08 95       	ret

000004e6 <maple_init>:
     4e6:	83 ef       	ldi	r24, 0xF3	; 243
     4e8:	8a b9       	out	0x0a, r24	; 10
     4ea:	8c e0       	ldi	r24, 0x0C	; 12
     4ec:	8b b9       	out	0x0b, r24	; 11
     4ee:	08 95       	ret

000004f0 <maple_receiveFrame>:
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	dc 01       	movw	r26, r24
     4fa:	ef 93       	push	r30
     4fc:	ff 93       	push	r31
     4fe:	88 27       	eor	r24, r24
     500:	e6 e2       	ldi	r30, 0x26	; 38
     502:	f1 e0       	ldi	r31, 0x01	; 1
     504:	34 e1       	ldi	r19, 0x14	; 20

00000506 <wait_start_outer>:
     506:	3a 95       	dec	r19
     508:	41 f0       	breq	.+16     	; 0x51a <timeout>
     50a:	2f ef       	ldi	r18, 0xFF	; 255
     50c:	19 b1       	in	r17, 0x09	; 9

0000050e <wait_start_inner>:
     50e:	2a 95       	dec	r18
     510:	d1 f3       	breq	.-12     	; 0x506 <wait_start_outer>
     512:	09 b1       	in	r16, 0x09	; 9
     514:	01 17       	cp	r16, r17
     516:	d9 f3       	breq	.-10     	; 0x50e <wait_start_inner>
     518:	04 c0       	rjmp	.+8      	; 0x522 <start_rx>

0000051a <timeout>:
     51a:	83 95       	inc	r24
     51c:	5c 9a       	sbi	0x0b, 4	; 11
     51e:	5c 98       	cbi	0x0b, 4	; 11
     520:	02 c5       	rjmp	.+2564   	; 0xf26 <done>

00000522 <start_rx>:
     522:	09 b1       	in	r16, 0x09	; 9
     524:	01 93       	st	Z+, r16
     526:	09 b1       	in	r16, 0x09	; 9
     528:	01 93       	st	Z+, r16
     52a:	09 b1       	in	r16, 0x09	; 9
     52c:	01 93       	st	Z+, r16
     52e:	09 b1       	in	r16, 0x09	; 9
     530:	01 93       	st	Z+, r16
     532:	09 b1       	in	r16, 0x09	; 9
     534:	01 93       	st	Z+, r16
     536:	09 b1       	in	r16, 0x09	; 9
     538:	01 93       	st	Z+, r16
     53a:	09 b1       	in	r16, 0x09	; 9
     53c:	01 93       	st	Z+, r16
     53e:	09 b1       	in	r16, 0x09	; 9
     540:	01 93       	st	Z+, r16
     542:	09 b1       	in	r16, 0x09	; 9
     544:	01 93       	st	Z+, r16
     546:	09 b1       	in	r16, 0x09	; 9
     548:	01 93       	st	Z+, r16
     54a:	09 b1       	in	r16, 0x09	; 9
     54c:	01 93       	st	Z+, r16
     54e:	09 b1       	in	r16, 0x09	; 9
     550:	01 93       	st	Z+, r16
     552:	09 b1       	in	r16, 0x09	; 9
     554:	01 93       	st	Z+, r16
     556:	09 b1       	in	r16, 0x09	; 9
     558:	01 93       	st	Z+, r16
     55a:	09 b1       	in	r16, 0x09	; 9
     55c:	01 93       	st	Z+, r16
     55e:	09 b1       	in	r16, 0x09	; 9
     560:	01 93       	st	Z+, r16
     562:	09 b1       	in	r16, 0x09	; 9
     564:	01 93       	st	Z+, r16
     566:	09 b1       	in	r16, 0x09	; 9
     568:	01 93       	st	Z+, r16
     56a:	09 b1       	in	r16, 0x09	; 9
     56c:	01 93       	st	Z+, r16
     56e:	09 b1       	in	r16, 0x09	; 9
     570:	01 93       	st	Z+, r16
     572:	09 b1       	in	r16, 0x09	; 9
     574:	01 93       	st	Z+, r16
     576:	09 b1       	in	r16, 0x09	; 9
     578:	01 93       	st	Z+, r16
     57a:	09 b1       	in	r16, 0x09	; 9
     57c:	01 93       	st	Z+, r16
     57e:	09 b1       	in	r16, 0x09	; 9
     580:	01 93       	st	Z+, r16
     582:	09 b1       	in	r16, 0x09	; 9
     584:	01 93       	st	Z+, r16
     586:	09 b1       	in	r16, 0x09	; 9
     588:	01 93       	st	Z+, r16
     58a:	09 b1       	in	r16, 0x09	; 9
     58c:	01 93       	st	Z+, r16
     58e:	09 b1       	in	r16, 0x09	; 9
     590:	01 93       	st	Z+, r16
     592:	09 b1       	in	r16, 0x09	; 9
     594:	01 93       	st	Z+, r16
     596:	09 b1       	in	r16, 0x09	; 9
     598:	01 93       	st	Z+, r16
     59a:	09 b1       	in	r16, 0x09	; 9
     59c:	01 93       	st	Z+, r16
     59e:	09 b1       	in	r16, 0x09	; 9
     5a0:	01 93       	st	Z+, r16
     5a2:	09 b1       	in	r16, 0x09	; 9
     5a4:	01 93       	st	Z+, r16
     5a6:	09 b1       	in	r16, 0x09	; 9
     5a8:	01 93       	st	Z+, r16
     5aa:	09 b1       	in	r16, 0x09	; 9
     5ac:	01 93       	st	Z+, r16
     5ae:	09 b1       	in	r16, 0x09	; 9
     5b0:	01 93       	st	Z+, r16
     5b2:	09 b1       	in	r16, 0x09	; 9
     5b4:	01 93       	st	Z+, r16
     5b6:	09 b1       	in	r16, 0x09	; 9
     5b8:	01 93       	st	Z+, r16
     5ba:	09 b1       	in	r16, 0x09	; 9
     5bc:	01 93       	st	Z+, r16
     5be:	09 b1       	in	r16, 0x09	; 9
     5c0:	01 93       	st	Z+, r16
     5c2:	09 b1       	in	r16, 0x09	; 9
     5c4:	01 93       	st	Z+, r16
     5c6:	09 b1       	in	r16, 0x09	; 9
     5c8:	01 93       	st	Z+, r16
     5ca:	09 b1       	in	r16, 0x09	; 9
     5cc:	01 93       	st	Z+, r16
     5ce:	09 b1       	in	r16, 0x09	; 9
     5d0:	01 93       	st	Z+, r16
     5d2:	09 b1       	in	r16, 0x09	; 9
     5d4:	01 93       	st	Z+, r16
     5d6:	09 b1       	in	r16, 0x09	; 9
     5d8:	01 93       	st	Z+, r16
     5da:	09 b1       	in	r16, 0x09	; 9
     5dc:	01 93       	st	Z+, r16
     5de:	09 b1       	in	r16, 0x09	; 9
     5e0:	01 93       	st	Z+, r16
     5e2:	09 b1       	in	r16, 0x09	; 9
     5e4:	01 93       	st	Z+, r16
     5e6:	09 b1       	in	r16, 0x09	; 9
     5e8:	01 93       	st	Z+, r16
     5ea:	09 b1       	in	r16, 0x09	; 9
     5ec:	01 93       	st	Z+, r16
     5ee:	09 b1       	in	r16, 0x09	; 9
     5f0:	01 93       	st	Z+, r16
     5f2:	09 b1       	in	r16, 0x09	; 9
     5f4:	01 93       	st	Z+, r16
     5f6:	09 b1       	in	r16, 0x09	; 9
     5f8:	01 93       	st	Z+, r16
     5fa:	09 b1       	in	r16, 0x09	; 9
     5fc:	01 93       	st	Z+, r16
     5fe:	09 b1       	in	r16, 0x09	; 9
     600:	01 93       	st	Z+, r16
     602:	09 b1       	in	r16, 0x09	; 9
     604:	01 93       	st	Z+, r16
     606:	09 b1       	in	r16, 0x09	; 9
     608:	01 93       	st	Z+, r16
     60a:	09 b1       	in	r16, 0x09	; 9
     60c:	01 93       	st	Z+, r16
     60e:	09 b1       	in	r16, 0x09	; 9
     610:	01 93       	st	Z+, r16
     612:	09 b1       	in	r16, 0x09	; 9
     614:	01 93       	st	Z+, r16
     616:	09 b1       	in	r16, 0x09	; 9
     618:	01 93       	st	Z+, r16
     61a:	09 b1       	in	r16, 0x09	; 9
     61c:	01 93       	st	Z+, r16
     61e:	09 b1       	in	r16, 0x09	; 9
     620:	01 93       	st	Z+, r16
     622:	09 b1       	in	r16, 0x09	; 9
     624:	01 93       	st	Z+, r16
     626:	09 b1       	in	r16, 0x09	; 9
     628:	01 93       	st	Z+, r16
     62a:	09 b1       	in	r16, 0x09	; 9
     62c:	01 93       	st	Z+, r16
     62e:	09 b1       	in	r16, 0x09	; 9
     630:	01 93       	st	Z+, r16
     632:	09 b1       	in	r16, 0x09	; 9
     634:	01 93       	st	Z+, r16
     636:	09 b1       	in	r16, 0x09	; 9
     638:	01 93       	st	Z+, r16
     63a:	09 b1       	in	r16, 0x09	; 9
     63c:	01 93       	st	Z+, r16
     63e:	09 b1       	in	r16, 0x09	; 9
     640:	01 93       	st	Z+, r16
     642:	09 b1       	in	r16, 0x09	; 9
     644:	01 93       	st	Z+, r16
     646:	09 b1       	in	r16, 0x09	; 9
     648:	01 93       	st	Z+, r16
     64a:	09 b1       	in	r16, 0x09	; 9
     64c:	01 93       	st	Z+, r16
     64e:	09 b1       	in	r16, 0x09	; 9
     650:	01 93       	st	Z+, r16
     652:	09 b1       	in	r16, 0x09	; 9
     654:	01 93       	st	Z+, r16
     656:	09 b1       	in	r16, 0x09	; 9
     658:	01 93       	st	Z+, r16
     65a:	09 b1       	in	r16, 0x09	; 9
     65c:	01 93       	st	Z+, r16
     65e:	09 b1       	in	r16, 0x09	; 9
     660:	01 93       	st	Z+, r16
     662:	09 b1       	in	r16, 0x09	; 9
     664:	01 93       	st	Z+, r16
     666:	09 b1       	in	r16, 0x09	; 9
     668:	01 93       	st	Z+, r16
     66a:	09 b1       	in	r16, 0x09	; 9
     66c:	01 93       	st	Z+, r16
     66e:	09 b1       	in	r16, 0x09	; 9
     670:	01 93       	st	Z+, r16
     672:	09 b1       	in	r16, 0x09	; 9
     674:	01 93       	st	Z+, r16
     676:	09 b1       	in	r16, 0x09	; 9
     678:	01 93       	st	Z+, r16
     67a:	09 b1       	in	r16, 0x09	; 9
     67c:	01 93       	st	Z+, r16
     67e:	09 b1       	in	r16, 0x09	; 9
     680:	01 93       	st	Z+, r16
     682:	09 b1       	in	r16, 0x09	; 9
     684:	01 93       	st	Z+, r16
     686:	09 b1       	in	r16, 0x09	; 9
     688:	01 93       	st	Z+, r16
     68a:	09 b1       	in	r16, 0x09	; 9
     68c:	01 93       	st	Z+, r16
     68e:	09 b1       	in	r16, 0x09	; 9
     690:	01 93       	st	Z+, r16
     692:	09 b1       	in	r16, 0x09	; 9
     694:	01 93       	st	Z+, r16
     696:	09 b1       	in	r16, 0x09	; 9
     698:	01 93       	st	Z+, r16
     69a:	09 b1       	in	r16, 0x09	; 9
     69c:	01 93       	st	Z+, r16
     69e:	09 b1       	in	r16, 0x09	; 9
     6a0:	01 93       	st	Z+, r16
     6a2:	09 b1       	in	r16, 0x09	; 9
     6a4:	01 93       	st	Z+, r16
     6a6:	09 b1       	in	r16, 0x09	; 9
     6a8:	01 93       	st	Z+, r16
     6aa:	09 b1       	in	r16, 0x09	; 9
     6ac:	01 93       	st	Z+, r16
     6ae:	09 b1       	in	r16, 0x09	; 9
     6b0:	01 93       	st	Z+, r16
     6b2:	09 b1       	in	r16, 0x09	; 9
     6b4:	01 93       	st	Z+, r16
     6b6:	09 b1       	in	r16, 0x09	; 9
     6b8:	01 93       	st	Z+, r16
     6ba:	09 b1       	in	r16, 0x09	; 9
     6bc:	01 93       	st	Z+, r16
     6be:	09 b1       	in	r16, 0x09	; 9
     6c0:	01 93       	st	Z+, r16
     6c2:	09 b1       	in	r16, 0x09	; 9
     6c4:	01 93       	st	Z+, r16
     6c6:	09 b1       	in	r16, 0x09	; 9
     6c8:	01 93       	st	Z+, r16
     6ca:	09 b1       	in	r16, 0x09	; 9
     6cc:	01 93       	st	Z+, r16
     6ce:	09 b1       	in	r16, 0x09	; 9
     6d0:	01 93       	st	Z+, r16
     6d2:	09 b1       	in	r16, 0x09	; 9
     6d4:	01 93       	st	Z+, r16
     6d6:	09 b1       	in	r16, 0x09	; 9
     6d8:	01 93       	st	Z+, r16
     6da:	09 b1       	in	r16, 0x09	; 9
     6dc:	01 93       	st	Z+, r16
     6de:	09 b1       	in	r16, 0x09	; 9
     6e0:	01 93       	st	Z+, r16
     6e2:	09 b1       	in	r16, 0x09	; 9
     6e4:	01 93       	st	Z+, r16
     6e6:	09 b1       	in	r16, 0x09	; 9
     6e8:	01 93       	st	Z+, r16
     6ea:	09 b1       	in	r16, 0x09	; 9
     6ec:	01 93       	st	Z+, r16
     6ee:	09 b1       	in	r16, 0x09	; 9
     6f0:	01 93       	st	Z+, r16
     6f2:	09 b1       	in	r16, 0x09	; 9
     6f4:	01 93       	st	Z+, r16
     6f6:	09 b1       	in	r16, 0x09	; 9
     6f8:	01 93       	st	Z+, r16
     6fa:	09 b1       	in	r16, 0x09	; 9
     6fc:	01 93       	st	Z+, r16
     6fe:	09 b1       	in	r16, 0x09	; 9
     700:	01 93       	st	Z+, r16
     702:	09 b1       	in	r16, 0x09	; 9
     704:	01 93       	st	Z+, r16
     706:	09 b1       	in	r16, 0x09	; 9
     708:	01 93       	st	Z+, r16
     70a:	09 b1       	in	r16, 0x09	; 9
     70c:	01 93       	st	Z+, r16
     70e:	09 b1       	in	r16, 0x09	; 9
     710:	01 93       	st	Z+, r16
     712:	09 b1       	in	r16, 0x09	; 9
     714:	01 93       	st	Z+, r16
     716:	09 b1       	in	r16, 0x09	; 9
     718:	01 93       	st	Z+, r16
     71a:	09 b1       	in	r16, 0x09	; 9
     71c:	01 93       	st	Z+, r16
     71e:	09 b1       	in	r16, 0x09	; 9
     720:	01 93       	st	Z+, r16
     722:	09 b1       	in	r16, 0x09	; 9
     724:	01 93       	st	Z+, r16
     726:	09 b1       	in	r16, 0x09	; 9
     728:	01 93       	st	Z+, r16
     72a:	09 b1       	in	r16, 0x09	; 9
     72c:	01 93       	st	Z+, r16
     72e:	09 b1       	in	r16, 0x09	; 9
     730:	01 93       	st	Z+, r16
     732:	09 b1       	in	r16, 0x09	; 9
     734:	01 93       	st	Z+, r16
     736:	09 b1       	in	r16, 0x09	; 9
     738:	01 93       	st	Z+, r16
     73a:	09 b1       	in	r16, 0x09	; 9
     73c:	01 93       	st	Z+, r16
     73e:	09 b1       	in	r16, 0x09	; 9
     740:	01 93       	st	Z+, r16
     742:	09 b1       	in	r16, 0x09	; 9
     744:	01 93       	st	Z+, r16
     746:	09 b1       	in	r16, 0x09	; 9
     748:	01 93       	st	Z+, r16
     74a:	09 b1       	in	r16, 0x09	; 9
     74c:	01 93       	st	Z+, r16
     74e:	09 b1       	in	r16, 0x09	; 9
     750:	01 93       	st	Z+, r16
     752:	09 b1       	in	r16, 0x09	; 9
     754:	01 93       	st	Z+, r16
     756:	09 b1       	in	r16, 0x09	; 9
     758:	01 93       	st	Z+, r16
     75a:	09 b1       	in	r16, 0x09	; 9
     75c:	01 93       	st	Z+, r16
     75e:	09 b1       	in	r16, 0x09	; 9
     760:	01 93       	st	Z+, r16
     762:	09 b1       	in	r16, 0x09	; 9
     764:	01 93       	st	Z+, r16
     766:	09 b1       	in	r16, 0x09	; 9
     768:	01 93       	st	Z+, r16
     76a:	09 b1       	in	r16, 0x09	; 9
     76c:	01 93       	st	Z+, r16
     76e:	09 b1       	in	r16, 0x09	; 9
     770:	01 93       	st	Z+, r16
     772:	09 b1       	in	r16, 0x09	; 9
     774:	01 93       	st	Z+, r16
     776:	09 b1       	in	r16, 0x09	; 9
     778:	01 93       	st	Z+, r16
     77a:	09 b1       	in	r16, 0x09	; 9
     77c:	01 93       	st	Z+, r16
     77e:	09 b1       	in	r16, 0x09	; 9
     780:	01 93       	st	Z+, r16
     782:	09 b1       	in	r16, 0x09	; 9
     784:	01 93       	st	Z+, r16
     786:	09 b1       	in	r16, 0x09	; 9
     788:	01 93       	st	Z+, r16
     78a:	09 b1       	in	r16, 0x09	; 9
     78c:	01 93       	st	Z+, r16
     78e:	09 b1       	in	r16, 0x09	; 9
     790:	01 93       	st	Z+, r16
     792:	09 b1       	in	r16, 0x09	; 9
     794:	01 93       	st	Z+, r16
     796:	09 b1       	in	r16, 0x09	; 9
     798:	01 93       	st	Z+, r16
     79a:	09 b1       	in	r16, 0x09	; 9
     79c:	01 93       	st	Z+, r16
     79e:	09 b1       	in	r16, 0x09	; 9
     7a0:	01 93       	st	Z+, r16
     7a2:	09 b1       	in	r16, 0x09	; 9
     7a4:	01 93       	st	Z+, r16
     7a6:	09 b1       	in	r16, 0x09	; 9
     7a8:	01 93       	st	Z+, r16
     7aa:	09 b1       	in	r16, 0x09	; 9
     7ac:	01 93       	st	Z+, r16
     7ae:	09 b1       	in	r16, 0x09	; 9
     7b0:	01 93       	st	Z+, r16
     7b2:	09 b1       	in	r16, 0x09	; 9
     7b4:	01 93       	st	Z+, r16
     7b6:	09 b1       	in	r16, 0x09	; 9
     7b8:	01 93       	st	Z+, r16
     7ba:	09 b1       	in	r16, 0x09	; 9
     7bc:	01 93       	st	Z+, r16
     7be:	09 b1       	in	r16, 0x09	; 9
     7c0:	01 93       	st	Z+, r16
     7c2:	09 b1       	in	r16, 0x09	; 9
     7c4:	01 93       	st	Z+, r16
     7c6:	09 b1       	in	r16, 0x09	; 9
     7c8:	01 93       	st	Z+, r16
     7ca:	09 b1       	in	r16, 0x09	; 9
     7cc:	01 93       	st	Z+, r16
     7ce:	09 b1       	in	r16, 0x09	; 9
     7d0:	01 93       	st	Z+, r16
     7d2:	09 b1       	in	r16, 0x09	; 9
     7d4:	01 93       	st	Z+, r16
     7d6:	09 b1       	in	r16, 0x09	; 9
     7d8:	01 93       	st	Z+, r16
     7da:	09 b1       	in	r16, 0x09	; 9
     7dc:	01 93       	st	Z+, r16
     7de:	09 b1       	in	r16, 0x09	; 9
     7e0:	01 93       	st	Z+, r16
     7e2:	09 b1       	in	r16, 0x09	; 9
     7e4:	01 93       	st	Z+, r16
     7e6:	09 b1       	in	r16, 0x09	; 9
     7e8:	01 93       	st	Z+, r16
     7ea:	09 b1       	in	r16, 0x09	; 9
     7ec:	01 93       	st	Z+, r16
     7ee:	09 b1       	in	r16, 0x09	; 9
     7f0:	01 93       	st	Z+, r16
     7f2:	09 b1       	in	r16, 0x09	; 9
     7f4:	01 93       	st	Z+, r16
     7f6:	09 b1       	in	r16, 0x09	; 9
     7f8:	01 93       	st	Z+, r16
     7fa:	09 b1       	in	r16, 0x09	; 9
     7fc:	01 93       	st	Z+, r16
     7fe:	09 b1       	in	r16, 0x09	; 9
     800:	01 93       	st	Z+, r16
     802:	09 b1       	in	r16, 0x09	; 9
     804:	01 93       	st	Z+, r16
     806:	09 b1       	in	r16, 0x09	; 9
     808:	01 93       	st	Z+, r16
     80a:	09 b1       	in	r16, 0x09	; 9
     80c:	01 93       	st	Z+, r16
     80e:	09 b1       	in	r16, 0x09	; 9
     810:	01 93       	st	Z+, r16
     812:	09 b1       	in	r16, 0x09	; 9
     814:	01 93       	st	Z+, r16
     816:	09 b1       	in	r16, 0x09	; 9
     818:	01 93       	st	Z+, r16
     81a:	09 b1       	in	r16, 0x09	; 9
     81c:	01 93       	st	Z+, r16
     81e:	09 b1       	in	r16, 0x09	; 9
     820:	01 93       	st	Z+, r16
     822:	09 b1       	in	r16, 0x09	; 9
     824:	01 93       	st	Z+, r16
     826:	09 b1       	in	r16, 0x09	; 9
     828:	01 93       	st	Z+, r16
     82a:	09 b1       	in	r16, 0x09	; 9
     82c:	01 93       	st	Z+, r16
     82e:	09 b1       	in	r16, 0x09	; 9
     830:	01 93       	st	Z+, r16
     832:	09 b1       	in	r16, 0x09	; 9
     834:	01 93       	st	Z+, r16
     836:	09 b1       	in	r16, 0x09	; 9
     838:	01 93       	st	Z+, r16
     83a:	09 b1       	in	r16, 0x09	; 9
     83c:	01 93       	st	Z+, r16
     83e:	09 b1       	in	r16, 0x09	; 9
     840:	01 93       	st	Z+, r16
     842:	09 b1       	in	r16, 0x09	; 9
     844:	01 93       	st	Z+, r16
     846:	09 b1       	in	r16, 0x09	; 9
     848:	01 93       	st	Z+, r16
     84a:	09 b1       	in	r16, 0x09	; 9
     84c:	01 93       	st	Z+, r16
     84e:	09 b1       	in	r16, 0x09	; 9
     850:	01 93       	st	Z+, r16
     852:	09 b1       	in	r16, 0x09	; 9
     854:	01 93       	st	Z+, r16
     856:	09 b1       	in	r16, 0x09	; 9
     858:	01 93       	st	Z+, r16
     85a:	09 b1       	in	r16, 0x09	; 9
     85c:	01 93       	st	Z+, r16
     85e:	09 b1       	in	r16, 0x09	; 9
     860:	01 93       	st	Z+, r16
     862:	09 b1       	in	r16, 0x09	; 9
     864:	01 93       	st	Z+, r16
     866:	09 b1       	in	r16, 0x09	; 9
     868:	01 93       	st	Z+, r16
     86a:	09 b1       	in	r16, 0x09	; 9
     86c:	01 93       	st	Z+, r16
     86e:	09 b1       	in	r16, 0x09	; 9
     870:	01 93       	st	Z+, r16
     872:	09 b1       	in	r16, 0x09	; 9
     874:	01 93       	st	Z+, r16
     876:	09 b1       	in	r16, 0x09	; 9
     878:	01 93       	st	Z+, r16
     87a:	09 b1       	in	r16, 0x09	; 9
     87c:	01 93       	st	Z+, r16
     87e:	09 b1       	in	r16, 0x09	; 9
     880:	01 93       	st	Z+, r16
     882:	09 b1       	in	r16, 0x09	; 9
     884:	01 93       	st	Z+, r16
     886:	09 b1       	in	r16, 0x09	; 9
     888:	01 93       	st	Z+, r16
     88a:	09 b1       	in	r16, 0x09	; 9
     88c:	01 93       	st	Z+, r16
     88e:	09 b1       	in	r16, 0x09	; 9
     890:	01 93       	st	Z+, r16
     892:	09 b1       	in	r16, 0x09	; 9
     894:	01 93       	st	Z+, r16
     896:	09 b1       	in	r16, 0x09	; 9
     898:	01 93       	st	Z+, r16
     89a:	09 b1       	in	r16, 0x09	; 9
     89c:	01 93       	st	Z+, r16
     89e:	09 b1       	in	r16, 0x09	; 9
     8a0:	01 93       	st	Z+, r16
     8a2:	09 b1       	in	r16, 0x09	; 9
     8a4:	01 93       	st	Z+, r16
     8a6:	09 b1       	in	r16, 0x09	; 9
     8a8:	01 93       	st	Z+, r16
     8aa:	09 b1       	in	r16, 0x09	; 9
     8ac:	01 93       	st	Z+, r16
     8ae:	09 b1       	in	r16, 0x09	; 9
     8b0:	01 93       	st	Z+, r16
     8b2:	09 b1       	in	r16, 0x09	; 9
     8b4:	01 93       	st	Z+, r16
     8b6:	09 b1       	in	r16, 0x09	; 9
     8b8:	01 93       	st	Z+, r16
     8ba:	09 b1       	in	r16, 0x09	; 9
     8bc:	01 93       	st	Z+, r16
     8be:	09 b1       	in	r16, 0x09	; 9
     8c0:	01 93       	st	Z+, r16
     8c2:	09 b1       	in	r16, 0x09	; 9
     8c4:	01 93       	st	Z+, r16
     8c6:	09 b1       	in	r16, 0x09	; 9
     8c8:	01 93       	st	Z+, r16
     8ca:	09 b1       	in	r16, 0x09	; 9
     8cc:	01 93       	st	Z+, r16
     8ce:	09 b1       	in	r16, 0x09	; 9
     8d0:	01 93       	st	Z+, r16
     8d2:	09 b1       	in	r16, 0x09	; 9
     8d4:	01 93       	st	Z+, r16
     8d6:	09 b1       	in	r16, 0x09	; 9
     8d8:	01 93       	st	Z+, r16
     8da:	09 b1       	in	r16, 0x09	; 9
     8dc:	01 93       	st	Z+, r16
     8de:	09 b1       	in	r16, 0x09	; 9
     8e0:	01 93       	st	Z+, r16
     8e2:	09 b1       	in	r16, 0x09	; 9
     8e4:	01 93       	st	Z+, r16
     8e6:	09 b1       	in	r16, 0x09	; 9
     8e8:	01 93       	st	Z+, r16
     8ea:	09 b1       	in	r16, 0x09	; 9
     8ec:	01 93       	st	Z+, r16
     8ee:	09 b1       	in	r16, 0x09	; 9
     8f0:	01 93       	st	Z+, r16
     8f2:	09 b1       	in	r16, 0x09	; 9
     8f4:	01 93       	st	Z+, r16
     8f6:	09 b1       	in	r16, 0x09	; 9
     8f8:	01 93       	st	Z+, r16
     8fa:	09 b1       	in	r16, 0x09	; 9
     8fc:	01 93       	st	Z+, r16
     8fe:	09 b1       	in	r16, 0x09	; 9
     900:	01 93       	st	Z+, r16
     902:	09 b1       	in	r16, 0x09	; 9
     904:	01 93       	st	Z+, r16
     906:	09 b1       	in	r16, 0x09	; 9
     908:	01 93       	st	Z+, r16
     90a:	09 b1       	in	r16, 0x09	; 9
     90c:	01 93       	st	Z+, r16
     90e:	09 b1       	in	r16, 0x09	; 9
     910:	01 93       	st	Z+, r16
     912:	09 b1       	in	r16, 0x09	; 9
     914:	01 93       	st	Z+, r16
     916:	09 b1       	in	r16, 0x09	; 9
     918:	01 93       	st	Z+, r16
     91a:	09 b1       	in	r16, 0x09	; 9
     91c:	01 93       	st	Z+, r16
     91e:	09 b1       	in	r16, 0x09	; 9
     920:	01 93       	st	Z+, r16
     922:	09 b1       	in	r16, 0x09	; 9
     924:	01 93       	st	Z+, r16
     926:	09 b1       	in	r16, 0x09	; 9
     928:	01 93       	st	Z+, r16
     92a:	09 b1       	in	r16, 0x09	; 9
     92c:	01 93       	st	Z+, r16
     92e:	09 b1       	in	r16, 0x09	; 9
     930:	01 93       	st	Z+, r16
     932:	09 b1       	in	r16, 0x09	; 9
     934:	01 93       	st	Z+, r16
     936:	09 b1       	in	r16, 0x09	; 9
     938:	01 93       	st	Z+, r16
     93a:	09 b1       	in	r16, 0x09	; 9
     93c:	01 93       	st	Z+, r16
     93e:	09 b1       	in	r16, 0x09	; 9
     940:	01 93       	st	Z+, r16
     942:	09 b1       	in	r16, 0x09	; 9
     944:	01 93       	st	Z+, r16
     946:	09 b1       	in	r16, 0x09	; 9
     948:	01 93       	st	Z+, r16
     94a:	09 b1       	in	r16, 0x09	; 9
     94c:	01 93       	st	Z+, r16
     94e:	09 b1       	in	r16, 0x09	; 9
     950:	01 93       	st	Z+, r16
     952:	09 b1       	in	r16, 0x09	; 9
     954:	01 93       	st	Z+, r16
     956:	09 b1       	in	r16, 0x09	; 9
     958:	01 93       	st	Z+, r16
     95a:	09 b1       	in	r16, 0x09	; 9
     95c:	01 93       	st	Z+, r16
     95e:	09 b1       	in	r16, 0x09	; 9
     960:	01 93       	st	Z+, r16
     962:	09 b1       	in	r16, 0x09	; 9
     964:	01 93       	st	Z+, r16
     966:	09 b1       	in	r16, 0x09	; 9
     968:	01 93       	st	Z+, r16
     96a:	09 b1       	in	r16, 0x09	; 9
     96c:	01 93       	st	Z+, r16
     96e:	09 b1       	in	r16, 0x09	; 9
     970:	01 93       	st	Z+, r16
     972:	09 b1       	in	r16, 0x09	; 9
     974:	01 93       	st	Z+, r16
     976:	09 b1       	in	r16, 0x09	; 9
     978:	01 93       	st	Z+, r16
     97a:	09 b1       	in	r16, 0x09	; 9
     97c:	01 93       	st	Z+, r16
     97e:	09 b1       	in	r16, 0x09	; 9
     980:	01 93       	st	Z+, r16
     982:	09 b1       	in	r16, 0x09	; 9
     984:	01 93       	st	Z+, r16
     986:	09 b1       	in	r16, 0x09	; 9
     988:	01 93       	st	Z+, r16
     98a:	09 b1       	in	r16, 0x09	; 9
     98c:	01 93       	st	Z+, r16
     98e:	09 b1       	in	r16, 0x09	; 9
     990:	01 93       	st	Z+, r16
     992:	09 b1       	in	r16, 0x09	; 9
     994:	01 93       	st	Z+, r16
     996:	09 b1       	in	r16, 0x09	; 9
     998:	01 93       	st	Z+, r16
     99a:	09 b1       	in	r16, 0x09	; 9
     99c:	01 93       	st	Z+, r16
     99e:	09 b1       	in	r16, 0x09	; 9
     9a0:	01 93       	st	Z+, r16
     9a2:	09 b1       	in	r16, 0x09	; 9
     9a4:	01 93       	st	Z+, r16
     9a6:	09 b1       	in	r16, 0x09	; 9
     9a8:	01 93       	st	Z+, r16
     9aa:	09 b1       	in	r16, 0x09	; 9
     9ac:	01 93       	st	Z+, r16
     9ae:	09 b1       	in	r16, 0x09	; 9
     9b0:	01 93       	st	Z+, r16
     9b2:	09 b1       	in	r16, 0x09	; 9
     9b4:	01 93       	st	Z+, r16
     9b6:	09 b1       	in	r16, 0x09	; 9
     9b8:	01 93       	st	Z+, r16
     9ba:	09 b1       	in	r16, 0x09	; 9
     9bc:	01 93       	st	Z+, r16
     9be:	09 b1       	in	r16, 0x09	; 9
     9c0:	01 93       	st	Z+, r16
     9c2:	09 b1       	in	r16, 0x09	; 9
     9c4:	01 93       	st	Z+, r16
     9c6:	09 b1       	in	r16, 0x09	; 9
     9c8:	01 93       	st	Z+, r16
     9ca:	09 b1       	in	r16, 0x09	; 9
     9cc:	01 93       	st	Z+, r16
     9ce:	09 b1       	in	r16, 0x09	; 9
     9d0:	01 93       	st	Z+, r16
     9d2:	09 b1       	in	r16, 0x09	; 9
     9d4:	01 93       	st	Z+, r16
     9d6:	09 b1       	in	r16, 0x09	; 9
     9d8:	01 93       	st	Z+, r16
     9da:	09 b1       	in	r16, 0x09	; 9
     9dc:	01 93       	st	Z+, r16
     9de:	09 b1       	in	r16, 0x09	; 9
     9e0:	01 93       	st	Z+, r16
     9e2:	09 b1       	in	r16, 0x09	; 9
     9e4:	01 93       	st	Z+, r16
     9e6:	09 b1       	in	r16, 0x09	; 9
     9e8:	01 93       	st	Z+, r16
     9ea:	09 b1       	in	r16, 0x09	; 9
     9ec:	01 93       	st	Z+, r16
     9ee:	09 b1       	in	r16, 0x09	; 9
     9f0:	01 93       	st	Z+, r16
     9f2:	09 b1       	in	r16, 0x09	; 9
     9f4:	01 93       	st	Z+, r16
     9f6:	09 b1       	in	r16, 0x09	; 9
     9f8:	01 93       	st	Z+, r16
     9fa:	09 b1       	in	r16, 0x09	; 9
     9fc:	01 93       	st	Z+, r16
     9fe:	09 b1       	in	r16, 0x09	; 9
     a00:	01 93       	st	Z+, r16
     a02:	09 b1       	in	r16, 0x09	; 9
     a04:	01 93       	st	Z+, r16
     a06:	09 b1       	in	r16, 0x09	; 9
     a08:	01 93       	st	Z+, r16
     a0a:	09 b1       	in	r16, 0x09	; 9
     a0c:	01 93       	st	Z+, r16
     a0e:	09 b1       	in	r16, 0x09	; 9
     a10:	01 93       	st	Z+, r16
     a12:	09 b1       	in	r16, 0x09	; 9
     a14:	01 93       	st	Z+, r16
     a16:	09 b1       	in	r16, 0x09	; 9
     a18:	01 93       	st	Z+, r16
     a1a:	09 b1       	in	r16, 0x09	; 9
     a1c:	01 93       	st	Z+, r16
     a1e:	09 b1       	in	r16, 0x09	; 9
     a20:	01 93       	st	Z+, r16
     a22:	09 b1       	in	r16, 0x09	; 9
     a24:	01 93       	st	Z+, r16
     a26:	09 b1       	in	r16, 0x09	; 9
     a28:	01 93       	st	Z+, r16
     a2a:	09 b1       	in	r16, 0x09	; 9
     a2c:	01 93       	st	Z+, r16
     a2e:	09 b1       	in	r16, 0x09	; 9
     a30:	01 93       	st	Z+, r16
     a32:	09 b1       	in	r16, 0x09	; 9
     a34:	01 93       	st	Z+, r16
     a36:	09 b1       	in	r16, 0x09	; 9
     a38:	01 93       	st	Z+, r16
     a3a:	09 b1       	in	r16, 0x09	; 9
     a3c:	01 93       	st	Z+, r16
     a3e:	09 b1       	in	r16, 0x09	; 9
     a40:	01 93       	st	Z+, r16
     a42:	09 b1       	in	r16, 0x09	; 9
     a44:	01 93       	st	Z+, r16
     a46:	09 b1       	in	r16, 0x09	; 9
     a48:	01 93       	st	Z+, r16
     a4a:	09 b1       	in	r16, 0x09	; 9
     a4c:	01 93       	st	Z+, r16
     a4e:	09 b1       	in	r16, 0x09	; 9
     a50:	01 93       	st	Z+, r16
     a52:	09 b1       	in	r16, 0x09	; 9
     a54:	01 93       	st	Z+, r16
     a56:	09 b1       	in	r16, 0x09	; 9
     a58:	01 93       	st	Z+, r16
     a5a:	09 b1       	in	r16, 0x09	; 9
     a5c:	01 93       	st	Z+, r16
     a5e:	09 b1       	in	r16, 0x09	; 9
     a60:	01 93       	st	Z+, r16
     a62:	09 b1       	in	r16, 0x09	; 9
     a64:	01 93       	st	Z+, r16
     a66:	09 b1       	in	r16, 0x09	; 9
     a68:	01 93       	st	Z+, r16
     a6a:	09 b1       	in	r16, 0x09	; 9
     a6c:	01 93       	st	Z+, r16
     a6e:	09 b1       	in	r16, 0x09	; 9
     a70:	01 93       	st	Z+, r16
     a72:	09 b1       	in	r16, 0x09	; 9
     a74:	01 93       	st	Z+, r16
     a76:	09 b1       	in	r16, 0x09	; 9
     a78:	01 93       	st	Z+, r16
     a7a:	09 b1       	in	r16, 0x09	; 9
     a7c:	01 93       	st	Z+, r16
     a7e:	09 b1       	in	r16, 0x09	; 9
     a80:	01 93       	st	Z+, r16
     a82:	09 b1       	in	r16, 0x09	; 9
     a84:	01 93       	st	Z+, r16
     a86:	09 b1       	in	r16, 0x09	; 9
     a88:	01 93       	st	Z+, r16
     a8a:	09 b1       	in	r16, 0x09	; 9
     a8c:	01 93       	st	Z+, r16
     a8e:	09 b1       	in	r16, 0x09	; 9
     a90:	01 93       	st	Z+, r16
     a92:	09 b1       	in	r16, 0x09	; 9
     a94:	01 93       	st	Z+, r16
     a96:	09 b1       	in	r16, 0x09	; 9
     a98:	01 93       	st	Z+, r16
     a9a:	09 b1       	in	r16, 0x09	; 9
     a9c:	01 93       	st	Z+, r16
     a9e:	09 b1       	in	r16, 0x09	; 9
     aa0:	01 93       	st	Z+, r16
     aa2:	09 b1       	in	r16, 0x09	; 9
     aa4:	01 93       	st	Z+, r16
     aa6:	09 b1       	in	r16, 0x09	; 9
     aa8:	01 93       	st	Z+, r16
     aaa:	09 b1       	in	r16, 0x09	; 9
     aac:	01 93       	st	Z+, r16
     aae:	09 b1       	in	r16, 0x09	; 9
     ab0:	01 93       	st	Z+, r16
     ab2:	09 b1       	in	r16, 0x09	; 9
     ab4:	01 93       	st	Z+, r16
     ab6:	09 b1       	in	r16, 0x09	; 9
     ab8:	01 93       	st	Z+, r16
     aba:	09 b1       	in	r16, 0x09	; 9
     abc:	01 93       	st	Z+, r16
     abe:	09 b1       	in	r16, 0x09	; 9
     ac0:	01 93       	st	Z+, r16
     ac2:	09 b1       	in	r16, 0x09	; 9
     ac4:	01 93       	st	Z+, r16
     ac6:	09 b1       	in	r16, 0x09	; 9
     ac8:	01 93       	st	Z+, r16
     aca:	09 b1       	in	r16, 0x09	; 9
     acc:	01 93       	st	Z+, r16
     ace:	09 b1       	in	r16, 0x09	; 9
     ad0:	01 93       	st	Z+, r16
     ad2:	09 b1       	in	r16, 0x09	; 9
     ad4:	01 93       	st	Z+, r16
     ad6:	09 b1       	in	r16, 0x09	; 9
     ad8:	01 93       	st	Z+, r16
     ada:	09 b1       	in	r16, 0x09	; 9
     adc:	01 93       	st	Z+, r16
     ade:	09 b1       	in	r16, 0x09	; 9
     ae0:	01 93       	st	Z+, r16
     ae2:	09 b1       	in	r16, 0x09	; 9
     ae4:	01 93       	st	Z+, r16
     ae6:	09 b1       	in	r16, 0x09	; 9
     ae8:	01 93       	st	Z+, r16
     aea:	09 b1       	in	r16, 0x09	; 9
     aec:	01 93       	st	Z+, r16
     aee:	09 b1       	in	r16, 0x09	; 9
     af0:	01 93       	st	Z+, r16
     af2:	09 b1       	in	r16, 0x09	; 9
     af4:	01 93       	st	Z+, r16
     af6:	09 b1       	in	r16, 0x09	; 9
     af8:	01 93       	st	Z+, r16
     afa:	09 b1       	in	r16, 0x09	; 9
     afc:	01 93       	st	Z+, r16
     afe:	09 b1       	in	r16, 0x09	; 9
     b00:	01 93       	st	Z+, r16
     b02:	09 b1       	in	r16, 0x09	; 9
     b04:	01 93       	st	Z+, r16
     b06:	09 b1       	in	r16, 0x09	; 9
     b08:	01 93       	st	Z+, r16
     b0a:	09 b1       	in	r16, 0x09	; 9
     b0c:	01 93       	st	Z+, r16
     b0e:	09 b1       	in	r16, 0x09	; 9
     b10:	01 93       	st	Z+, r16
     b12:	09 b1       	in	r16, 0x09	; 9
     b14:	01 93       	st	Z+, r16
     b16:	09 b1       	in	r16, 0x09	; 9
     b18:	01 93       	st	Z+, r16
     b1a:	09 b1       	in	r16, 0x09	; 9
     b1c:	01 93       	st	Z+, r16
     b1e:	09 b1       	in	r16, 0x09	; 9
     b20:	01 93       	st	Z+, r16
     b22:	09 b1       	in	r16, 0x09	; 9
     b24:	01 93       	st	Z+, r16
     b26:	09 b1       	in	r16, 0x09	; 9
     b28:	01 93       	st	Z+, r16
     b2a:	09 b1       	in	r16, 0x09	; 9
     b2c:	01 93       	st	Z+, r16
     b2e:	09 b1       	in	r16, 0x09	; 9
     b30:	01 93       	st	Z+, r16
     b32:	09 b1       	in	r16, 0x09	; 9
     b34:	01 93       	st	Z+, r16
     b36:	09 b1       	in	r16, 0x09	; 9
     b38:	01 93       	st	Z+, r16
     b3a:	09 b1       	in	r16, 0x09	; 9
     b3c:	01 93       	st	Z+, r16
     b3e:	09 b1       	in	r16, 0x09	; 9
     b40:	01 93       	st	Z+, r16
     b42:	09 b1       	in	r16, 0x09	; 9
     b44:	01 93       	st	Z+, r16
     b46:	09 b1       	in	r16, 0x09	; 9
     b48:	01 93       	st	Z+, r16
     b4a:	09 b1       	in	r16, 0x09	; 9
     b4c:	01 93       	st	Z+, r16
     b4e:	09 b1       	in	r16, 0x09	; 9
     b50:	01 93       	st	Z+, r16
     b52:	09 b1       	in	r16, 0x09	; 9
     b54:	01 93       	st	Z+, r16
     b56:	09 b1       	in	r16, 0x09	; 9
     b58:	01 93       	st	Z+, r16
     b5a:	09 b1       	in	r16, 0x09	; 9
     b5c:	01 93       	st	Z+, r16
     b5e:	09 b1       	in	r16, 0x09	; 9
     b60:	01 93       	st	Z+, r16
     b62:	09 b1       	in	r16, 0x09	; 9
     b64:	01 93       	st	Z+, r16
     b66:	09 b1       	in	r16, 0x09	; 9
     b68:	01 93       	st	Z+, r16
     b6a:	09 b1       	in	r16, 0x09	; 9
     b6c:	01 93       	st	Z+, r16
     b6e:	09 b1       	in	r16, 0x09	; 9
     b70:	01 93       	st	Z+, r16
     b72:	09 b1       	in	r16, 0x09	; 9
     b74:	01 93       	st	Z+, r16
     b76:	09 b1       	in	r16, 0x09	; 9
     b78:	01 93       	st	Z+, r16
     b7a:	09 b1       	in	r16, 0x09	; 9
     b7c:	01 93       	st	Z+, r16
     b7e:	09 b1       	in	r16, 0x09	; 9
     b80:	01 93       	st	Z+, r16
     b82:	09 b1       	in	r16, 0x09	; 9
     b84:	01 93       	st	Z+, r16
     b86:	09 b1       	in	r16, 0x09	; 9
     b88:	01 93       	st	Z+, r16
     b8a:	09 b1       	in	r16, 0x09	; 9
     b8c:	01 93       	st	Z+, r16
     b8e:	09 b1       	in	r16, 0x09	; 9
     b90:	01 93       	st	Z+, r16
     b92:	09 b1       	in	r16, 0x09	; 9
     b94:	01 93       	st	Z+, r16
     b96:	09 b1       	in	r16, 0x09	; 9
     b98:	01 93       	st	Z+, r16
     b9a:	09 b1       	in	r16, 0x09	; 9
     b9c:	01 93       	st	Z+, r16
     b9e:	09 b1       	in	r16, 0x09	; 9
     ba0:	01 93       	st	Z+, r16
     ba2:	09 b1       	in	r16, 0x09	; 9
     ba4:	01 93       	st	Z+, r16
     ba6:	09 b1       	in	r16, 0x09	; 9
     ba8:	01 93       	st	Z+, r16
     baa:	09 b1       	in	r16, 0x09	; 9
     bac:	01 93       	st	Z+, r16
     bae:	09 b1       	in	r16, 0x09	; 9
     bb0:	01 93       	st	Z+, r16
     bb2:	09 b1       	in	r16, 0x09	; 9
     bb4:	01 93       	st	Z+, r16
     bb6:	09 b1       	in	r16, 0x09	; 9
     bb8:	01 93       	st	Z+, r16
     bba:	09 b1       	in	r16, 0x09	; 9
     bbc:	01 93       	st	Z+, r16
     bbe:	09 b1       	in	r16, 0x09	; 9
     bc0:	01 93       	st	Z+, r16
     bc2:	09 b1       	in	r16, 0x09	; 9
     bc4:	01 93       	st	Z+, r16
     bc6:	09 b1       	in	r16, 0x09	; 9
     bc8:	01 93       	st	Z+, r16
     bca:	09 b1       	in	r16, 0x09	; 9
     bcc:	01 93       	st	Z+, r16
     bce:	09 b1       	in	r16, 0x09	; 9
     bd0:	01 93       	st	Z+, r16
     bd2:	09 b1       	in	r16, 0x09	; 9
     bd4:	01 93       	st	Z+, r16
     bd6:	09 b1       	in	r16, 0x09	; 9
     bd8:	01 93       	st	Z+, r16
     bda:	09 b1       	in	r16, 0x09	; 9
     bdc:	01 93       	st	Z+, r16
     bde:	09 b1       	in	r16, 0x09	; 9
     be0:	01 93       	st	Z+, r16
     be2:	09 b1       	in	r16, 0x09	; 9
     be4:	01 93       	st	Z+, r16
     be6:	09 b1       	in	r16, 0x09	; 9
     be8:	01 93       	st	Z+, r16
     bea:	09 b1       	in	r16, 0x09	; 9
     bec:	01 93       	st	Z+, r16
     bee:	09 b1       	in	r16, 0x09	; 9
     bf0:	01 93       	st	Z+, r16
     bf2:	09 b1       	in	r16, 0x09	; 9
     bf4:	01 93       	st	Z+, r16
     bf6:	09 b1       	in	r16, 0x09	; 9
     bf8:	01 93       	st	Z+, r16
     bfa:	09 b1       	in	r16, 0x09	; 9
     bfc:	01 93       	st	Z+, r16
     bfe:	09 b1       	in	r16, 0x09	; 9
     c00:	01 93       	st	Z+, r16
     c02:	09 b1       	in	r16, 0x09	; 9
     c04:	01 93       	st	Z+, r16
     c06:	09 b1       	in	r16, 0x09	; 9
     c08:	01 93       	st	Z+, r16
     c0a:	09 b1       	in	r16, 0x09	; 9
     c0c:	01 93       	st	Z+, r16
     c0e:	09 b1       	in	r16, 0x09	; 9
     c10:	01 93       	st	Z+, r16
     c12:	09 b1       	in	r16, 0x09	; 9
     c14:	01 93       	st	Z+, r16
     c16:	09 b1       	in	r16, 0x09	; 9
     c18:	01 93       	st	Z+, r16
     c1a:	09 b1       	in	r16, 0x09	; 9
     c1c:	01 93       	st	Z+, r16
     c1e:	09 b1       	in	r16, 0x09	; 9
     c20:	01 93       	st	Z+, r16
     c22:	09 b1       	in	r16, 0x09	; 9
     c24:	01 93       	st	Z+, r16
     c26:	09 b1       	in	r16, 0x09	; 9
     c28:	01 93       	st	Z+, r16
     c2a:	09 b1       	in	r16, 0x09	; 9
     c2c:	01 93       	st	Z+, r16
     c2e:	09 b1       	in	r16, 0x09	; 9
     c30:	01 93       	st	Z+, r16
     c32:	09 b1       	in	r16, 0x09	; 9
     c34:	01 93       	st	Z+, r16
     c36:	09 b1       	in	r16, 0x09	; 9
     c38:	01 93       	st	Z+, r16
     c3a:	09 b1       	in	r16, 0x09	; 9
     c3c:	01 93       	st	Z+, r16
     c3e:	09 b1       	in	r16, 0x09	; 9
     c40:	01 93       	st	Z+, r16
     c42:	09 b1       	in	r16, 0x09	; 9
     c44:	01 93       	st	Z+, r16
     c46:	09 b1       	in	r16, 0x09	; 9
     c48:	01 93       	st	Z+, r16
     c4a:	09 b1       	in	r16, 0x09	; 9
     c4c:	01 93       	st	Z+, r16
     c4e:	09 b1       	in	r16, 0x09	; 9
     c50:	01 93       	st	Z+, r16
     c52:	09 b1       	in	r16, 0x09	; 9
     c54:	01 93       	st	Z+, r16
     c56:	09 b1       	in	r16, 0x09	; 9
     c58:	01 93       	st	Z+, r16
     c5a:	09 b1       	in	r16, 0x09	; 9
     c5c:	01 93       	st	Z+, r16
     c5e:	09 b1       	in	r16, 0x09	; 9
     c60:	01 93       	st	Z+, r16
     c62:	09 b1       	in	r16, 0x09	; 9
     c64:	01 93       	st	Z+, r16
     c66:	09 b1       	in	r16, 0x09	; 9
     c68:	01 93       	st	Z+, r16
     c6a:	09 b1       	in	r16, 0x09	; 9
     c6c:	01 93       	st	Z+, r16
     c6e:	09 b1       	in	r16, 0x09	; 9
     c70:	01 93       	st	Z+, r16
     c72:	09 b1       	in	r16, 0x09	; 9
     c74:	01 93       	st	Z+, r16
     c76:	09 b1       	in	r16, 0x09	; 9
     c78:	01 93       	st	Z+, r16
     c7a:	09 b1       	in	r16, 0x09	; 9
     c7c:	01 93       	st	Z+, r16
     c7e:	09 b1       	in	r16, 0x09	; 9
     c80:	01 93       	st	Z+, r16
     c82:	09 b1       	in	r16, 0x09	; 9
     c84:	01 93       	st	Z+, r16
     c86:	09 b1       	in	r16, 0x09	; 9
     c88:	01 93       	st	Z+, r16
     c8a:	09 b1       	in	r16, 0x09	; 9
     c8c:	01 93       	st	Z+, r16
     c8e:	09 b1       	in	r16, 0x09	; 9
     c90:	01 93       	st	Z+, r16
     c92:	09 b1       	in	r16, 0x09	; 9
     c94:	01 93       	st	Z+, r16
     c96:	09 b1       	in	r16, 0x09	; 9
     c98:	01 93       	st	Z+, r16
     c9a:	09 b1       	in	r16, 0x09	; 9
     c9c:	01 93       	st	Z+, r16
     c9e:	09 b1       	in	r16, 0x09	; 9
     ca0:	01 93       	st	Z+, r16
     ca2:	09 b1       	in	r16, 0x09	; 9
     ca4:	01 93       	st	Z+, r16
     ca6:	09 b1       	in	r16, 0x09	; 9
     ca8:	01 93       	st	Z+, r16
     caa:	09 b1       	in	r16, 0x09	; 9
     cac:	01 93       	st	Z+, r16
     cae:	09 b1       	in	r16, 0x09	; 9
     cb0:	01 93       	st	Z+, r16
     cb2:	09 b1       	in	r16, 0x09	; 9
     cb4:	01 93       	st	Z+, r16
     cb6:	09 b1       	in	r16, 0x09	; 9
     cb8:	01 93       	st	Z+, r16
     cba:	09 b1       	in	r16, 0x09	; 9
     cbc:	01 93       	st	Z+, r16
     cbe:	09 b1       	in	r16, 0x09	; 9
     cc0:	01 93       	st	Z+, r16
     cc2:	09 b1       	in	r16, 0x09	; 9
     cc4:	01 93       	st	Z+, r16
     cc6:	09 b1       	in	r16, 0x09	; 9
     cc8:	01 93       	st	Z+, r16
     cca:	09 b1       	in	r16, 0x09	; 9
     ccc:	01 93       	st	Z+, r16
     cce:	09 b1       	in	r16, 0x09	; 9
     cd0:	01 93       	st	Z+, r16
     cd2:	09 b1       	in	r16, 0x09	; 9
     cd4:	01 93       	st	Z+, r16
     cd6:	09 b1       	in	r16, 0x09	; 9
     cd8:	01 93       	st	Z+, r16
     cda:	09 b1       	in	r16, 0x09	; 9
     cdc:	01 93       	st	Z+, r16
     cde:	09 b1       	in	r16, 0x09	; 9
     ce0:	01 93       	st	Z+, r16
     ce2:	09 b1       	in	r16, 0x09	; 9
     ce4:	01 93       	st	Z+, r16
     ce6:	09 b1       	in	r16, 0x09	; 9
     ce8:	01 93       	st	Z+, r16
     cea:	09 b1       	in	r16, 0x09	; 9
     cec:	01 93       	st	Z+, r16
     cee:	09 b1       	in	r16, 0x09	; 9
     cf0:	01 93       	st	Z+, r16
     cf2:	09 b1       	in	r16, 0x09	; 9
     cf4:	01 93       	st	Z+, r16
     cf6:	09 b1       	in	r16, 0x09	; 9
     cf8:	01 93       	st	Z+, r16
     cfa:	09 b1       	in	r16, 0x09	; 9
     cfc:	01 93       	st	Z+, r16
     cfe:	09 b1       	in	r16, 0x09	; 9
     d00:	01 93       	st	Z+, r16
     d02:	09 b1       	in	r16, 0x09	; 9
     d04:	01 93       	st	Z+, r16
     d06:	09 b1       	in	r16, 0x09	; 9
     d08:	01 93       	st	Z+, r16
     d0a:	09 b1       	in	r16, 0x09	; 9
     d0c:	01 93       	st	Z+, r16
     d0e:	09 b1       	in	r16, 0x09	; 9
     d10:	01 93       	st	Z+, r16
     d12:	09 b1       	in	r16, 0x09	; 9
     d14:	01 93       	st	Z+, r16
     d16:	09 b1       	in	r16, 0x09	; 9
     d18:	01 93       	st	Z+, r16
     d1a:	09 b1       	in	r16, 0x09	; 9
     d1c:	01 93       	st	Z+, r16
     d1e:	09 b1       	in	r16, 0x09	; 9
     d20:	01 93       	st	Z+, r16
     d22:	09 b1       	in	r16, 0x09	; 9
     d24:	01 93       	st	Z+, r16
     d26:	09 b1       	in	r16, 0x09	; 9
     d28:	01 93       	st	Z+, r16
     d2a:	09 b1       	in	r16, 0x09	; 9
     d2c:	01 93       	st	Z+, r16
     d2e:	09 b1       	in	r16, 0x09	; 9
     d30:	01 93       	st	Z+, r16
     d32:	09 b1       	in	r16, 0x09	; 9
     d34:	01 93       	st	Z+, r16
     d36:	09 b1       	in	r16, 0x09	; 9
     d38:	01 93       	st	Z+, r16
     d3a:	09 b1       	in	r16, 0x09	; 9
     d3c:	01 93       	st	Z+, r16
     d3e:	09 b1       	in	r16, 0x09	; 9
     d40:	01 93       	st	Z+, r16
     d42:	09 b1       	in	r16, 0x09	; 9
     d44:	01 93       	st	Z+, r16
     d46:	09 b1       	in	r16, 0x09	; 9
     d48:	01 93       	st	Z+, r16
     d4a:	09 b1       	in	r16, 0x09	; 9
     d4c:	01 93       	st	Z+, r16
     d4e:	09 b1       	in	r16, 0x09	; 9
     d50:	01 93       	st	Z+, r16
     d52:	09 b1       	in	r16, 0x09	; 9
     d54:	01 93       	st	Z+, r16
     d56:	09 b1       	in	r16, 0x09	; 9
     d58:	01 93       	st	Z+, r16
     d5a:	09 b1       	in	r16, 0x09	; 9
     d5c:	01 93       	st	Z+, r16
     d5e:	09 b1       	in	r16, 0x09	; 9
     d60:	01 93       	st	Z+, r16
     d62:	09 b1       	in	r16, 0x09	; 9
     d64:	01 93       	st	Z+, r16
     d66:	09 b1       	in	r16, 0x09	; 9
     d68:	01 93       	st	Z+, r16
     d6a:	09 b1       	in	r16, 0x09	; 9
     d6c:	01 93       	st	Z+, r16
     d6e:	09 b1       	in	r16, 0x09	; 9
     d70:	01 93       	st	Z+, r16
     d72:	09 b1       	in	r16, 0x09	; 9
     d74:	01 93       	st	Z+, r16
     d76:	09 b1       	in	r16, 0x09	; 9
     d78:	01 93       	st	Z+, r16
     d7a:	09 b1       	in	r16, 0x09	; 9
     d7c:	01 93       	st	Z+, r16
     d7e:	09 b1       	in	r16, 0x09	; 9
     d80:	01 93       	st	Z+, r16
     d82:	09 b1       	in	r16, 0x09	; 9
     d84:	01 93       	st	Z+, r16
     d86:	09 b1       	in	r16, 0x09	; 9
     d88:	01 93       	st	Z+, r16
     d8a:	09 b1       	in	r16, 0x09	; 9
     d8c:	01 93       	st	Z+, r16
     d8e:	09 b1       	in	r16, 0x09	; 9
     d90:	01 93       	st	Z+, r16
     d92:	09 b1       	in	r16, 0x09	; 9
     d94:	01 93       	st	Z+, r16
     d96:	09 b1       	in	r16, 0x09	; 9
     d98:	01 93       	st	Z+, r16
     d9a:	09 b1       	in	r16, 0x09	; 9
     d9c:	01 93       	st	Z+, r16
     d9e:	09 b1       	in	r16, 0x09	; 9
     da0:	01 93       	st	Z+, r16
     da2:	09 b1       	in	r16, 0x09	; 9
     da4:	01 93       	st	Z+, r16
     da6:	09 b1       	in	r16, 0x09	; 9
     da8:	01 93       	st	Z+, r16
     daa:	09 b1       	in	r16, 0x09	; 9
     dac:	01 93       	st	Z+, r16
     dae:	09 b1       	in	r16, 0x09	; 9
     db0:	01 93       	st	Z+, r16
     db2:	09 b1       	in	r16, 0x09	; 9
     db4:	01 93       	st	Z+, r16
     db6:	09 b1       	in	r16, 0x09	; 9
     db8:	01 93       	st	Z+, r16
     dba:	09 b1       	in	r16, 0x09	; 9
     dbc:	01 93       	st	Z+, r16
     dbe:	09 b1       	in	r16, 0x09	; 9
     dc0:	01 93       	st	Z+, r16
     dc2:	09 b1       	in	r16, 0x09	; 9
     dc4:	01 93       	st	Z+, r16
     dc6:	09 b1       	in	r16, 0x09	; 9
     dc8:	01 93       	st	Z+, r16
     dca:	09 b1       	in	r16, 0x09	; 9
     dcc:	01 93       	st	Z+, r16
     dce:	09 b1       	in	r16, 0x09	; 9
     dd0:	01 93       	st	Z+, r16
     dd2:	09 b1       	in	r16, 0x09	; 9
     dd4:	01 93       	st	Z+, r16
     dd6:	09 b1       	in	r16, 0x09	; 9
     dd8:	01 93       	st	Z+, r16
     dda:	09 b1       	in	r16, 0x09	; 9
     ddc:	01 93       	st	Z+, r16
     dde:	09 b1       	in	r16, 0x09	; 9
     de0:	01 93       	st	Z+, r16
     de2:	09 b1       	in	r16, 0x09	; 9
     de4:	01 93       	st	Z+, r16
     de6:	09 b1       	in	r16, 0x09	; 9
     de8:	01 93       	st	Z+, r16
     dea:	09 b1       	in	r16, 0x09	; 9
     dec:	01 93       	st	Z+, r16
     dee:	09 b1       	in	r16, 0x09	; 9
     df0:	01 93       	st	Z+, r16
     df2:	09 b1       	in	r16, 0x09	; 9
     df4:	01 93       	st	Z+, r16
     df6:	09 b1       	in	r16, 0x09	; 9
     df8:	01 93       	st	Z+, r16
     dfa:	09 b1       	in	r16, 0x09	; 9
     dfc:	01 93       	st	Z+, r16
     dfe:	09 b1       	in	r16, 0x09	; 9
     e00:	01 93       	st	Z+, r16
     e02:	09 b1       	in	r16, 0x09	; 9
     e04:	01 93       	st	Z+, r16
     e06:	09 b1       	in	r16, 0x09	; 9
     e08:	01 93       	st	Z+, r16
     e0a:	09 b1       	in	r16, 0x09	; 9
     e0c:	01 93       	st	Z+, r16
     e0e:	09 b1       	in	r16, 0x09	; 9
     e10:	01 93       	st	Z+, r16
     e12:	09 b1       	in	r16, 0x09	; 9
     e14:	01 93       	st	Z+, r16
     e16:	09 b1       	in	r16, 0x09	; 9
     e18:	01 93       	st	Z+, r16
     e1a:	09 b1       	in	r16, 0x09	; 9
     e1c:	01 93       	st	Z+, r16
     e1e:	09 b1       	in	r16, 0x09	; 9
     e20:	01 93       	st	Z+, r16
     e22:	09 b1       	in	r16, 0x09	; 9
     e24:	01 93       	st	Z+, r16
     e26:	09 b1       	in	r16, 0x09	; 9
     e28:	01 93       	st	Z+, r16
     e2a:	09 b1       	in	r16, 0x09	; 9
     e2c:	01 93       	st	Z+, r16
     e2e:	09 b1       	in	r16, 0x09	; 9
     e30:	01 93       	st	Z+, r16
     e32:	09 b1       	in	r16, 0x09	; 9
     e34:	01 93       	st	Z+, r16
     e36:	09 b1       	in	r16, 0x09	; 9
     e38:	01 93       	st	Z+, r16
     e3a:	09 b1       	in	r16, 0x09	; 9
     e3c:	01 93       	st	Z+, r16
     e3e:	09 b1       	in	r16, 0x09	; 9
     e40:	01 93       	st	Z+, r16
     e42:	09 b1       	in	r16, 0x09	; 9
     e44:	01 93       	st	Z+, r16
     e46:	09 b1       	in	r16, 0x09	; 9
     e48:	01 93       	st	Z+, r16
     e4a:	09 b1       	in	r16, 0x09	; 9
     e4c:	01 93       	st	Z+, r16
     e4e:	09 b1       	in	r16, 0x09	; 9
     e50:	01 93       	st	Z+, r16
     e52:	09 b1       	in	r16, 0x09	; 9
     e54:	01 93       	st	Z+, r16
     e56:	09 b1       	in	r16, 0x09	; 9
     e58:	01 93       	st	Z+, r16
     e5a:	09 b1       	in	r16, 0x09	; 9
     e5c:	01 93       	st	Z+, r16
     e5e:	09 b1       	in	r16, 0x09	; 9
     e60:	01 93       	st	Z+, r16
     e62:	09 b1       	in	r16, 0x09	; 9
     e64:	01 93       	st	Z+, r16
     e66:	09 b1       	in	r16, 0x09	; 9
     e68:	01 93       	st	Z+, r16
     e6a:	09 b1       	in	r16, 0x09	; 9
     e6c:	01 93       	st	Z+, r16
     e6e:	09 b1       	in	r16, 0x09	; 9
     e70:	01 93       	st	Z+, r16
     e72:	09 b1       	in	r16, 0x09	; 9
     e74:	01 93       	st	Z+, r16
     e76:	09 b1       	in	r16, 0x09	; 9
     e78:	01 93       	st	Z+, r16
     e7a:	09 b1       	in	r16, 0x09	; 9
     e7c:	01 93       	st	Z+, r16
     e7e:	09 b1       	in	r16, 0x09	; 9
     e80:	01 93       	st	Z+, r16
     e82:	09 b1       	in	r16, 0x09	; 9
     e84:	01 93       	st	Z+, r16
     e86:	09 b1       	in	r16, 0x09	; 9
     e88:	01 93       	st	Z+, r16
     e8a:	09 b1       	in	r16, 0x09	; 9
     e8c:	01 93       	st	Z+, r16
     e8e:	09 b1       	in	r16, 0x09	; 9
     e90:	01 93       	st	Z+, r16
     e92:	09 b1       	in	r16, 0x09	; 9
     e94:	01 93       	st	Z+, r16
     e96:	09 b1       	in	r16, 0x09	; 9
     e98:	01 93       	st	Z+, r16
     e9a:	09 b1       	in	r16, 0x09	; 9
     e9c:	01 93       	st	Z+, r16
     e9e:	09 b1       	in	r16, 0x09	; 9
     ea0:	01 93       	st	Z+, r16
     ea2:	09 b1       	in	r16, 0x09	; 9
     ea4:	01 93       	st	Z+, r16
     ea6:	09 b1       	in	r16, 0x09	; 9
     ea8:	01 93       	st	Z+, r16
     eaa:	09 b1       	in	r16, 0x09	; 9
     eac:	01 93       	st	Z+, r16
     eae:	09 b1       	in	r16, 0x09	; 9
     eb0:	01 93       	st	Z+, r16
     eb2:	09 b1       	in	r16, 0x09	; 9
     eb4:	01 93       	st	Z+, r16
     eb6:	09 b1       	in	r16, 0x09	; 9
     eb8:	01 93       	st	Z+, r16
     eba:	09 b1       	in	r16, 0x09	; 9
     ebc:	01 93       	st	Z+, r16
     ebe:	09 b1       	in	r16, 0x09	; 9
     ec0:	01 93       	st	Z+, r16
     ec2:	09 b1       	in	r16, 0x09	; 9
     ec4:	01 93       	st	Z+, r16
     ec6:	09 b1       	in	r16, 0x09	; 9
     ec8:	01 93       	st	Z+, r16
     eca:	09 b1       	in	r16, 0x09	; 9
     ecc:	01 93       	st	Z+, r16
     ece:	09 b1       	in	r16, 0x09	; 9
     ed0:	01 93       	st	Z+, r16
     ed2:	09 b1       	in	r16, 0x09	; 9
     ed4:	01 93       	st	Z+, r16
     ed6:	09 b1       	in	r16, 0x09	; 9
     ed8:	01 93       	st	Z+, r16
     eda:	09 b1       	in	r16, 0x09	; 9
     edc:	01 93       	st	Z+, r16
     ede:	09 b1       	in	r16, 0x09	; 9
     ee0:	01 93       	st	Z+, r16
     ee2:	09 b1       	in	r16, 0x09	; 9
     ee4:	01 93       	st	Z+, r16
     ee6:	09 b1       	in	r16, 0x09	; 9
     ee8:	01 93       	st	Z+, r16
     eea:	09 b1       	in	r16, 0x09	; 9
     eec:	01 93       	st	Z+, r16
     eee:	09 b1       	in	r16, 0x09	; 9
     ef0:	01 93       	st	Z+, r16
     ef2:	09 b1       	in	r16, 0x09	; 9
     ef4:	01 93       	st	Z+, r16
     ef6:	09 b1       	in	r16, 0x09	; 9
     ef8:	01 93       	st	Z+, r16
     efa:	09 b1       	in	r16, 0x09	; 9
     efc:	01 93       	st	Z+, r16
     efe:	09 b1       	in	r16, 0x09	; 9
     f00:	01 93       	st	Z+, r16
     f02:	09 b1       	in	r16, 0x09	; 9
     f04:	01 93       	st	Z+, r16
     f06:	09 b1       	in	r16, 0x09	; 9
     f08:	01 93       	st	Z+, r16
     f0a:	09 b1       	in	r16, 0x09	; 9
     f0c:	01 93       	st	Z+, r16
     f0e:	09 b1       	in	r16, 0x09	; 9
     f10:	01 93       	st	Z+, r16
     f12:	09 b1       	in	r16, 0x09	; 9
     f14:	01 93       	st	Z+, r16
     f16:	09 b1       	in	r16, 0x09	; 9
     f18:	01 93       	st	Z+, r16
     f1a:	09 b1       	in	r16, 0x09	; 9
     f1c:	01 93       	st	Z+, r16
     f1e:	09 b1       	in	r16, 0x09	; 9
     f20:	01 93       	st	Z+, r16
     f22:	09 b1       	in	r16, 0x09	; 9
     f24:	01 93       	st	Z+, r16

00000f26 <done>:
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	81 11       	cpse	r24, r1
     f2c:	8a c0       	rjmp	.+276    	; 0x1042 <done+0x11c>
     f2e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <maplebuf>
     f32:	8c 70       	andi	r24, 0x0C	; 12
     f34:	84 30       	cpi	r24, 0x04	; 4
     f36:	09 f4       	brne	.+2      	; 0xf3a <done+0x14>
     f38:	96 c0       	rjmp	.+300    	; 0x1066 <done+0x140>
     f3a:	21 e0       	ldi	r18, 0x01	; 1
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	f9 01       	movw	r30, r18
     f40:	ea 5d       	subi	r30, 0xDA	; 218
     f42:	fe 4f       	sbci	r31, 0xFE	; 254
     f44:	90 81       	ld	r25, Z
     f46:	9c 70       	andi	r25, 0x0C	; 12
     f48:	94 30       	cpi	r25, 0x04	; 4
     f4a:	49 f0       	breq	.+18     	; 0xf5e <done+0x38>
     f4c:	2f 5f       	subi	r18, 0xFF	; 255
     f4e:	3f 4f       	sbci	r19, 0xFF	; 255
     f50:	21 38       	cpi	r18, 0x81	; 129
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	38 07       	cpc	r19, r24
     f56:	99 f7       	brne	.-26     	; 0xf3e <done+0x18>
     f58:	6f ef       	ldi	r22, 0xFF	; 255
     f5a:	7f ef       	ldi	r23, 0xFF	; 255
     f5c:	8b c0       	rjmp	.+278    	; 0x1074 <done+0x14e>
     f5e:	21 38       	cpi	r18, 0x81	; 129
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	38 07       	cpc	r19, r24
     f64:	09 f4       	brne	.+2      	; 0xf68 <done+0x42>
     f66:	79 c0       	rjmp	.+242    	; 0x105a <done+0x134>
     f68:	1c 92       	st	X, r1
     f6a:	f9 01       	movw	r30, r18
     f6c:	ea 5d       	subi	r30, 0xDA	; 218
     f6e:	fe 4f       	sbci	r31, 0xFE	; 254
     f70:	40 81       	ld	r20, Z
     f72:	4c 70       	andi	r20, 0x0C	; 12
     f74:	21 38       	cpi	r18, 0x81	; 129
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	38 07       	cpc	r19, r24
     f7a:	0c f0       	brlt	.+2      	; 0xf7e <done+0x58>
     f7c:	65 c0       	rjmp	.+202    	; 0x1048 <done+0x122>
     f7e:	50 e8       	ldi	r21, 0x80	; 128
     f80:	c0 e0       	ldi	r28, 0x00	; 0
     f82:	d0 e0       	ldi	r29, 0x00	; 0
     f84:	10 e0       	ldi	r17, 0x00	; 0
     f86:	f9 01       	movw	r30, r18
     f88:	ea 5d       	subi	r30, 0xDA	; 218
     f8a:	fe 4f       	sbci	r31, 0xFE	; 254
     f8c:	90 81       	ld	r25, Z
     f8e:	9c 70       	andi	r25, 0x0C	; 12
     f90:	2c 98       	cbi	0x05, 4	; 5
     f92:	94 17       	cp	r25, r20
     f94:	29 f1       	breq	.+74     	; 0xfe0 <done+0xba>
     f96:	89 2f       	mov	r24, r25
     f98:	80 95       	com	r24
     f9a:	48 23       	and	r20, r24
     f9c:	e9 f0       	breq	.+58     	; 0xfd8 <done+0xb2>
     f9e:	41 17       	cp	r20, r17
     fa0:	29 f1       	breq	.+74     	; 0xfec <done+0xc6>
     fa2:	4c 30       	cpi	r20, 0x0C	; 12
     fa4:	11 f4       	brne	.+4      	; 0xfaa <done+0x84>
     fa6:	2c 9a       	sbi	0x05, 4	; 5
     fa8:	2c 98       	cbi	0x05, 4	; 5
     faa:	99 23       	and	r25, r25
     fac:	31 f0       	breq	.+12     	; 0xfba <done+0x94>
     fae:	fd 01       	movw	r30, r26
     fb0:	ec 0f       	add	r30, r28
     fb2:	fd 1f       	adc	r31, r29
     fb4:	80 81       	ld	r24, Z
     fb6:	85 2b       	or	r24, r21
     fb8:	80 83       	st	Z, r24
     fba:	56 95       	lsr	r21
     fbc:	79 f4       	brne	.+30     	; 0xfdc <done+0xb6>
     fbe:	21 96       	adiw	r28, 0x01	; 1
     fc0:	c6 17       	cp	r28, r22
     fc2:	d7 07       	cpc	r29, r23
     fc4:	08 f0       	brcs	.+2      	; 0xfc8 <done+0xa2>
     fc6:	4c c0       	rjmp	.+152    	; 0x1060 <done+0x13a>
     fc8:	fd 01       	movw	r30, r26
     fca:	ec 0f       	add	r30, r28
     fcc:	fd 1f       	adc	r31, r29
     fce:	10 82       	st	Z, r1
     fd0:	14 2f       	mov	r17, r20
     fd2:	49 2f       	mov	r20, r25
     fd4:	50 e8       	ldi	r21, 0x80	; 128
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <done+0xba>
     fd8:	49 2f       	mov	r20, r25
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <done+0xba>
     fdc:	14 2f       	mov	r17, r20
     fde:	49 2f       	mov	r20, r25
     fe0:	2f 5f       	subi	r18, 0xFF	; 255
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	21 38       	cpi	r18, 0x81	; 129
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	38 07       	cpc	r19, r24
     fea:	69 f6       	brne	.-102    	; 0xf86 <done+0x60>
     fec:	be 01       	movw	r22, r28
     fee:	1c 16       	cp	r1, r28
     ff0:	1d 06       	cpc	r1, r29
     ff2:	0c f0       	brlt	.+2      	; 0xff6 <done+0xd0>
     ff4:	3f c0       	rjmp	.+126    	; 0x1074 <done+0x14e>
     ff6:	61 50       	subi	r22, 0x01	; 1
     ff8:	71 09       	sbc	r23, r1
     ffa:	cb 01       	movw	r24, r22
     ffc:	83 70       	andi	r24, 0x03	; 3
     ffe:	99 27       	eor	r25, r25
    1000:	89 2b       	or	r24, r25
    1002:	29 f5       	brne	.+74     	; 0x104e <done+0x128>
    1004:	fd 01       	movw	r30, r26
    1006:	ca 0f       	add	r28, r26
    1008:	db 1f       	adc	r29, r27
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	2d 91       	ld	r18, X+
    100e:	92 27       	eor	r25, r18
    1010:	ca 17       	cp	r28, r26
    1012:	db 07       	cpc	r29, r27
    1014:	d9 f7       	brne	.-10     	; 0x100c <done+0xe6>
    1016:	91 11       	cpse	r25, r1
    1018:	1d c0       	rjmp	.+58     	; 0x1054 <done+0x12e>
    101a:	16 16       	cp	r1, r22
    101c:	17 06       	cpc	r1, r23
    101e:	54 f5       	brge	.+84     	; 0x1074 <done+0x14e>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	93 81       	ldd	r25, Z+3	; 0x03
    1026:	80 81       	ld	r24, Z
    1028:	83 83       	std	Z+3, r24	; 0x03
    102a:	90 83       	st	Z, r25
    102c:	92 81       	ldd	r25, Z+2	; 0x02
    102e:	41 81       	ldd	r20, Z+1	; 0x01
    1030:	42 83       	std	Z+2, r20	; 0x02
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	2c 5f       	subi	r18, 0xFC	; 252
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	34 96       	adiw	r30, 0x04	; 4
    103a:	26 17       	cp	r18, r22
    103c:	37 07       	cpc	r19, r23
    103e:	94 f3       	brlt	.-28     	; 0x1024 <done+0xfe>
    1040:	19 c0       	rjmp	.+50     	; 0x1074 <done+0x14e>
    1042:	6f ef       	ldi	r22, 0xFF	; 255
    1044:	7f ef       	ldi	r23, 0xFF	; 255
    1046:	16 c0       	rjmp	.+44     	; 0x1074 <done+0x14e>
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	13 c0       	rjmp	.+38     	; 0x1074 <done+0x14e>
    104e:	6e ef       	ldi	r22, 0xFE	; 254
    1050:	7f ef       	ldi	r23, 0xFF	; 255
    1052:	10 c0       	rjmp	.+32     	; 0x1074 <done+0x14e>
    1054:	6e ef       	ldi	r22, 0xFE	; 254
    1056:	7f ef       	ldi	r23, 0xFF	; 255
    1058:	0d c0       	rjmp	.+26     	; 0x1074 <done+0x14e>
    105a:	6f ef       	ldi	r22, 0xFF	; 255
    105c:	7f ef       	ldi	r23, 0xFF	; 255
    105e:	0a c0       	rjmp	.+20     	; 0x1074 <done+0x14e>
    1060:	6d ef       	ldi	r22, 0xFD	; 253
    1062:	7f ef       	ldi	r23, 0xFF	; 255
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <done+0x14e>
    1066:	1c 92       	st	X, r1
    1068:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <maplebuf>
    106c:	4c 70       	andi	r20, 0x0C	; 12
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	85 cf       	rjmp	.-246    	; 0xf7e <done+0x58>
    1074:	cb 01       	movw	r24, r22
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	08 95       	ret

00001080 <maple_sendRaw_P>:
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	5c 01       	movw	r10, r24
    109a:	7b 01       	movw	r14, r22
    109c:	04 2f       	mov	r16, r20
    109e:	9b b1       	in	r25, 0x0b	; 11
    10a0:	9c 60       	ori	r25, 0x0C	; 12
    10a2:	9b b9       	out	0x0b, r25	; 11
    10a4:	9a b1       	in	r25, 0x0a	; 10
    10a6:	9c 60       	ori	r25, 0x0C	; 12
    10a8:	9a b9       	out	0x0a, r25	; 10
    10aa:	8c e0       	ldi	r24, 0x0C	; 12
    10ac:	8b b9       	out	0x0b, r24	; 11
    10ae:	98 e0       	ldi	r25, 0x08	; 8
    10b0:	9b b9       	out	0x0b, r25	; 11
    10b2:	25 e0       	ldi	r18, 0x05	; 5
    10b4:	2a 95       	dec	r18
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <maple_sendRaw_P+0x34>
    10b8:	00 00       	nop
    10ba:	1b b8       	out	0x0b, r1	; 11
    10bc:	e5 e0       	ldi	r30, 0x05	; 5
    10be:	ea 95       	dec	r30
    10c0:	f1 f7       	brne	.-4      	; 0x10be <maple_sendRaw_P+0x3e>
    10c2:	00 00       	nop
    10c4:	9b b9       	out	0x0b, r25	; 11
    10c6:	f5 e0       	ldi	r31, 0x05	; 5
    10c8:	fa 95       	dec	r31
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <maple_sendRaw_P+0x48>
    10cc:	00 00       	nop
    10ce:	1b b8       	out	0x0b, r1	; 11
    10d0:	25 e0       	ldi	r18, 0x05	; 5
    10d2:	2a 95       	dec	r18
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <maple_sendRaw_P+0x52>
    10d6:	00 00       	nop
    10d8:	9b b9       	out	0x0b, r25	; 11
    10da:	e5 e0       	ldi	r30, 0x05	; 5
    10dc:	ea 95       	dec	r30
    10de:	f1 f7       	brne	.-4      	; 0x10dc <maple_sendRaw_P+0x5c>
    10e0:	00 00       	nop
    10e2:	1b b8       	out	0x0b, r1	; 11
    10e4:	f5 e0       	ldi	r31, 0x05	; 5
    10e6:	fa 95       	dec	r31
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <maple_sendRaw_P+0x66>
    10ea:	00 00       	nop
    10ec:	9b b9       	out	0x0b, r25	; 11
    10ee:	25 e0       	ldi	r18, 0x05	; 5
    10f0:	2a 95       	dec	r18
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <maple_sendRaw_P+0x70>
    10f4:	00 00       	nop
    10f6:	1b b8       	out	0x0b, r1	; 11
    10f8:	e5 e0       	ldi	r30, 0x05	; 5
    10fa:	ea 95       	dec	r30
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <maple_sendRaw_P+0x7a>
    10fe:	00 00       	nop
    1100:	9b b9       	out	0x0b, r25	; 11
    1102:	f5 e0       	ldi	r31, 0x05	; 5
    1104:	fa 95       	dec	r31
    1106:	f1 f7       	brne	.-4      	; 0x1104 <maple_sendRaw_P+0x84>
    1108:	00 00       	nop
    110a:	8b b9       	out	0x0b, r24	; 11
    110c:	25 e0       	ldi	r18, 0x05	; 5
    110e:	2a 95       	dec	r18
    1110:	f1 f7       	brne	.-4      	; 0x110e <maple_sendRaw_P+0x8e>
    1112:	00 00       	nop
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	8b b9       	out	0x0b, r24	; 11
    1118:	e5 01       	movw	r28, r10
    111a:	84 e0       	ldi	r24, 0x04	; 4
    111c:	a8 0e       	add	r10, r24
    111e:	b1 1c       	adc	r11, r1
    1120:	c1 2c       	mov	r12, r1
    1122:	4e 01       	movw	r8, r28
    1124:	89 91       	ld	r24, Y+
    1126:	6d d9       	rcall	.-3366   	; 0x402 <maple_sendByte>
    1128:	f4 01       	movw	r30, r8
    112a:	80 81       	ld	r24, Z
    112c:	c8 26       	eor	r12, r24
    112e:	ac 16       	cp	r10, r28
    1130:	bd 06       	cpc	r11, r29
    1132:	b9 f7       	brne	.-18     	; 0x1122 <maple_sendRaw_P+0xa2>
    1134:	10 e0       	ldi	r17, 0x00	; 0
    1136:	10 16       	cp	r1, r16
    1138:	11 06       	cpc	r1, r17
    113a:	fc f4       	brge	.+62     	; 0x117a <maple_sendRaw_P+0xfa>
    113c:	c0 e0       	ldi	r28, 0x00	; 0
    113e:	d0 e0       	ldi	r29, 0x00	; 0
    1140:	fe 01       	movw	r30, r28
    1142:	ec 7f       	andi	r30, 0xFC	; 252
    1144:	ff 27       	eor	r31, r31
    1146:	33 96       	adiw	r30, 0x03	; 3
    1148:	ce 01       	movw	r24, r28
    114a:	83 70       	andi	r24, 0x03	; 3
    114c:	99 27       	eor	r25, r25
    114e:	e8 1b       	sub	r30, r24
    1150:	f9 0b       	sbc	r31, r25
    1152:	ee 0d       	add	r30, r14
    1154:	ff 1d       	adc	r31, r15
    1156:	d4 90       	lpm	r13, Z
    1158:	8d 2d       	mov	r24, r13
    115a:	53 d9       	rcall	.-3418   	; 0x402 <maple_sendByte>
    115c:	cd 24       	eor	r12, r13
    115e:	20 97       	sbiw	r28, 0x00	; 0
    1160:	41 f0       	breq	.+16     	; 0x1172 <maple_sendRaw_P+0xf2>
    1162:	ce 01       	movw	r24, r28
    1164:	87 70       	andi	r24, 0x07	; 7
    1166:	99 27       	eor	r25, r25
    1168:	89 2b       	or	r24, r25
    116a:	19 f4       	brne	.+6      	; 0x1172 <maple_sendRaw_P+0xf2>
    116c:	f0 ea       	ldi	r31, 0xA0	; 160
    116e:	fa 95       	dec	r31
    1170:	f1 f7       	brne	.-4      	; 0x116e <maple_sendRaw_P+0xee>
    1172:	21 96       	adiw	r28, 0x01	; 1
    1174:	c0 17       	cp	r28, r16
    1176:	d1 07       	cpc	r29, r17
    1178:	19 f7       	brne	.-58     	; 0x1140 <maple_sendRaw_P+0xc0>
    117a:	8c 2d       	mov	r24, r12
    117c:	42 d9       	rcall	.-3452   	; 0x402 <maple_sendByte>
    117e:	84 e0       	ldi	r24, 0x04	; 4
    1180:	8b b9       	out	0x0b, r24	; 11
    1182:	25 e0       	ldi	r18, 0x05	; 5
    1184:	2a 95       	dec	r18
    1186:	f1 f7       	brne	.-4      	; 0x1184 <maple_sendRaw_P+0x104>
    1188:	00 00       	nop
    118a:	9c e0       	ldi	r25, 0x0C	; 12
    118c:	9b b9       	out	0x0b, r25	; 11
    118e:	e5 e0       	ldi	r30, 0x05	; 5
    1190:	ea 95       	dec	r30
    1192:	f1 f7       	brne	.-4      	; 0x1190 <maple_sendRaw_P+0x110>
    1194:	00 00       	nop
    1196:	8b b9       	out	0x0b, r24	; 11
    1198:	f5 e0       	ldi	r31, 0x05	; 5
    119a:	fa 95       	dec	r31
    119c:	f1 f7       	brne	.-4      	; 0x119a <maple_sendRaw_P+0x11a>
    119e:	00 00       	nop
    11a0:	1b b8       	out	0x0b, r1	; 11
    11a2:	25 e0       	ldi	r18, 0x05	; 5
    11a4:	2a 95       	dec	r18
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <maple_sendRaw_P+0x124>
    11a8:	00 00       	nop
    11aa:	8b b9       	out	0x0b, r24	; 11
    11ac:	e5 e0       	ldi	r30, 0x05	; 5
    11ae:	ea 95       	dec	r30
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <maple_sendRaw_P+0x12e>
    11b2:	00 00       	nop
    11b4:	1b b8       	out	0x0b, r1	; 11
    11b6:	f5 e0       	ldi	r31, 0x05	; 5
    11b8:	fa 95       	dec	r31
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <maple_sendRaw_P+0x138>
    11bc:	00 00       	nop
    11be:	8b b9       	out	0x0b, r24	; 11
    11c0:	25 e0       	ldi	r18, 0x05	; 5
    11c2:	2a 95       	dec	r18
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <maple_sendRaw_P+0x142>
    11c6:	00 00       	nop
    11c8:	9b b9       	out	0x0b, r25	; 11
    11ca:	8b b1       	in	r24, 0x0b	; 11
    11cc:	8c 60       	ori	r24, 0x0C	; 12
    11ce:	8b b9       	out	0x0b, r24	; 11
    11d0:	8a b1       	in	r24, 0x0a	; 10
    11d2:	83 7f       	andi	r24, 0xF3	; 243
    11d4:	8a b9       	out	0x0a, r24	; 10
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	cf 90       	pop	r12
    11e6:	bf 90       	pop	r11
    11e8:	af 90       	pop	r10
    11ea:	9f 90       	pop	r9
    11ec:	8f 90       	pop	r8
    11ee:	08 95       	ret

000011f0 <maple_sendRaw>:
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <buf_used>
    11fe:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <buf_phase>
    1202:	66 23       	and	r22, r22
    1204:	09 f4       	brne	.+2      	; 0x1208 <maple_sendRaw+0x18>
    1206:	42 c0       	rjmp	.+132    	; 0x128c <maple_sendRaw+0x9c>
    1208:	dc 01       	movw	r26, r24
    120a:	ec 01       	movw	r28, r24
    120c:	c6 0f       	add	r28, r22
    120e:	d1 1d       	adc	r29, r1
    1210:	79 e0       	ldi	r23, 0x09	; 9
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	68 94       	set
    1216:	ff 24       	eor	r15, r15
    1218:	f2 f8       	bld	r15, 2
    121a:	08 e0       	ldi	r16, 0x08	; 8
    121c:	11 e0       	ldi	r17, 0x01	; 1
    121e:	32 c0       	rjmp	.+100    	; 0x1284 <maple_sendRaw+0x94>
    1220:	58 2f       	mov	r21, r24
    1222:	2f ef       	ldi	r18, 0xFF	; 255
    1224:	25 0f       	add	r18, r21
    1226:	9c 91       	ld	r25, X
    1228:	94 23       	and	r25, r20
    122a:	60 ff       	sbrs	r22, 0
    122c:	0e c0       	rjmp	.+28     	; 0x124a <maple_sendRaw+0x5a>
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	f9 01       	movw	r30, r18
    1232:	ea 5d       	subi	r30, 0xDA	; 218
    1234:	fe 4f       	sbci	r31, 0xFE	; 254
    1236:	00 83       	st	Z, r16
    1238:	99 23       	and	r25, r25
    123a:	a1 f0       	breq	.+40     	; 0x1264 <maple_sendRaw+0x74>
    123c:	f9 01       	movw	r30, r18
    123e:	ea 5d       	subi	r30, 0xDA	; 218
    1240:	fe 4f       	sbci	r31, 0xFE	; 254
    1242:	80 81       	ld	r24, Z
    1244:	84 60       	ori	r24, 0x04	; 4
    1246:	80 83       	st	Z, r24
    1248:	0d c0       	rjmp	.+26     	; 0x1264 <maple_sendRaw+0x74>
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	f9 01       	movw	r30, r18
    124e:	ea 5d       	subi	r30, 0xDA	; 218
    1250:	fe 4f       	sbci	r31, 0xFE	; 254
    1252:	f0 82       	st	Z, r15
    1254:	99 23       	and	r25, r25
    1256:	31 f0       	breq	.+12     	; 0x1264 <maple_sendRaw+0x74>
    1258:	f9 01       	movw	r30, r18
    125a:	ea 5d       	subi	r30, 0xDA	; 218
    125c:	fe 4f       	sbci	r31, 0xFE	; 254
    125e:	80 81       	ld	r24, Z
    1260:	88 60       	ori	r24, 0x08	; 8
    1262:	80 83       	st	Z, r24
    1264:	61 27       	eor	r22, r17
    1266:	46 95       	lsr	r20
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	85 0f       	add	r24, r21
    126c:	78 13       	cpse	r23, r24
    126e:	d8 cf       	rjmp	.-80     	; 0x1220 <maple_sendRaw+0x30>
    1270:	78 5f       	subi	r23, 0xF8	; 248
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	ac 17       	cp	r26, r28
    1276:	bd 07       	cpc	r27, r29
    1278:	29 f4       	brne	.+10     	; 0x1284 <maple_sendRaw+0x94>
    127a:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <buf_phase>
    127e:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <buf_used>
    1282:	04 c0       	rjmp	.+8      	; 0x128c <maple_sendRaw+0x9c>
    1284:	58 ef       	ldi	r21, 0xF8	; 248
    1286:	57 0f       	add	r21, r23
    1288:	40 e8       	ldi	r20, 0x80	; 128
    128a:	cb cf       	rjmp	.-106    	; 0x1222 <maple_sendRaw+0x32>
    128c:	8b b1       	in	r24, 0x0b	; 11
    128e:	8c 60       	ori	r24, 0x0C	; 12
    1290:	8b b9       	out	0x0b, r24	; 11
    1292:	8a b1       	in	r24, 0x0a	; 10
    1294:	8c 60       	ori	r24, 0x0C	; 12
    1296:	8a b9       	out	0x0a, r24	; 10
    1298:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <buf_used>
    129c:	86 95       	lsr	r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	e6 e2       	ldi	r30, 0x26	; 38
    12a2:	f1 e0       	ldi	r31, 0x01	; 1
    12a4:	ff 93       	push	r31
    12a6:	ef 93       	push	r30
    12a8:	38 2f       	mov	r19, r24
    12aa:	44 e0       	ldi	r20, 0x04	; 4
    12ac:	58 e0       	ldi	r21, 0x08	; 8
    12ae:	01 91       	ld	r16, Z+
    12b0:	5a 9a       	sbi	0x0b, 2	; 11
    12b2:	5b 9a       	sbi	0x0b, 3	; 11
	...
    12c4:	5a 98       	cbi	0x0b, 2	; 11
	...
    12ce:	5b 98       	cbi	0x0b, 3	; 11
    12d0:	00 00       	nop
    12d2:	00 00       	nop
    12d4:	00 00       	nop
    12d6:	5b 9a       	sbi	0x0b, 3	; 11
    12d8:	00 00       	nop
    12da:	00 00       	nop
    12dc:	00 00       	nop
    12de:	5b 98       	cbi	0x0b, 3	; 11
    12e0:	00 00       	nop
    12e2:	00 00       	nop
    12e4:	00 00       	nop
    12e6:	5b 9a       	sbi	0x0b, 3	; 11
    12e8:	00 00       	nop
    12ea:	00 00       	nop
    12ec:	00 00       	nop
    12ee:	5b 98       	cbi	0x0b, 3	; 11
    12f0:	00 00       	nop
    12f2:	00 00       	nop
    12f4:	00 00       	nop
    12f6:	5b 9a       	sbi	0x0b, 3	; 11
    12f8:	00 00       	nop
    12fa:	00 00       	nop
    12fc:	00 00       	nop
    12fe:	5b 98       	cbi	0x0b, 3	; 11
    1300:	00 00       	nop
    1302:	00 00       	nop
    1304:	00 00       	nop
    1306:	5b 9a       	sbi	0x0b, 3	; 11
	...
    1310:	00 00       	nop
    1312:	5a 9a       	sbi	0x0b, 2	; 11
    1314:	5b 98       	cbi	0x0b, 3	; 11

00001316 <next_byte>:
    1316:	4b b9       	out	0x0b, r20	; 11
    1318:	0b b9       	out	0x0b, r16	; 11
    131a:	5a 98       	cbi	0x0b, 2	; 11
    131c:	01 91       	ld	r16, Z+
    131e:	5b b9       	out	0x0b, r21	; 11
    1320:	0b b9       	out	0x0b, r16	; 11
    1322:	5b 98       	cbi	0x0b, 3	; 11
    1324:	01 91       	ld	r16, Z+
    1326:	3a 95       	dec	r19
    1328:	b1 f7       	brne	.-20     	; 0x1316 <next_byte>
    132a:	5a 9a       	sbi	0x0b, 2	; 11
	...
    1334:	5b 9a       	sbi	0x0b, 3	; 11
    1336:	5b 98       	cbi	0x0b, 3	; 11
    1338:	00 00       	nop
    133a:	00 00       	nop
    133c:	00 00       	nop
    133e:	5a 98       	cbi	0x0b, 2	; 11
    1340:	00 00       	nop
    1342:	00 00       	nop
    1344:	00 00       	nop
    1346:	5a 9a       	sbi	0x0b, 2	; 11
    1348:	00 00       	nop
    134a:	00 00       	nop
    134c:	00 00       	nop
    134e:	5a 98       	cbi	0x0b, 2	; 11
    1350:	00 00       	nop
    1352:	00 00       	nop
    1354:	00 00       	nop
    1356:	5a 9a       	sbi	0x0b, 2	; 11
    1358:	00 00       	nop
    135a:	00 00       	nop
    135c:	00 00       	nop
    135e:	5b 9a       	sbi	0x0b, 3	; 11
    1360:	ef 91       	pop	r30
    1362:	ff 91       	pop	r31
    1364:	8b b1       	in	r24, 0x0b	; 11
    1366:	8c 60       	ori	r24, 0x0C	; 12
    1368:	8b b9       	out	0x0b, r24	; 11
    136a:	8a b1       	in	r24, 0x0a	; 10
    136c:	83 7f       	andi	r24, 0xF3	; 243
    136e:	8a b9       	out	0x0a, r24	; 10
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	08 95       	ret

0000137c <maple_sendFrame_P>:
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	00 d0       	rcall	.+0      	; 0x1386 <maple_sendFrame_P+0xa>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <maple_sendFrame_P+0xc>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	f9 01       	movw	r30, r18
    138e:	f5 95       	asr	r31
    1390:	e7 95       	ror	r30
    1392:	f5 95       	asr	r31
    1394:	e7 95       	ror	r30
    1396:	e9 83       	std	Y+1, r30	; 0x01
    1398:	4a 83       	std	Y+2, r20	; 0x02
    139a:	6b 83       	std	Y+3, r22	; 0x03
    139c:	8c 83       	std	Y+4, r24	; 0x04
    139e:	42 2f       	mov	r20, r18
    13a0:	b8 01       	movw	r22, r16
    13a2:	ce 01       	movw	r24, r28
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	6c de       	rcall	.-808    	; 0x1080 <maple_sendRaw_P>
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	08 95       	ret

000013ba <maple_sendFrame>:
    13ba:	6f 92       	push	r6
    13bc:	7f 92       	push	r7
    13be:	8f 92       	push	r8
    13c0:	9f 92       	push	r9
    13c2:	af 92       	push	r10
    13c4:	bf 92       	push	r11
    13c6:	cf 92       	push	r12
    13c8:	df 92       	push	r13
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	49 01       	movw	r8, r18
    13dc:	ad b6       	in	r10, 0x3d	; 61
    13de:	be b6       	in	r11, 0x3e	; 62
    13e0:	69 01       	movw	r12, r18
    13e2:	25 e0       	ldi	r18, 0x05	; 5
    13e4:	c2 0e       	add	r12, r18
    13e6:	d1 1c       	adc	r13, r1
    13e8:	34 01       	movw	r6, r8
    13ea:	34 e0       	ldi	r19, 0x04	; 4
    13ec:	63 0e       	add	r6, r19
    13ee:	71 1c       	adc	r7, r1
    13f0:	ed b7       	in	r30, 0x3d	; 61
    13f2:	fe b7       	in	r31, 0x3e	; 62
    13f4:	ec 19       	sub	r30, r12
    13f6:	fd 09       	sbc	r31, r13
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	fe bf       	out	0x3e, r31	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	ed bf       	out	0x3d, r30	; 61
    1402:	2d b7       	in	r18, 0x3d	; 61
    1404:	3e b7       	in	r19, 0x3e	; 62
    1406:	2f 5f       	subi	r18, 0xFF	; 255
    1408:	3f 4f       	sbci	r19, 0xFF	; 255
    140a:	79 01       	movw	r14, r18
    140c:	94 01       	movw	r18, r8
    140e:	35 95       	asr	r19
    1410:	27 95       	ror	r18
    1412:	35 95       	asr	r19
    1414:	27 95       	ror	r18
    1416:	21 83       	std	Z+1, r18	; 0x01
    1418:	f7 01       	movw	r30, r14
    141a:	41 83       	std	Z+1, r20	; 0x01
    141c:	62 83       	std	Z+2, r22	; 0x02
    141e:	83 83       	std	Z+3, r24	; 0x03
    1420:	81 14       	cp	r8, r1
    1422:	91 04       	cpc	r9, r1
    1424:	31 f0       	breq	.+12     	; 0x1432 <maple_sendFrame+0x78>
    1426:	a4 01       	movw	r20, r8
    1428:	b8 01       	movw	r22, r16
    142a:	c7 01       	movw	r24, r14
    142c:	04 96       	adiw	r24, 0x04	; 4
    142e:	0e 94 32 14 	call	0x2864	; 0x2864 <memcpy>
    1432:	16 14       	cp	r1, r6
    1434:	17 04       	cpc	r1, r7
    1436:	74 f4       	brge	.+28     	; 0x1454 <maple_sendFrame+0x9a>
    1438:	f7 01       	movw	r30, r14
    143a:	24 e0       	ldi	r18, 0x04	; 4
    143c:	82 0e       	add	r8, r18
    143e:	91 1c       	adc	r9, r1
    1440:	97 01       	movw	r18, r14
    1442:	28 0d       	add	r18, r8
    1444:	39 1d       	adc	r19, r9
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	91 91       	ld	r25, Z+
    144a:	89 27       	eor	r24, r25
    144c:	e2 17       	cp	r30, r18
    144e:	f3 07       	cpc	r31, r19
    1450:	d9 f7       	brne	.-10     	; 0x1448 <maple_sendFrame+0x8e>
    1452:	03 c0       	rjmp	.+6      	; 0x145a <maple_sendFrame+0xa0>
    1454:	81 2c       	mov	r8, r1
    1456:	91 2c       	mov	r9, r1
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	f7 01       	movw	r30, r14
    145c:	e8 0d       	add	r30, r8
    145e:	f9 1d       	adc	r31, r9
    1460:	80 83       	st	Z, r24
    1462:	6c 2d       	mov	r22, r12
    1464:	c7 01       	movw	r24, r14
    1466:	c4 de       	rcall	.-632    	; 0x11f0 <maple_sendRaw>
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	be be       	out	0x3e, r11	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	ad be       	out	0x3d, r10	; 61
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	af 90       	pop	r10
    1486:	9f 90       	pop	r9
    1488:	8f 90       	pop	r8
    148a:	7f 90       	pop	r7
    148c:	6f 90       	pop	r6
    148e:	08 95       	ret

00001490 <maple_sendFrame1W>:
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	00 d0       	rcall	.+0      	; 0x149a <maple_sendFrame1W+0xa>
    149a:	00 d0       	rcall	.+0      	; 0x149c <maple_sendFrame1W+0xc>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	09 83       	std	Y+1, r16	; 0x01
    14a2:	1a 83       	std	Y+2, r17	; 0x02
    14a4:	2b 83       	std	Y+3, r18	; 0x03
    14a6:	3c 83       	std	Y+4, r19	; 0x04
    14a8:	8e 01       	movw	r16, r28
    14aa:	0f 5f       	subi	r16, 0xFF	; 255
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	24 e0       	ldi	r18, 0x04	; 4
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	83 df       	rcall	.-250    	; 0x13ba <maple_sendFrame>
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	08 95       	ret

000014c6 <Dreamcast_VMS_LCD_Write>:
	return; //Return to call point
}

//Write to the VMS LCD Screen (ID indicates whether to write the Swallowtail Logo or Ethan's Logo
uint8_t Dreamcast_VMS_LCD_Write(char id){
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	6e 97       	sbiw	r28, 0x1e	; 30
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
	//Create a Maple Frame with the bulk write command (Code 12) targeted at the VMS LCD screen ($004)
	unsigned char tmp[30];

	if (lcd_addr) {
    14de:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <lcd_addr>
    14e2:	66 23       	and	r22, r22
    14e4:	91 f0       	breq	.+36     	; 0x150a <Dreamcast_VMS_LCD_Write+0x44>
		maple_sendFrame_P(MAPLE_CMD_BLOCK_WRITE, lcd_addr, MAPLE_DC_ADDR | MAPLE_ADDR_PORTB, 200, id ? lcd_data_boosto : lcd_data_swallowtail);
    14e6:	81 11       	cpse	r24, r1
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <Dreamcast_VMS_LCD_Write+0x2a>
    14ea:	07 e9       	ldi	r16, 0x97	; 151
    14ec:	11 e0       	ldi	r17, 0x01	; 1
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <Dreamcast_VMS_LCD_Write+0x2e>
    14f0:	0f e5       	ldi	r16, 0x5F	; 95
    14f2:	12 e0       	ldi	r17, 0x02	; 2
    14f4:	28 ec       	ldi	r18, 0xC8	; 200
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e4       	ldi	r20, 0x40	; 64
    14fa:	8c e0       	ldi	r24, 0x0C	; 12
    14fc:	3f df       	rcall	.-386    	; 0x137c <maple_sendFrame_P>
		maple_receiveFrame(tmp, 30);
    14fe:	6e e1       	ldi	r22, 0x1E	; 30
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	ce 01       	movw	r24, r28
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	0e 94 78 02 	call	0x4f0	; 0x4f0 <maple_receiveFrame>
	}
	return 0;
}
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	6e 96       	adiw	r28, 0x1e	; 30
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <Joystick_GetStatus>:

//Writes the byte into the device
uint8_t Joystick_GetStatus(ControllerStatus *controller){
    1522:	af 92       	push	r10
    1524:	bf 92       	push	r11
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	ec 97       	sbiw	r28, 0x3c	; 60
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	7c 01       	movw	r14, r24
	unsigned char tmp[30];
	//static unsigned char func_data[4];
	static int lcd_detect_count = 0;
	int v;
	//MapleBusFrame frame;
	switch (state)
    1546:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <state>
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	09 f4       	brne	.+2      	; 0x1550 <Joystick_GetStatus+0x2e>
    154e:	b2 c0       	rjmp	.+356    	; 0x16b4 <Joystick_GetStatus+0x192>
    1550:	28 f4       	brcc	.+10     	; 0x155c <Joystick_GetStatus+0x3a>
    1552:	88 23       	and	r24, r24
    1554:	49 f0       	breq	.+18     	; 0x1568 <Joystick_GetStatus+0x46>
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	a9 f0       	breq	.+42     	; 0x1584 <Joystick_GetStatus+0x62>
    155a:	e7 c0       	rjmp	.+462    	; 0x172a <Joystick_GetStatus+0x208>
    155c:	85 30       	cpi	r24, 0x05	; 5
    155e:	c1 f1       	breq	.+112    	; 0x15d0 <Joystick_GetStatus+0xae>
    1560:	86 30       	cpi	r24, 0x06	; 6
    1562:	09 f4       	brne	.+2      	; 0x1566 <Joystick_GetStatus+0x44>
    1564:	92 c0       	rjmp	.+292    	; 0x168a <Joystick_GetStatus+0x168>
    1566:	e1 c0       	rjmp	.+450    	; 0x172a <Joystick_GetStatus+0x208>
		}
		break;

		case STATE_RESET_DEVICE:
		{
			maple_sendFrame(MAPLE_CMD_RESET_DEVICE,
    1568:	00 e0       	ldi	r16, 0x00	; 0
    156a:	10 e0       	ldi	r17, 0x00	; 0
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	60 e2       	ldi	r22, 0x20	; 32
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	21 df       	rcall	.-446    	; 0x13ba <maple_sendFrame>
			MAPLE_ADDR_MAIN | MAPLE_ADDR_PORTA,
			MAPLE_DC_ADDR, 0, 0x00);
			
			state = STATE_GET_INFO;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <state>
			success = 0x01;
    157e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <success.4410>
		}
		break;
    1582:	d3 c0       	rjmp	.+422    	; 0x172a <Joystick_GetStatus+0x208>

		case STATE_GET_INFO:
		{
			maple_sendFrame(MAPLE_CMD_RQ_DEV_INFO,
    1584:	00 e0       	ldi	r16, 0x00	; 0
    1586:	10 e0       	ldi	r17, 0x00	; 0
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e4       	ldi	r20, 0x40	; 64
    158e:	60 e6       	ldi	r22, 0x60	; 96
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	13 df       	rcall	.-474    	; 0x13ba <maple_sendFrame>
			MAPLE_ADDR_MAIN | MAPLE_ADDR_PORTB,
			MAPLE_DC_ADDR | MAPLE_ADDR_PORTB, 0, 0x00);

			v = maple_receiveFrame(tmp, 30);
    1594:	6e e1       	ldi	r22, 0x1E	; 30
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	ce 01       	movw	r24, r28
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <maple_receiveFrame>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15a0:	ef e3       	ldi	r30, 0x3F	; 63
    15a2:	ff e1       	ldi	r31, 0x1F	; 31
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <Joystick_GetStatus+0x82>
    15a8:	00 c0       	rjmp	.+0      	; 0x15aa <Joystick_GetStatus+0x88>
    15aa:	00 00       	nop

			// Too much data arrives and we stop listening before the controller stop transmitting. The delay
			// here is to wait until the bus is idle again before continuing.
			_delay_ms(2);
			if (v==-2) {
    15ac:	02 96       	adiw	r24, 0x02	; 2
    15ae:	51 f4       	brne	.+20     	; 0x15c4 <Joystick_GetStatus+0xa2>
				// 4-7 Func
				// ...
				
				func = tmp[4] | tmp[5]<<8;
				//If the device connected is a Dreamcast Controller/Then set the connected device as such
				if (func & MAPLE_FUNC_CONTROLLER) {
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	80 ff       	sbrs	r24, 0
    15b4:	07 c0       	rjmp	.+14     	; 0x15c4 <Joystick_GetStatus+0xa2>
					setConnectedDevice(MAPLE_FUNC_CONTROLLER);
					state = STATE_LCD_DETECT;
    15b6:	85 e0       	ldi	r24, 0x05	; 5
    15b8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <state>
					lcd_detect_count = 0;
    15bc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <lcd_detect_count.4413+0x1>
    15c0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <lcd_detect_count.4413>
				}
			}
			success = 0x01;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <success.4410>
			err_count = 0;
    15ca:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <err_count.4411>
		}
		break;
    15ce:	ad c0       	rjmp	.+346    	; 0x172a <Joystick_GetStatus+0x208>
	unsigned char tmp[30];
	//static unsigned char func_data[4];
	static int lcd_detect_count = 0;
	int v;
	//MapleBusFrame frame;
	switch (state)
    15d0:	e1 2c       	mov	r14, r1
    15d2:	f1 2c       	mov	r15, r1
{
	int i, v;
	unsigned char tmp[30];

	for (i=0; i<5; i++) {
		maple_sendFrame(MAPLE_CMD_RQ_DEV_INFO,
    15d4:	aa 24       	eor	r10, r10
    15d6:	a3 94       	inc	r10
    15d8:	b1 2c       	mov	r11, r1
    15da:	b5 01       	movw	r22, r10
    15dc:	0e 2c       	mov	r0, r14
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <Joystick_GetStatus+0xc2>
    15e0:	66 0f       	add	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <Joystick_GetStatus+0xbe>
    15e8:	26 2f       	mov	r18, r22
    15ea:	20 64       	ori	r18, 0x40	; 64
    15ec:	d2 2e       	mov	r13, r18
    15ee:	00 e0       	ldi	r16, 0x00	; 0
    15f0:	10 e0       	ldi	r17, 0x00	; 0
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e4       	ldi	r20, 0x40	; 64
    15f8:	6d 2d       	mov	r22, r13
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	de de       	rcall	.-580    	; 0x13ba <maple_sendFrame>
		MAPLE_ADDR_SUB(i) | MAPLE_ADDR_PORTB,
		MAPLE_DC_ADDR | MAPLE_ADDR_PORTB,
		0, 0x00);
		v =  maple_receiveFrame(tmp, 30);
    15fe:	6e e1       	ldi	r22, 0x1E	; 30
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	ce 01       	movw	r24, r28
    1604:	4f 96       	adiw	r24, 0x1f	; 31
    1606:	0e 94 78 02 	call	0x4f0	; 0x4f0 <maple_receiveFrame>
		if (v==-2) {
    160a:	02 96       	adiw	r24, 0x02	; 2
    160c:	79 f4       	brne	.+30     	; 0x162c <Joystick_GetStatus+0x10a>
    160e:	8f e3       	ldi	r24, 0x3F	; 63
    1610:	9f e1       	ldi	r25, 0x1F	; 31
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <Joystick_GetStatus+0xf0>
    1616:	00 c0       	rjmp	.+0      	; 0x1618 <Joystick_GetStatus+0xf6>
    1618:	00 00       	nop
			_delay_ms(2);
			uint16_t func = tmp[4] | tmp[5]<<8;

			if (func & MAPLE_FUNC_LCD) {
    161a:	8c a1       	ldd	r24, Y+36	; 0x24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	98 2f       	mov	r25, r24
    1620:	88 27       	eor	r24, r24
    1622:	2b a1       	ldd	r18, Y+35	; 0x23
    1624:	82 2b       	or	r24, r18
    1626:	82 fd       	sbrc	r24, 2
				lcd_addr = MAPLE_ADDR_SUB(i) | MAPLE_ADDR_PORTB;
    1628:	d0 92 22 01 	sts	0x0122, r13	; 0x800122 <lcd_addr>
static void checkPeripherals(void)
{
	int i, v;
	unsigned char tmp[30];

	for (i=0; i<5; i++) {
    162c:	9f ef       	ldi	r25, 0xFF	; 255
    162e:	e9 1a       	sub	r14, r25
    1630:	f9 0a       	sbc	r15, r25
    1632:	e5 e0       	ldi	r30, 0x05	; 5
    1634:	ee 16       	cp	r14, r30
    1636:	f1 04       	cpc	r15, r1
    1638:	81 f6       	brne	.-96     	; 0x15da <Joystick_GetStatus+0xb8>
		// Sending the image right away after detection does not
		// seem to work. This delay works around this.
		case STATE_LCD_DETECT:
		{
			checkPeripherals(); //Check to see if the LCD screen is attached
			if (!lcd_addr)
    163a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <lcd_addr>
    163e:	88 23       	and	r24, r24
    1640:	89 f0       	breq	.+34     	; 0x1664 <Joystick_GetStatus+0x142>
			{
				//There is no VMS to write to
			}
			else {
				if (lcd_detect_count > 220) {
    1642:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <lcd_detect_count.4413>
    1646:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <lcd_detect_count.4413+0x1>
    164a:	8d 3d       	cpi	r24, 0xDD	; 221
    164c:	91 05       	cpc	r25, r1
					Dreamcast_VMS_LCD_Write(0);
    164e:	54 f0       	brlt	.+20     	; 0x1664 <Joystick_GetStatus+0x142>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	39 df       	rcall	.-398    	; 0x14c6 <Dreamcast_VMS_LCD_Write>
					state = STATE_BANNER_DISPLAY;
    1654:	86 e0       	ldi	r24, 0x06	; 6
    1656:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <state>
					lcd_detect_count = 0;
    165a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <lcd_detect_count.4413+0x1>
    165e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <lcd_detect_count.4413>
					break;
    1662:	63 c0       	rjmp	.+198    	; 0x172a <Joystick_GetStatus+0x208>
				}
			}
			
			lcd_detect_count++;
    1664:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <lcd_detect_count.4413>
    1668:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <lcd_detect_count.4413+0x1>
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <lcd_detect_count.4413+0x1>
    1672:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <lcd_detect_count.4413>
			if (lcd_detect_count > 400) {
    1676:	81 39       	cpi	r24, 0x91	; 145
    1678:	91 40       	sbci	r25, 0x01	; 1
    167a:	1c f0       	brlt	.+6      	; 0x1682 <Joystick_GetStatus+0x160>
				state = STATE_READ_PAD;
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <state>
			}
			success = 0x01;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <success.4410>
		}
		break;
    1688:	50 c0       	rjmp	.+160    	; 0x172a <Joystick_GetStatus+0x208>

		case STATE_BANNER_DISPLAY:
		{
			lcd_detect_count++;
    168a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <lcd_detect_count.4413>
    168e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <lcd_detect_count.4413+0x1>
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <lcd_detect_count.4413+0x1>
    1698:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <lcd_detect_count.4413>
			if (lcd_detect_count > 400) {
    169c:	81 39       	cpi	r24, 0x91	; 145
    169e:	91 40       	sbci	r25, 0x01	; 1
				Dreamcast_VMS_LCD_Write(1);
    16a0:	2c f0       	brlt	.+10     	; 0x16ac <Joystick_GetStatus+0x18a>
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	10 df       	rcall	.-480    	; 0x14c6 <Dreamcast_VMS_LCD_Write>
				state = STATE_READ_PAD;
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <state>
			}
			success = 0x01;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <success.4410>
		}
		break;
    16b2:	3b c0       	rjmp	.+118    	; 0x172a <Joystick_GetStatus+0x208>
		case STATE_READ_PAD:
		{
			maple_sendFrame1W(MAPLE_CMD_GET_CONDITION, MAPLE_ADDR_PORTB | MAPLE_ADDR_MAIN, MAPLE_DC_ADDR | MAPLE_ADDR_PORTB, MAPLE_FUNC_CONTROLLER);
    16b4:	01 e0       	ldi	r16, 0x01	; 1
    16b6:	10 e0       	ldi	r17, 0x00	; 0
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e4       	ldi	r20, 0x40	; 64
    16be:	60 e6       	ldi	r22, 0x60	; 96
    16c0:	89 e0       	ldi	r24, 0x09	; 9
    16c2:	e6 de       	rcall	.-564    	; 0x1490 <maple_sendFrame1W>

			v = maple_receiveFrame(tmp, 30);
    16c4:	6e e1       	ldi	r22, 0x1E	; 30
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	ce 01       	movw	r24, r28
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	0e 94 78 02 	call	0x4f0	; 0x4f0 <maple_receiveFrame>
			//Register any errors involved with receiving that frame of data
			if (v<=0) {
    16d0:	18 16       	cp	r1, r24
    16d2:	19 06       	cpc	r1, r25
    16d4:	64 f0       	brlt	.+24     	; 0x16ee <Joystick_GetStatus+0x1cc>
				err_count++;
    16d6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <err_count.4411>
    16da:	8f 5f       	subi	r24, 0xFF	; 255
    16dc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <err_count.4411>
				//If the amount of errors passes a threshold return an error code 
				if (err_count > MAX_ERRORS) {
    16e0:	85 36       	cpi	r24, 0x65	; 101
    16e2:	30 f1       	brcs	.+76     	; 0x1730 <Joystick_GetStatus+0x20e>
					state = STATE_GET_INFO; //We need to re-capture the device information
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <state>
				}
				return 0x00;
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	24 c0       	rjmp	.+72     	; 0x1736 <Joystick_GetStatus+0x214>
			}
			err_count = 0;
    16ee:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <err_count.4411>

			if (v < 16){
    16f2:	40 97       	sbiw	r24, 0x10	; 16
    16f4:	fc f0       	brlt	.+62     	; 0x1734 <Joystick_GetStatus+0x212>
				return 0x00;
			}

			controller->joyx = tmp[12]; // 12 : Joy X axis
    16f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f8:	f7 01       	movw	r30, r14
    16fa:	84 83       	std	Z+4, r24	; 0x04
			controller->joyy = tmp[13]; // 13 : Joy Y axis
    16fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    16fe:	85 83       	std	Z+5, r24	; 0x05
			controller->rtrigger = tmp[10] / 2 + 0x80; // 10 : R trig
    1700:	8b 85       	ldd	r24, Y+11	; 0x0b
    1702:	86 95       	lsr	r24
    1704:	80 58       	subi	r24, 0x80	; 128
    1706:	82 83       	std	Z+2, r24	; 0x02
			controller->ltrigger = tmp[11] / 2 + 0x80; // 11 : L trig
    1708:	8c 85       	ldd	r24, Y+12	; 0x0c
    170a:	86 95       	lsr	r24
    170c:	80 58       	subi	r24, 0x80	; 128
    170e:	83 83       	std	Z+3, r24	; 0x03
			controller->buttons = (uint16_t)((tmp[9] ^ 0xff) << 8) | ((tmp[8] ^ 0xff) & 0xFF); // 8 : Buttons
    1710:	8a 85       	ldd	r24, Y+10	; 0x0a
    1712:	80 95       	com	r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	98 2f       	mov	r25, r24
    1718:	88 27       	eor	r24, r24
    171a:	29 85       	ldd	r18, Y+9	; 0x09
    171c:	20 95       	com	r18
    171e:	82 2b       	or	r24, r18
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
			success = 0x01;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <success.4410>
		}
		break;
		}
	
	return success;
    172a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <success.4410>
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <Joystick_GetStatus+0x214>
				err_count++;
				//If the amount of errors passes a threshold return an error code 
				if (err_count > MAX_ERRORS) {
					state = STATE_GET_INFO; //We need to re-capture the device information
				}
				return 0x00;
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <Joystick_GetStatus+0x214>
			}
			err_count = 0;

			if (v < 16){
				return 0x00;
    1734:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
		}
	
	return success;
}
    1736:	ec 96       	adiw	r28, 0x3c	; 60
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	bf 90       	pop	r11
    1752:	af 90       	pop	r10
    1754:	08 95       	ret

00001756 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    1756:	84 b7       	in	r24, 0x34	; 52
    1758:	87 7f       	andi	r24, 0xF7	; 247
    175a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	a8 95       	wdr
    1762:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1766:	88 61       	ori	r24, 0x18	; 24
    1768:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    176c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    1770:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	80 e8       	ldi	r24, 0x80	; 128
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    177e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1782:	0f be       	out	0x3f, r0	; 63

//Initialize the USI on the ATmega168/328 for Three-Wire Operation
void Joystick_Init(){
	
	//Initialize the Maple Bus Connection
	maple_init();
    1784:	0e 94 73 02 	call	0x4e6	; 0x4e6 <maple_init>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	Joystick_Init();
	USB_Init();
    1788:	ed c5       	rjmp	.+3034   	; 0x2364 <USB_Init>
    178a:	08 95       	ret

0000178c <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
    178c:	e4 df       	rcall	.-56     	; 0x1756 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    178e:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&Joystick_HID_Interface);
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	f0 d1       	rcall	.+992    	; 0x1b76 <HID_Device_USBTask>
		USB_USBTask();
    1796:	0e 94 0b 14 	call	0x2816	; 0x2816 <USB_USBTask>
    179a:	fa cf       	rjmp	.-12     	; 0x1790 <main+0x4>

0000179c <EVENT_USB_Device_Connect>:
	USB_Init();
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    179c:	08 95       	ret

0000179e <EVENT_USB_Device_Disconnect>:
	
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    179e:	08 95       	ret

000017a0 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	d4 d1       	rcall	.+936    	; 0x1b4e <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    17a6:	e2 ee       	ldi	r30, 0xE2	; 226
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	84 60       	ori	r24, 0x04	; 4
    17ae:	80 83       	st	Z, r24
    17b0:	08 95       	ret

000017b2 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	82 c0       	rjmp	.+260    	; 0x18bc <HID_Device_ProcessControlRequest>
    17b8:	08 95       	ret

000017ba <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    17ba:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Joystick_HID_Interface+0xe>
    17be:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Joystick_HID_Interface+0xf>
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	29 f0       	breq	.+10     	; 0x17d0 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Joystick_HID_Interface+0xf>
    17cc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Joystick_HID_Interface+0xe>
    17d0:	08 95       	ret

000017d2 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	e9 01       	movw	r28, r18
	USB_JoystickReport_Data_t* JoystickReport = (USB_JoystickReport_Data_t*)ReportData;

	//Get the controller status
	static ControllerStatus controller;
	
	uint8_t success = Joystick_GetStatus(&controller);
    17dc:	80 e1       	ldi	r24, 0x10	; 16
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	a0 de       	rcall	.-704    	; 0x1522 <Joystick_GetStatus>
	//Create controller report based on read
	if(success){	
    17e2:	88 23       	and	r24, r24
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <CALLBACK_HID_Device_CreateHIDReport+0x16>
    17e6:	63 c0       	rjmp	.+198    	; 0x18ae <CALLBACK_HID_Device_CreateHIDReport+0xdc>
		//Fill in the report
		if (controller.buttons & (1<<DC_A))
    17e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
    17ec:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
    17f0:	82 ff       	sbrs	r24, 2
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <CALLBACK_HID_Device_CreateHIDReport+0x26>
			JoystickReport->Button = (1 << 0);
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	2d 83       	std	Y+5, r18	; 0x05
		if (controller.buttons & (1<<DC_B))
    17f8:	81 ff       	sbrs	r24, 1
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <CALLBACK_HID_Device_CreateHIDReport+0x30>
			JoystickReport->Button |= (1 << 1);
    17fc:	2d 81       	ldd	r18, Y+5	; 0x05
    17fe:	22 60       	ori	r18, 0x02	; 2
    1800:	2d 83       	std	Y+5, r18	; 0x05
		if (controller.buttons & (1<<DC_X))
    1802:	92 ff       	sbrs	r25, 2
    1804:	03 c0       	rjmp	.+6      	; 0x180c <CALLBACK_HID_Device_CreateHIDReport+0x3a>
			JoystickReport->Button |= (1 << 2);
    1806:	2d 81       	ldd	r18, Y+5	; 0x05
    1808:	24 60       	ori	r18, 0x04	; 4
    180a:	2d 83       	std	Y+5, r18	; 0x05
		if (controller.buttons & (1<<DC_Y))
    180c:	91 ff       	sbrs	r25, 1
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <CALLBACK_HID_Device_CreateHIDReport+0x44>
			JoystickReport->Button |= (1 << 3);
    1810:	2d 81       	ldd	r18, Y+5	; 0x05
    1812:	28 60       	ori	r18, 0x08	; 8
    1814:	2d 83       	std	Y+5, r18	; 0x05
		if (controller.buttons & (1<<DC_STRT))
    1816:	83 ff       	sbrs	r24, 3
    1818:	03 c0       	rjmp	.+6      	; 0x1820 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
			JoystickReport->Button |= (1 << 4);
    181a:	2d 81       	ldd	r18, Y+5	; 0x05
    181c:	20 61       	ori	r18, 0x10	; 16
    181e:	2d 83       	std	Y+5, r18	; 0x05
		int8_t dpad = ((controller.buttons & 0x00F0)>>4);
		switch (dpad)
    1820:	80 7f       	andi	r24, 0xF0	; 240
    1822:	99 27       	eor	r25, r25
    1824:	92 95       	swap	r25
    1826:	82 95       	swap	r24
    1828:	8f 70       	andi	r24, 0x0F	; 15
    182a:	89 27       	eor	r24, r25
    182c:	9f 70       	andi	r25, 0x0F	; 15
    182e:	89 27       	eor	r24, r25
    1830:	85 30       	cpi	r24, 0x05	; 5
    1832:	d9 f0       	breq	.+54     	; 0x186a <CALLBACK_HID_Device_CreateHIDReport+0x98>
    1834:	3c f4       	brge	.+14     	; 0x1844 <CALLBACK_HID_Device_CreateHIDReport+0x72>
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	81 f0       	breq	.+32     	; 0x185a <CALLBACK_HID_Device_CreateHIDReport+0x88>
    183a:	84 30       	cpi	r24, 0x04	; 4
    183c:	99 f0       	breq	.+38     	; 0x1864 <CALLBACK_HID_Device_CreateHIDReport+0x92>
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	19 f5       	brne	.+70     	; 0x1888 <CALLBACK_HID_Device_CreateHIDReport+0xb6>
    1842:	16 c0       	rjmp	.+44     	; 0x1870 <CALLBACK_HID_Device_CreateHIDReport+0x9e>
    1844:	88 30       	cpi	r24, 0x08	; 8
    1846:	d1 f0       	breq	.+52     	; 0x187c <CALLBACK_HID_Device_CreateHIDReport+0xaa>
    1848:	1c f4       	brge	.+6      	; 0x1850 <CALLBACK_HID_Device_CreateHIDReport+0x7e>
    184a:	86 30       	cpi	r24, 0x06	; 6
    184c:	41 f0       	breq	.+16     	; 0x185e <CALLBACK_HID_Device_CreateHIDReport+0x8c>
    184e:	1c c0       	rjmp	.+56     	; 0x1888 <CALLBACK_HID_Device_CreateHIDReport+0xb6>
    1850:	89 30       	cpi	r24, 0x09	; 9
    1852:	89 f0       	breq	.+34     	; 0x1876 <CALLBACK_HID_Device_CreateHIDReport+0xa4>
    1854:	8a 30       	cpi	r24, 0x0A	; 10
    1856:	a9 f0       	breq	.+42     	; 0x1882 <CALLBACK_HID_Device_CreateHIDReport+0xb0>
    1858:	17 c0       	rjmp	.+46     	; 0x1888 <CALLBACK_HID_Device_CreateHIDReport+0xb6>
		{
			case 0x02:
			//Down
			JoystickReport->Hat = 0x00;
    185a:	1a 82       	std	Y+2, r1	; 0x02
			break;
    185c:	17 c0       	rjmp	.+46     	; 0x188c <CALLBACK_HID_Device_CreateHIDReport+0xba>
			case 0x06:
			//Left Down
			JoystickReport->Hat = 0x20;
    185e:	80 e2       	ldi	r24, 0x20	; 32
    1860:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1862:	14 c0       	rjmp	.+40     	; 0x188c <CALLBACK_HID_Device_CreateHIDReport+0xba>
			case 0x04:
			//Right
			JoystickReport->Hat = 0x40;
    1864:	80 e4       	ldi	r24, 0x40	; 64
    1866:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1868:	11 c0       	rjmp	.+34     	; 0x188c <CALLBACK_HID_Device_CreateHIDReport+0xba>
			case 0x05:
			//Up Right
			JoystickReport->Hat = 0x60;
    186a:	80 e6       	ldi	r24, 0x60	; 96
    186c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    186e:	0e c0       	rjmp	.+28     	; 0x188c <CALLBACK_HID_Device_CreateHIDReport+0xba>
			case 0x01:
			//Up
			JoystickReport->Hat = 0x81;
    1870:	81 e8       	ldi	r24, 0x81	; 129
    1872:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1874:	0b c0       	rjmp	.+22     	; 0x188c <CALLBACK_HID_Device_CreateHIDReport+0xba>
			case 0x09:
			//Up Left
			JoystickReport->Hat = 0xA0;
    1876:	80 ea       	ldi	r24, 0xA0	; 160
    1878:	8a 83       	std	Y+2, r24	; 0x02
			break;
    187a:	08 c0       	rjmp	.+16     	; 0x188c <CALLBACK_HID_Device_CreateHIDReport+0xba>
			case 0x08:
			//Left
			JoystickReport->Hat = 0xC0;
    187c:	80 ec       	ldi	r24, 0xC0	; 192
    187e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1880:	05 c0       	rjmp	.+10     	; 0x188c <CALLBACK_HID_Device_CreateHIDReport+0xba>
			case 0x0A:
			//Right Down
			JoystickReport->Hat = 0xE0;
    1882:	80 ee       	ldi	r24, 0xE0	; 224
    1884:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1886:	02 c0       	rjmp	.+4      	; 0x188c <CALLBACK_HID_Device_CreateHIDReport+0xba>
			default:
			//Act like nothing was pressed
			JoystickReport->Hat = 0x80;
    1888:	80 e8       	ldi	r24, 0x80	; 128
    188a:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		JoystickReport->X = (controller.joyx-128);
    188c:	e0 e1       	ldi	r30, 0x10	; 16
    188e:	f1 e0       	ldi	r31, 0x01	; 1
    1890:	84 81       	ldd	r24, Z+4	; 0x04
    1892:	80 58       	subi	r24, 0x80	; 128
    1894:	88 83       	st	Y, r24
		JoystickReport->Y = (controller.joyy-128);
    1896:	85 81       	ldd	r24, Z+5	; 0x05
    1898:	80 58       	subi	r24, 0x80	; 128
    189a:	89 83       	std	Y+1, r24	; 0x01
		JoystickReport->Brake = (controller.ltrigger);
    189c:	83 81       	ldd	r24, Z+3	; 0x03
    189e:	8c 83       	std	Y+4, r24	; 0x04
		JoystickReport->Throttle = (controller.rtrigger);
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	8b 83       	std	Y+3, r24	; 0x03
		//Send that report out
		*ReportSize = sizeof(USB_JoystickReport_Data_t);
    18a4:	86 e0       	ldi	r24, 0x06	; 6
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	f8 01       	movw	r30, r16
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
	}
	return false;
}
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	08 95       	ret

000018ba <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
    18ba:	08 95       	ret

000018bc <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    18bc:	3f 92       	push	r3
    18be:	4f 92       	push	r4
    18c0:	5f 92       	push	r5
    18c2:	6f 92       	push	r6
    18c4:	7f 92       	push	r7
    18c6:	8f 92       	push	r8
    18c8:	9f 92       	push	r9
    18ca:	af 92       	push	r10
    18cc:	bf 92       	push	r11
    18ce:	cf 92       	push	r12
    18d0:	df 92       	push	r13
    18d2:	ef 92       	push	r14
    18d4:	ff 92       	push	r15
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <HID_Device_ProcessControlRequest+0x24>
    18e0:	1f 92       	push	r1
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    18e8:	ed b6       	in	r14, 0x3d	; 61
    18ea:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    18f0:	83 ff       	sbrs	r24, 3
    18f2:	13 c1       	rjmp	.+550    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    18f4:	f6 01       	movw	r30, r12
    18f6:	80 81       	ld	r24, Z
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <USB_ControlRequest+0x4>
    18fe:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <USB_ControlRequest+0x5>
    1902:	28 17       	cp	r18, r24
    1904:	39 07       	cpc	r19, r25
    1906:	09 f0       	breq	.+2      	; 0x190a <HID_Device_ProcessControlRequest+0x4e>
    1908:	08 c1       	rjmp	.+528    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
	  return;

	switch (USB_ControlRequest.bRequest)
    190a:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <USB_ControlRequest+0x1>
    190e:	83 30       	cpi	r24, 0x03	; 3
    1910:	09 f4       	brne	.+2      	; 0x1914 <HID_Device_ProcessControlRequest+0x58>
    1912:	a0 c0       	rjmp	.+320    	; 0x1a54 <HID_Device_ProcessControlRequest+0x198>
    1914:	30 f4       	brcc	.+12     	; 0x1922 <HID_Device_ProcessControlRequest+0x66>
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	71 f0       	breq	.+28     	; 0x1936 <HID_Device_ProcessControlRequest+0x7a>
    191a:	82 30       	cpi	r24, 0x02	; 2
    191c:	09 f4       	brne	.+2      	; 0x1920 <HID_Device_ProcessControlRequest+0x64>
    191e:	e2 c0       	rjmp	.+452    	; 0x1ae4 <HID_Device_ProcessControlRequest+0x228>
    1920:	fc c0       	rjmp	.+504    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
    1922:	8a 30       	cpi	r24, 0x0A	; 10
    1924:	09 f4       	brne	.+2      	; 0x1928 <HID_Device_ProcessControlRequest+0x6c>
    1926:	c2 c0       	rjmp	.+388    	; 0x1aac <HID_Device_ProcessControlRequest+0x1f0>
    1928:	8b 30       	cpi	r24, 0x0B	; 11
    192a:	09 f4       	brne	.+2      	; 0x192e <HID_Device_ProcessControlRequest+0x72>
    192c:	ab c0       	rjmp	.+342    	; 0x1a84 <HID_Device_ProcessControlRequest+0x1c8>
    192e:	89 30       	cpi	r24, 0x09	; 9
    1930:	09 f0       	breq	.+2      	; 0x1934 <HID_Device_ProcessControlRequest+0x78>
    1932:	f3 c0       	rjmp	.+486    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
    1934:	51 c0       	rjmp	.+162    	; 0x19d8 <HID_Device_ProcessControlRequest+0x11c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1936:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <USB_ControlRequest>
    193a:	81 3a       	cpi	r24, 0xA1	; 161
    193c:	09 f0       	breq	.+2      	; 0x1940 <HID_Device_ProcessControlRequest+0x84>
    193e:	ed c0       	rjmp	.+474    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
			{
    1940:	ad b6       	in	r10, 0x3d	; 61
    1942:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
    1944:	1a 82       	std	Y+2, r1	; 0x02
    1946:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1948:	ec ea       	ldi	r30, 0xAC	; 172
    194a:	f3 e0       	ldi	r31, 0x03	; 3
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	13 81       	ldd	r17, Z+3	; 0x03
    1950:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1952:	f6 01       	movw	r30, r12
    1954:	80 85       	ldd	r24, Z+8	; 0x08
    1956:	48 2f       	mov	r20, r24
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	8d b7       	in	r24, 0x3d	; 61
    195c:	9e b7       	in	r25, 0x3e	; 62
    195e:	84 1b       	sub	r24, r20
    1960:	95 0b       	sbc	r25, r21
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	9e bf       	out	0x3e, r25	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	8d bf       	out	0x3d, r24	; 61
    196c:	ed b7       	in	r30, 0x3d	; 61
    196e:	fe b7       	in	r31, 0x3e	; 62
    1970:	31 96       	adiw	r30, 0x01	; 1
    1972:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	cf 01       	movw	r24, r30
    197a:	7d d7       	rcall	.+3834   	; 0x2876 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    197c:	4f ef       	ldi	r20, 0xFF	; 255
    197e:	41 0f       	add	r20, r17
    1980:	8e 01       	movw	r16, r28
    1982:	0f 5f       	subi	r16, 0xFF	; 255
    1984:	1f 4f       	sbci	r17, 0xFF	; 255
    1986:	94 01       	movw	r18, r8
    1988:	be 01       	movw	r22, r28
    198a:	6d 5f       	subi	r22, 0xFD	; 253
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	c6 01       	movw	r24, r12
    1990:	20 df       	rcall	.-448    	; 0x17d2 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1992:	f6 01       	movw	r30, r12
    1994:	86 81       	ldd	r24, Z+6	; 0x06
    1996:	97 81       	ldd	r25, Z+7	; 0x07
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	21 f0       	breq	.+8      	; 0x19a4 <HID_Device_ProcessControlRequest+0xe8>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    199c:	40 85       	ldd	r20, Z+8	; 0x08
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	b4 01       	movw	r22, r8
    19a2:	60 d7       	rcall	.+3776   	; 0x2864 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19a4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19a8:	e8 ee       	ldi	r30, 0xE8	; 232
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	87 7f       	andi	r24, 0xF7	; 247
    19b0:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19b6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    19ba:	69 81       	ldd	r22, Y+1	; 0x01
    19bc:	7a 81       	ldd	r23, Y+2	; 0x02
    19be:	c4 01       	movw	r24, r8
    19c0:	f4 d1       	rcall	.+1000   	; 0x1daa <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19c2:	e8 ee       	ldi	r30, 0xE8	; 232
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	8b 77       	andi	r24, 0x7B	; 123
    19ca:	80 83       	st	Z, r24
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	be be       	out	0x3e, r11	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	ad be       	out	0x3d, r10	; 61
    19d6:	a1 c0       	rjmp	.+322    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19d8:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <USB_ControlRequest>
    19dc:	81 32       	cpi	r24, 0x21	; 33
    19de:	09 f0       	breq	.+2      	; 0x19e2 <HID_Device_ProcessControlRequest+0x126>
    19e0:	9c c0       	rjmp	.+312    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
			{
    19e2:	6d b6       	in	r6, 0x3d	; 61
    19e4:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    19e6:	ec ea       	ldi	r30, 0xAC	; 172
    19e8:	f3 e0       	ldi	r31, 0x03	; 3
    19ea:	06 81       	ldd	r16, Z+6	; 0x06
    19ec:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    19ee:	52 80       	ldd	r5, Z+2	; 0x02
    19f0:	43 80       	ldd	r4, Z+3	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    19f2:	8d b7       	in	r24, 0x3d	; 61
    19f4:	9e b7       	in	r25, 0x3e	; 62
    19f6:	80 1b       	sub	r24, r16
    19f8:	91 0b       	sbc	r25, r17
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	9e bf       	out	0x3e, r25	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	8d bf       	out	0x3d, r24	; 61
    1a04:	ed b7       	in	r30, 0x3d	; 61
    1a06:	fe b7       	in	r31, 0x3e	; 62
    1a08:	31 96       	adiw	r30, 0x01	; 1
    1a0a:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a0c:	0f 2e       	mov	r0, r31
    1a0e:	f8 ee       	ldi	r31, 0xE8	; 232
    1a10:	af 2e       	mov	r10, r31
    1a12:	b1 2c       	mov	r11, r1
    1a14:	f0 2d       	mov	r31, r0
    1a16:	f5 01       	movw	r30, r10
    1a18:	80 81       	ld	r24, Z
    1a1a:	87 7f       	andi	r24, 0xF7	; 247

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1a1c:	80 83       	st	Z, r24
    1a1e:	b8 01       	movw	r22, r16
    1a20:	c4 01       	movw	r24, r8
    1a22:	47 d2       	rcall	.+1166   	; 0x1eb2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a24:	f5 01       	movw	r30, r10
    1a26:	80 81       	ld	r24, Z
    1a28:	8e 77       	andi	r24, 0x7E	; 126
    1a2a:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1a2c:	21 e0       	ldi	r18, 0x01	; 1
    1a2e:	51 10       	cpse	r5, r1
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <HID_Device_ProcessControlRequest+0x178>
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	02 1b       	sub	r16, r18
    1a38:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1a3a:	28 0d       	add	r18, r8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1a3c:	39 1d       	adc	r19, r9
    1a3e:	4f ef       	ldi	r20, 0xFF	; 255
    1a40:	44 0d       	add	r20, r4
    1a42:	65 2d       	mov	r22, r5
    1a44:	c6 01       	movw	r24, r12
    1a46:	39 df       	rcall	.-398    	; 0x18ba <CALLBACK_HID_Device_ProcessHIDReport>
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	7e be       	out	0x3e, r7	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	6d be       	out	0x3d, r6	; 61
    1a52:	63 c0       	rjmp	.+198    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1a54:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <USB_ControlRequest>
    1a58:	81 3a       	cpi	r24, 0xA1	; 161
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <HID_Device_ProcessControlRequest+0x1a2>
    1a5c:	5e c0       	rjmp	.+188    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a5e:	e8 ee       	ldi	r30, 0xE8	; 232
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	87 7f       	andi	r24, 0xF7	; 247
    1a66:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a68:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1a6a:	80 ff       	sbrs	r24, 0
    1a6c:	fd cf       	rjmp	.-6      	; 0x1a68 <HID_Device_ProcessControlRequest+0x1ac>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1a6e:	f6 01       	movw	r30, r12
    1a70:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a72:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a76:	e8 ee       	ldi	r30, 0xE8	; 232
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1a7e:	80 83       	st	Z, r24
    1a80:	cc d3       	rcall	.+1944   	; 0x221a <Endpoint_ClearStatusStage>
    1a82:	4b c0       	rjmp	.+150    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a84:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <USB_ControlRequest>
    1a88:	81 32       	cpi	r24, 0x21	; 33
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <HID_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a8c:	46 c0       	rjmp	.+140    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
    1a8e:	e8 ee       	ldi	r30, 0xE8	; 232
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a96:	80 83       	st	Z, r24
    1a98:	c0 d3       	rcall	.+1920   	; 0x221a <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1a9a:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <USB_ControlRequest+0x2>
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	91 11       	cpse	r25, r1
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <HID_Device_ProcessControlRequest+0x1ea>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	f6 01       	movw	r30, r12
    1aa8:	81 87       	std	Z+9, r24	; 0x09
    1aaa:	37 c0       	rjmp	.+110    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1aac:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <USB_ControlRequest>
    1ab0:	81 32       	cpi	r24, 0x21	; 33
    1ab2:	99 f5       	brne	.+102    	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
    1ab4:	e8 ee       	ldi	r30, 0xE8	; 232
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1abc:	80 83       	st	Z, r24
    1abe:	ad d3       	rcall	.+1882   	; 0x221a <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1ac0:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <USB_ControlRequest+0x2>
    1ac4:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <USB_ControlRequest+0x3>
    1ac8:	88 27       	eor	r24, r24
    1aca:	00 24       	eor	r0, r0
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	00 1c       	adc	r0, r0
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	00 1c       	adc	r0, r0
    1ad8:	89 2f       	mov	r24, r25
    1ada:	90 2d       	mov	r25, r0
    1adc:	f6 01       	movw	r30, r12
    1ade:	95 87       	std	Z+13, r25	; 0x0d
    1ae0:	84 87       	std	Z+12, r24	; 0x0c
    1ae2:	1b c0       	rjmp	.+54     	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ae4:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <USB_ControlRequest>
    1ae8:	81 3a       	cpi	r24, 0xA1	; 161
    1aea:	b9 f4       	brne	.+46     	; 0x1b1a <HID_Device_ProcessControlRequest+0x25e>
    1aec:	e8 ee       	ldi	r30, 0xE8	; 232
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	87 7f       	andi	r24, 0xF7	; 247
    1af4:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1af6:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1af8:	80 ff       	sbrs	r24, 0
    1afa:	fd cf       	rjmp	.-6      	; 0x1af6 <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1afc:	f6 01       	movw	r30, r12
    1afe:	84 85       	ldd	r24, Z+12	; 0x0c
    1b00:	95 85       	ldd	r25, Z+13	; 0x0d
    1b02:	96 95       	lsr	r25
    1b04:	87 95       	ror	r24
    1b06:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b08:	87 95       	ror	r24
    1b0a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b0e:	e8 ee       	ldi	r30, 0xE8	; 232
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1b16:	80 83       	st	Z, r24
    1b18:	80 d3       	rcall	.+1792   	; 0x221a <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	fe be       	out	0x3e, r15	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	ed be       	out	0x3d, r14	; 61
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	ff 90       	pop	r15
    1b34:	ef 90       	pop	r14
    1b36:	df 90       	pop	r13
    1b38:	cf 90       	pop	r12
    1b3a:	bf 90       	pop	r11
    1b3c:	af 90       	pop	r10
    1b3e:	9f 90       	pop	r9
    1b40:	8f 90       	pop	r8
    1b42:	7f 90       	pop	r7
    1b44:	6f 90       	pop	r6
    1b46:	5f 90       	pop	r5
    1b48:	4f 90       	pop	r4
    1b4a:	3f 90       	pop	r3
    1b4c:	08 95       	ret

00001b4e <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1b4e:	fc 01       	movw	r30, r24
    1b50:	39 96       	adiw	r30, 0x09	; 9
    1b52:	27 e0       	ldi	r18, 0x07	; 7
    1b54:	df 01       	movw	r26, r30
    1b56:	1d 92       	st	X+, r1
    1b58:	2a 95       	dec	r18
    1b5a:	e9 f7       	brne	.-6      	; 0x1b56 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1b5c:	21 e0       	ldi	r18, 0x01	; 1
    1b5e:	fc 01       	movw	r30, r24
    1b60:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1b62:	24 ef       	ldi	r18, 0xF4	; 244
    1b64:	31 e0       	ldi	r19, 0x01	; 1
    1b66:	35 87       	std	Z+13, r19	; 0x0d
    1b68:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1b6a:	23 e0       	ldi	r18, 0x03	; 3
    1b6c:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	04 c3       	rjmp	.+1544   	; 0x217c <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    1b74:	08 95       	ret

00001b76 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1b76:	5f 92       	push	r5
    1b78:	6f 92       	push	r6
    1b7a:	7f 92       	push	r7
    1b7c:	8f 92       	push	r8
    1b7e:	9f 92       	push	r9
    1b80:	af 92       	push	r10
    1b82:	bf 92       	push	r11
    1b84:	cf 92       	push	r12
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <HID_Device_USBTask+0x20>
    1b96:	1f 92       	push	r1
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1b9e:	ad b6       	in	r10, 0x3d	; 61
    1ba0:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1ba2:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>
    1ba6:	84 30       	cpi	r24, 0x04	; 4
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <HID_Device_USBTask+0x36>
    1baa:	8a c0       	rjmp	.+276    	; 0x1cc0 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1bac:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
    1bb0:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1bb4:	f7 01       	movw	r30, r14
    1bb6:	22 85       	ldd	r18, Z+10	; 0x0a
    1bb8:	33 85       	ldd	r19, Z+11	; 0x0b
    1bba:	28 17       	cp	r18, r24
    1bbc:	39 07       	cpc	r19, r25
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <HID_Device_USBTask+0x4c>
    1bc0:	7f c0       	rjmp	.+254    	; 0x1cc0 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bc2:	81 81       	ldd	r24, Z+1	; 0x01
    1bc4:	8f 70       	andi	r24, 0x0F	; 15
    1bc6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1bca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1bce:	85 ff       	sbrs	r24, 5
    1bd0:	77 c0       	rjmp	.+238    	; 0x1cc0 <HID_Device_USBTask+0x14a>
	{
    1bd2:	8d b6       	in	r8, 0x3d	; 61
    1bd4:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1bd6:	40 85       	ldd	r20, Z+8	; 0x08
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	8d b7       	in	r24, 0x3d	; 61
    1bdc:	9e b7       	in	r25, 0x3e	; 62
    1bde:	84 1b       	sub	r24, r20
    1be0:	95 0b       	sbc	r25, r21
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	9e bf       	out	0x3e, r25	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	8d bf       	out	0x3d, r24	; 61
    1bec:	ed b7       	in	r30, 0x3d	; 61
    1bee:	fe b7       	in	r31, 0x3e	; 62
    1bf0:	31 96       	adiw	r30, 0x01	; 1
    1bf2:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1bf4:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1bf6:	1a 82       	std	Y+2, r1	; 0x02
    1bf8:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	cf 01       	movw	r24, r30
    1c00:	3a d6       	rcall	.+3188   	; 0x2876 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1c02:	8e 01       	movw	r16, r28
    1c04:	0f 5f       	subi	r16, 0xFF	; 255
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	96 01       	movw	r18, r12
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	be 01       	movw	r22, r28
    1c0e:	6d 5f       	subi	r22, 0xFD	; 253
    1c10:	7f 4f       	sbci	r23, 0xFF	; 255
    1c12:	c7 01       	movw	r24, r14
    1c14:	de dd       	rcall	.-1092   	; 0x17d2 <CALLBACK_HID_Device_CreateHIDReport>
    1c16:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1c18:	f7 01       	movw	r30, r14
    1c1a:	84 85       	ldd	r24, Z+12	; 0x0c
    1c1c:	95 85       	ldd	r25, Z+13	; 0x0d
    1c1e:	89 2b       	or	r24, r25
    1c20:	41 f0       	breq	.+16     	; 0x1c32 <HID_Device_USBTask+0xbc>
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	26 85       	ldd	r18, Z+14	; 0x0e
    1c26:	37 85       	ldd	r19, Z+15	; 0x0f
    1c28:	23 2b       	or	r18, r19
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <HID_Device_USBTask+0xb8>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	78 2e       	mov	r7, r24
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <HID_Device_USBTask+0xbe>
    1c32:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1c34:	f7 01       	movw	r30, r14
    1c36:	06 81       	ldd	r16, Z+6	; 0x06
    1c38:	17 81       	ldd	r17, Z+7	; 0x07
    1c3a:	01 15       	cp	r16, r1
    1c3c:	11 05       	cpc	r17, r1
    1c3e:	89 f0       	breq	.+34     	; 0x1c62 <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1c40:	49 81       	ldd	r20, Y+1	; 0x01
    1c42:	5a 81       	ldd	r21, Y+2	; 0x02
    1c44:	b8 01       	movw	r22, r16
    1c46:	c6 01       	movw	r24, r12
    1c48:	00 d6       	rcall	.+3072   	; 0x284a <memcmp>
    1c4a:	66 24       	eor	r6, r6
    1c4c:	63 94       	inc	r6
    1c4e:	89 2b       	or	r24, r25
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <HID_Device_USBTask+0xde>
    1c52:	61 2c       	mov	r6, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1c54:	f7 01       	movw	r30, r14
    1c56:	40 85       	ldd	r20, Z+8	; 0x08
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	b6 01       	movw	r22, r12
    1c5c:	c8 01       	movw	r24, r16
    1c5e:	02 d6       	rcall	.+3076   	; 0x2864 <memcpy>
    1c60:	01 c0       	rjmp	.+2      	; 0x1c64 <HID_Device_USBTask+0xee>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1c62:	61 2c       	mov	r6, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	89 2b       	or	r24, r25
    1c6a:	f1 f0       	breq	.+60     	; 0x1ca8 <HID_Device_USBTask+0x132>
    1c6c:	51 10       	cpse	r5, r1
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <HID_Device_USBTask+0x102>
    1c70:	61 10       	cpse	r6, r1
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <HID_Device_USBTask+0x102>
    1c74:	70 fe       	sbrs	r7, 0
    1c76:	18 c0       	rjmp	.+48     	; 0x1ca8 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1c78:	f7 01       	movw	r30, r14
    1c7a:	84 85       	ldd	r24, Z+12	; 0x0c
    1c7c:	95 85       	ldd	r25, Z+13	; 0x0d
    1c7e:	97 87       	std	Z+15, r25	; 0x0f
    1c80:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c82:	81 81       	ldd	r24, Z+1	; 0x01
    1c84:	8f 70       	andi	r24, 0x0F	; 15
    1c86:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c8e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1c92:	69 81       	ldd	r22, Y+1	; 0x01
    1c94:	7a 81       	ldd	r23, Y+2	; 0x02
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	c6 01       	movw	r24, r12
    1c9c:	29 d0       	rcall	.+82     	; 0x1cf0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c9e:	e8 ee       	ldi	r30, 0xE8	; 232
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8e 77       	andi	r24, 0x7E	; 126
    1ca6:	80 83       	st	Z, r24
    1ca8:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
    1cac:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1cb0:	f7 01       	movw	r30, r14
    1cb2:	93 87       	std	Z+11, r25	; 0x0b
    1cb4:	82 87       	std	Z+10, r24	; 0x0a
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	9e be       	out	0x3e, r9	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	8d be       	out	0x3d, r8	; 61
	}
}
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	be be       	out	0x3e, r11	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	ad be       	out	0x3d, r10	; 61
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	bf 90       	pop	r11
    1ce2:	af 90       	pop	r10
    1ce4:	9f 90       	pop	r9
    1ce6:	8f 90       	pop	r8
    1ce8:	7f 90       	pop	r7
    1cea:	6f 90       	pop	r6
    1cec:	5f 90       	pop	r5
    1cee:	08 95       	ret

00001cf0 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1cf0:	8f 92       	push	r8
    1cf2:	9f 92       	push	r9
    1cf4:	af 92       	push	r10
    1cf6:	bf 92       	push	r11
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	8c 01       	movw	r16, r24
    1d0a:	eb 01       	movw	r28, r22
    1d0c:	5a 01       	movw	r10, r20
    1d0e:	a9 d2       	rcall	.+1362   	; 0x2262 <Endpoint_WaitUntilReady>
    1d10:	81 11       	cpse	r24, r1
    1d12:	3e c0       	rjmp	.+124    	; 0x1d90 <Endpoint_Write_Stream_LE+0xa0>
    1d14:	a1 14       	cp	r10, r1
    1d16:	b1 04       	cpc	r11, r1
    1d18:	39 f0       	breq	.+14     	; 0x1d28 <Endpoint_Write_Stream_LE+0x38>
    1d1a:	f5 01       	movw	r30, r10
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	c8 1b       	sub	r28, r24
    1d22:	d9 0b       	sbc	r29, r25
    1d24:	08 0f       	add	r16, r24
    1d26:	19 1f       	adc	r17, r25
    1d28:	20 97       	sbiw	r28, 0x00	; 0
    1d2a:	89 f1       	breq	.+98     	; 0x1d8e <Endpoint_Write_Stream_LE+0x9e>
    1d2c:	e1 2c       	mov	r14, r1
    1d2e:	f1 2c       	mov	r15, r1
    1d30:	0f 2e       	mov	r0, r31
    1d32:	f8 ee       	ldi	r31, 0xE8	; 232
    1d34:	8f 2e       	mov	r8, r31
    1d36:	91 2c       	mov	r9, r1
    1d38:	f0 2d       	mov	r31, r0
    1d3a:	0f 2e       	mov	r0, r31
    1d3c:	f1 ef       	ldi	r31, 0xF1	; 241
    1d3e:	cf 2e       	mov	r12, r31
    1d40:	d1 2c       	mov	r13, r1
    1d42:	f0 2d       	mov	r31, r0
    1d44:	f4 01       	movw	r30, r8
    1d46:	80 81       	ld	r24, Z
    1d48:	85 fd       	sbrc	r24, 5
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <Endpoint_Write_Stream_LE+0x84>
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8e 77       	andi	r24, 0x7E	; 126
    1d50:	80 83       	st	Z, r24
    1d52:	61 d5       	rcall	.+2754   	; 0x2816 <USB_USBTask>
    1d54:	a1 14       	cp	r10, r1
    1d56:	b1 04       	cpc	r11, r1
    1d58:	49 f0       	breq	.+18     	; 0x1d6c <Endpoint_Write_Stream_LE+0x7c>
    1d5a:	f5 01       	movw	r30, r10
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	e8 0e       	add	r14, r24
    1d62:	f9 1e       	adc	r15, r25
    1d64:	f1 82       	std	Z+1, r15	; 0x01
    1d66:	e0 82       	st	Z, r14
    1d68:	85 e0       	ldi	r24, 0x05	; 5
    1d6a:	12 c0       	rjmp	.+36     	; 0x1d90 <Endpoint_Write_Stream_LE+0xa0>
    1d6c:	7a d2       	rcall	.+1268   	; 0x2262 <Endpoint_WaitUntilReady>
    1d6e:	88 23       	and	r24, r24
    1d70:	51 f0       	breq	.+20     	; 0x1d86 <Endpoint_Write_Stream_LE+0x96>
    1d72:	0e c0       	rjmp	.+28     	; 0x1d90 <Endpoint_Write_Stream_LE+0xa0>
    1d74:	f8 01       	movw	r30, r16
    1d76:	81 91       	ld	r24, Z+
    1d78:	8f 01       	movw	r16, r30
    1d7a:	f6 01       	movw	r30, r12
    1d7c:	80 83       	st	Z, r24
    1d7e:	21 97       	sbiw	r28, 0x01	; 1
    1d80:	ff ef       	ldi	r31, 0xFF	; 255
    1d82:	ef 1a       	sub	r14, r31
    1d84:	ff 0a       	sbc	r15, r31
    1d86:	20 97       	sbiw	r28, 0x00	; 0
    1d88:	e9 f6       	brne	.-70     	; 0x1d44 <Endpoint_Write_Stream_LE+0x54>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <Endpoint_Write_Stream_LE+0xa0>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	8f 90       	pop	r8
    1da8:	08 95       	ret

00001daa <Endpoint_Write_Control_Stream_LE>:
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <USB_ControlRequest+0x6>
    1dbc:	30 91 b3 03 	lds	r19, 0x03B3	; 0x8003b3 <USB_ControlRequest+0x7>
    1dc0:	26 17       	cp	r18, r22
    1dc2:	37 07       	cpc	r19, r23
    1dc4:	58 f0       	brcs	.+22     	; 0x1ddc <Endpoint_Write_Control_Stream_LE+0x32>
    1dc6:	61 15       	cp	r22, r1
    1dc8:	71 05       	cpc	r23, r1
    1dca:	39 f4       	brne	.+14     	; 0x1dda <Endpoint_Write_Control_Stream_LE+0x30>
    1dcc:	e8 ee       	ldi	r30, 0xE8	; 232
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	20 81       	ld	r18, Z
    1dd2:	2e 77       	andi	r18, 0x7E	; 126
    1dd4:	20 83       	st	Z, r18
    1dd6:	9b 01       	movw	r18, r22
    1dd8:	01 c0       	rjmp	.+2      	; 0x1ddc <Endpoint_Write_Control_Stream_LE+0x32>
    1dda:	9b 01       	movw	r18, r22
    1ddc:	a8 2f       	mov	r26, r24
    1dde:	b9 2f       	mov	r27, r25
    1de0:	10 e0       	ldi	r17, 0x00	; 0
    1de2:	e8 ee       	ldi	r30, 0xE8	; 232
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	63 ef       	ldi	r22, 0xF3	; 243
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	42 ef       	ldi	r20, 0xF2	; 242
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	0f 2e       	mov	r0, r31
    1df0:	f1 ef       	ldi	r31, 0xF1	; 241
    1df2:	cf 2e       	mov	r12, r31
    1df4:	d1 2c       	mov	r13, r1
    1df6:	f0 2d       	mov	r31, r0
    1df8:	01 e0       	ldi	r16, 0x01	; 1
    1dfa:	f1 2c       	mov	r15, r1
    1dfc:	30 c0       	rjmp	.+96     	; 0x1e5e <Endpoint_Write_Control_Stream_LE+0xb4>
    1dfe:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>
    1e02:	88 23       	and	r24, r24
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <Endpoint_Write_Control_Stream_LE+0x5e>
    1e06:	42 c0       	rjmp	.+132    	; 0x1e8c <Endpoint_Write_Control_Stream_LE+0xe2>
    1e08:	85 30       	cpi	r24, 0x05	; 5
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <Endpoint_Write_Control_Stream_LE+0x64>
    1e0c:	41 c0       	rjmp	.+130    	; 0x1e90 <Endpoint_Write_Control_Stream_LE+0xe6>
    1e0e:	80 81       	ld	r24, Z
    1e10:	83 fd       	sbrc	r24, 3
    1e12:	40 c0       	rjmp	.+128    	; 0x1e94 <Endpoint_Write_Control_Stream_LE+0xea>
    1e14:	80 81       	ld	r24, Z
    1e16:	82 fd       	sbrc	r24, 2
    1e18:	32 c0       	rjmp	.+100    	; 0x1e7e <Endpoint_Write_Control_Stream_LE+0xd4>
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 ff       	sbrs	r24, 0
    1e1e:	1f c0       	rjmp	.+62     	; 0x1e5e <Endpoint_Write_Control_Stream_LE+0xb4>
    1e20:	eb 01       	movw	r28, r22
    1e22:	18 81       	ld	r17, Y
    1e24:	ea 01       	movw	r28, r20
    1e26:	88 81       	ld	r24, Y
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	91 2b       	or	r25, r17
    1e2c:	21 15       	cp	r18, r1
    1e2e:	31 05       	cpc	r19, r1
    1e30:	79 f0       	breq	.+30     	; 0x1e50 <Endpoint_Write_Control_Stream_LE+0xa6>
    1e32:	88 30       	cpi	r24, 0x08	; 8
    1e34:	91 05       	cpc	r25, r1
    1e36:	60 f4       	brcc	.+24     	; 0x1e50 <Endpoint_Write_Control_Stream_LE+0xa6>
    1e38:	1d 91       	ld	r17, X+
    1e3a:	e6 01       	movw	r28, r12
    1e3c:	18 83       	st	Y, r17
    1e3e:	21 50       	subi	r18, 0x01	; 1
    1e40:	31 09       	sbc	r19, r1
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	21 15       	cp	r18, r1
    1e46:	31 05       	cpc	r19, r1
    1e48:	19 f0       	breq	.+6      	; 0x1e50 <Endpoint_Write_Control_Stream_LE+0xa6>
    1e4a:	88 30       	cpi	r24, 0x08	; 8
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	a1 f7       	brne	.-24     	; 0x1e38 <Endpoint_Write_Control_Stream_LE+0x8e>
    1e50:	10 2f       	mov	r17, r16
    1e52:	08 97       	sbiw	r24, 0x08	; 8
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <Endpoint_Write_Control_Stream_LE+0xae>
    1e56:	1f 2d       	mov	r17, r15
    1e58:	80 81       	ld	r24, Z
    1e5a:	8e 77       	andi	r24, 0x7E	; 126
    1e5c:	80 83       	st	Z, r24
    1e5e:	21 15       	cp	r18, r1
    1e60:	31 05       	cpc	r19, r1
    1e62:	69 f6       	brne	.-102    	; 0x1dfe <Endpoint_Write_Control_Stream_LE+0x54>
    1e64:	11 11       	cpse	r17, r1
    1e66:	cb cf       	rjmp	.-106    	; 0x1dfe <Endpoint_Write_Control_Stream_LE+0x54>
    1e68:	0a c0       	rjmp	.+20     	; 0x1e7e <Endpoint_Write_Control_Stream_LE+0xd4>
    1e6a:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>
    1e6e:	88 23       	and	r24, r24
    1e70:	99 f0       	breq	.+38     	; 0x1e98 <Endpoint_Write_Control_Stream_LE+0xee>
    1e72:	85 30       	cpi	r24, 0x05	; 5
    1e74:	99 f0       	breq	.+38     	; 0x1e9c <Endpoint_Write_Control_Stream_LE+0xf2>
    1e76:	80 81       	ld	r24, Z
    1e78:	83 ff       	sbrs	r24, 3
    1e7a:	03 c0       	rjmp	.+6      	; 0x1e82 <Endpoint_Write_Control_Stream_LE+0xd8>
    1e7c:	11 c0       	rjmp	.+34     	; 0x1ea0 <Endpoint_Write_Control_Stream_LE+0xf6>
    1e7e:	e8 ee       	ldi	r30, 0xE8	; 232
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	82 ff       	sbrs	r24, 2
    1e86:	f1 cf       	rjmp	.-30     	; 0x1e6a <Endpoint_Write_Control_Stream_LE+0xc0>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	0b c0       	rjmp	.+22     	; 0x1ea2 <Endpoint_Write_Control_Stream_LE+0xf8>
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	09 c0       	rjmp	.+18     	; 0x1ea2 <Endpoint_Write_Control_Stream_LE+0xf8>
    1e90:	83 e0       	ldi	r24, 0x03	; 3
    1e92:	07 c0       	rjmp	.+14     	; 0x1ea2 <Endpoint_Write_Control_Stream_LE+0xf8>
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	05 c0       	rjmp	.+10     	; 0x1ea2 <Endpoint_Write_Control_Stream_LE+0xf8>
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	03 c0       	rjmp	.+6      	; 0x1ea2 <Endpoint_Write_Control_Stream_LE+0xf8>
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	01 c0       	rjmp	.+2      	; 0x1ea2 <Endpoint_Write_Control_Stream_LE+0xf8>
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	ff 90       	pop	r15
    1eac:	df 90       	pop	r13
    1eae:	cf 90       	pop	r12
    1eb0:	08 95       	ret

00001eb2 <Endpoint_Read_Control_Stream_LE>:
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	61 15       	cp	r22, r1
    1ebe:	71 05       	cpc	r23, r1
    1ec0:	51 f5       	brne	.+84     	; 0x1f16 <Endpoint_Read_Control_Stream_LE+0x64>
    1ec2:	e8 ee       	ldi	r30, 0xE8	; 232
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8b 77       	andi	r24, 0x7B	; 123
    1eca:	80 83       	st	Z, r24
    1ecc:	45 c0       	rjmp	.+138    	; 0x1f58 <Endpoint_Read_Control_Stream_LE+0xa6>
    1ece:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>
    1ed2:	88 23       	and	r24, r24
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <Endpoint_Read_Control_Stream_LE+0x26>
    1ed6:	47 c0       	rjmp	.+142    	; 0x1f66 <Endpoint_Read_Control_Stream_LE+0xb4>
    1ed8:	85 30       	cpi	r24, 0x05	; 5
    1eda:	09 f4       	brne	.+2      	; 0x1ede <Endpoint_Read_Control_Stream_LE+0x2c>
    1edc:	46 c0       	rjmp	.+140    	; 0x1f6a <Endpoint_Read_Control_Stream_LE+0xb8>
    1ede:	80 81       	ld	r24, Z
    1ee0:	83 fd       	sbrc	r24, 3
    1ee2:	45 c0       	rjmp	.+138    	; 0x1f6e <Endpoint_Read_Control_Stream_LE+0xbc>
    1ee4:	80 81       	ld	r24, Z
    1ee6:	82 ff       	sbrs	r24, 2
    1ee8:	f2 cf       	rjmp	.-28     	; 0x1ece <Endpoint_Read_Control_Stream_LE+0x1c>
    1eea:	4d c0       	rjmp	.+154    	; 0x1f86 <Endpoint_Read_Control_Stream_LE+0xd4>
    1eec:	ea 01       	movw	r28, r20
    1eee:	88 81       	ld	r24, Y
    1ef0:	8d 93       	st	X+, r24
    1ef2:	61 50       	subi	r22, 0x01	; 1
    1ef4:	71 09       	sbc	r23, r1
    1ef6:	41 f0       	breq	.+16     	; 0x1f08 <Endpoint_Read_Control_Stream_LE+0x56>
    1ef8:	e9 01       	movw	r28, r18
    1efa:	18 81       	ld	r17, Y
    1efc:	e7 01       	movw	r28, r14
    1efe:	88 81       	ld	r24, Y
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	91 2b       	or	r25, r17
    1f04:	89 2b       	or	r24, r25
    1f06:	91 f7       	brne	.-28     	; 0x1eec <Endpoint_Read_Control_Stream_LE+0x3a>
    1f08:	80 81       	ld	r24, Z
    1f0a:	8b 77       	andi	r24, 0x7B	; 123
    1f0c:	80 83       	st	Z, r24
    1f0e:	61 15       	cp	r22, r1
    1f10:	71 05       	cpc	r23, r1
    1f12:	71 f4       	brne	.+28     	; 0x1f30 <Endpoint_Read_Control_Stream_LE+0x7e>
    1f14:	21 c0       	rjmp	.+66     	; 0x1f58 <Endpoint_Read_Control_Stream_LE+0xa6>
    1f16:	a8 2f       	mov	r26, r24
    1f18:	b9 2f       	mov	r27, r25
    1f1a:	e8 ee       	ldi	r30, 0xE8	; 232
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	23 ef       	ldi	r18, 0xF3	; 243
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	0f 2e       	mov	r0, r31
    1f24:	f2 ef       	ldi	r31, 0xF2	; 242
    1f26:	ef 2e       	mov	r14, r31
    1f28:	f1 2c       	mov	r15, r1
    1f2a:	f0 2d       	mov	r31, r0
    1f2c:	41 ef       	ldi	r20, 0xF1	; 241
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>
    1f34:	88 23       	and	r24, r24
    1f36:	e9 f0       	breq	.+58     	; 0x1f72 <Endpoint_Read_Control_Stream_LE+0xc0>
    1f38:	85 30       	cpi	r24, 0x05	; 5
    1f3a:	e9 f0       	breq	.+58     	; 0x1f76 <Endpoint_Read_Control_Stream_LE+0xc4>
    1f3c:	80 81       	ld	r24, Z
    1f3e:	83 fd       	sbrc	r24, 3
    1f40:	1c c0       	rjmp	.+56     	; 0x1f7a <Endpoint_Read_Control_Stream_LE+0xc8>
    1f42:	80 81       	ld	r24, Z
    1f44:	82 fd       	sbrc	r24, 2
    1f46:	1f c0       	rjmp	.+62     	; 0x1f86 <Endpoint_Read_Control_Stream_LE+0xd4>
    1f48:	c2 cf       	rjmp	.-124    	; 0x1ece <Endpoint_Read_Control_Stream_LE+0x1c>
    1f4a:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>
    1f4e:	88 23       	and	r24, r24
    1f50:	b1 f0       	breq	.+44     	; 0x1f7e <Endpoint_Read_Control_Stream_LE+0xcc>
    1f52:	85 30       	cpi	r24, 0x05	; 5
    1f54:	19 f4       	brne	.+6      	; 0x1f5c <Endpoint_Read_Control_Stream_LE+0xaa>
    1f56:	15 c0       	rjmp	.+42     	; 0x1f82 <Endpoint_Read_Control_Stream_LE+0xd0>
    1f58:	e8 ee       	ldi	r30, 0xE8	; 232
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	80 ff       	sbrs	r24, 0
    1f60:	f4 cf       	rjmp	.-24     	; 0x1f4a <Endpoint_Read_Control_Stream_LE+0x98>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	1a c0       	rjmp	.+52     	; 0x1f9a <Endpoint_Read_Control_Stream_LE+0xe8>
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	18 c0       	rjmp	.+48     	; 0x1f9a <Endpoint_Read_Control_Stream_LE+0xe8>
    1f6a:	83 e0       	ldi	r24, 0x03	; 3
    1f6c:	16 c0       	rjmp	.+44     	; 0x1f9a <Endpoint_Read_Control_Stream_LE+0xe8>
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	14 c0       	rjmp	.+40     	; 0x1f9a <Endpoint_Read_Control_Stream_LE+0xe8>
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	12 c0       	rjmp	.+36     	; 0x1f9a <Endpoint_Read_Control_Stream_LE+0xe8>
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	10 c0       	rjmp	.+32     	; 0x1f9a <Endpoint_Read_Control_Stream_LE+0xe8>
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	0e c0       	rjmp	.+28     	; 0x1f9a <Endpoint_Read_Control_Stream_LE+0xe8>
    1f7e:	82 e0       	ldi	r24, 0x02	; 2
    1f80:	0c c0       	rjmp	.+24     	; 0x1f9a <Endpoint_Read_Control_Stream_LE+0xe8>
    1f82:	83 e0       	ldi	r24, 0x03	; 3
    1f84:	0a c0       	rjmp	.+20     	; 0x1f9a <Endpoint_Read_Control_Stream_LE+0xe8>
    1f86:	e9 01       	movw	r28, r18
    1f88:	18 81       	ld	r17, Y
    1f8a:	e7 01       	movw	r28, r14
    1f8c:	88 81       	ld	r24, Y
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	91 2b       	or	r25, r17
    1f92:	89 2b       	or	r24, r25
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <Endpoint_Read_Control_Stream_LE+0xe6>
    1f96:	aa cf       	rjmp	.-172    	; 0x1eec <Endpoint_Read_Control_Stream_LE+0x3a>
    1f98:	b7 cf       	rjmp	.-146    	; 0x1f08 <Endpoint_Read_Control_Stream_LE+0x56>
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	ff 90       	pop	r15
    1fa2:	ef 90       	pop	r14
    1fa4:	08 95       	ret

00001fa6 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1fa6:	cf 92       	push	r12
    1fa8:	df 92       	push	r13
    1faa:	ff 92       	push	r15
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1fb4:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <USB_ControlRequest+0x6>
    1fb8:	30 91 b3 03 	lds	r19, 0x03B3	; 0x8003b3 <USB_ControlRequest+0x7>
    1fbc:	26 17       	cp	r18, r22
    1fbe:	37 07       	cpc	r19, r23
    1fc0:	58 f0       	brcs	.+22     	; 0x1fd8 <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1fc2:	61 15       	cp	r22, r1
    1fc4:	71 05       	cpc	r23, r1
    1fc6:	39 f4       	brne	.+14     	; 0x1fd6 <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fc8:	e8 ee       	ldi	r30, 0xE8	; 232
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	20 81       	ld	r18, Z
    1fce:	2e 77       	andi	r18, 0x7E	; 126
    1fd0:	20 83       	st	Z, r18
    1fd2:	9b 01       	movw	r18, r22
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <Endpoint_Write_Control_PStream_LE+0x32>
    1fd6:	9b 01       	movw	r18, r22
    1fd8:	e8 2f       	mov	r30, r24
    1fda:	f9 2f       	mov	r31, r25
    1fdc:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fde:	a8 ee       	ldi	r26, 0xE8	; 232
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1fe2:	63 ef       	ldi	r22, 0xF3	; 243
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	42 ef       	ldi	r20, 0xF2	; 242
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fea:	0f 2e       	mov	r0, r31
    1fec:	f1 ef       	ldi	r31, 0xF1	; 241
    1fee:	cf 2e       	mov	r12, r31
    1ff0:	d1 2c       	mov	r13, r1
    1ff2:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1ff4:	01 e0       	ldi	r16, 0x01	; 1
    1ff6:	f1 2c       	mov	r15, r1
    1ff8:	31 c0       	rjmp	.+98     	; 0x205c <Endpoint_Write_Control_PStream_LE+0xb6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ffa:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ffe:	88 23       	and	r24, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <Endpoint_Write_Control_PStream_LE+0x5e>
    2002:	43 c0       	rjmp	.+134    	; 0x208a <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2004:	85 30       	cpi	r24, 0x05	; 5
    2006:	09 f4       	brne	.+2      	; 0x200a <Endpoint_Write_Control_PStream_LE+0x64>
    2008:	42 c0       	rjmp	.+132    	; 0x208e <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    200a:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    200c:	83 fd       	sbrc	r24, 3
    200e:	41 c0       	rjmp	.+130    	; 0x2092 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2010:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2012:	82 fd       	sbrc	r24, 2
    2014:	33 c0       	rjmp	.+102    	; 0x207c <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2016:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    2018:	80 ff       	sbrs	r24, 0
    201a:	20 c0       	rjmp	.+64     	; 0x205c <Endpoint_Write_Control_PStream_LE+0xb6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    201c:	eb 01       	movw	r28, r22
    201e:	18 81       	ld	r17, Y
    2020:	ea 01       	movw	r28, r20
    2022:	88 81       	ld	r24, Y
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2028:	21 15       	cp	r18, r1
    202a:	31 05       	cpc	r19, r1
    202c:	81 f0       	breq	.+32     	; 0x204e <Endpoint_Write_Control_PStream_LE+0xa8>
    202e:	88 30       	cpi	r24, 0x08	; 8
    2030:	91 05       	cpc	r25, r1
    2032:	68 f4       	brcc	.+26     	; 0x204e <Endpoint_Write_Control_PStream_LE+0xa8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2034:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2036:	e6 01       	movw	r28, r12
    2038:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    203a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    203c:	21 50       	subi	r18, 0x01	; 1
    203e:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    2040:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2042:	21 15       	cp	r18, r1
    2044:	31 05       	cpc	r19, r1
    2046:	19 f0       	breq	.+6      	; 0x204e <Endpoint_Write_Control_PStream_LE+0xa8>
    2048:	88 30       	cpi	r24, 0x08	; 8
    204a:	91 05       	cpc	r25, r1
    204c:	99 f7       	brne	.-26     	; 0x2034 <Endpoint_Write_Control_PStream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    204e:	10 2f       	mov	r17, r16
    2050:	08 97       	sbiw	r24, 0x08	; 8
    2052:	09 f0       	breq	.+2      	; 0x2056 <Endpoint_Write_Control_PStream_LE+0xb0>
    2054:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2056:	8c 91       	ld	r24, X
    2058:	8e 77       	andi	r24, 0x7E	; 126
    205a:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    205c:	21 15       	cp	r18, r1
    205e:	31 05       	cpc	r19, r1
    2060:	61 f6       	brne	.-104    	; 0x1ffa <Endpoint_Write_Control_PStream_LE+0x54>
    2062:	11 11       	cpse	r17, r1
    2064:	ca cf       	rjmp	.-108    	; 0x1ffa <Endpoint_Write_Control_PStream_LE+0x54>
    2066:	0a c0       	rjmp	.+20     	; 0x207c <Endpoint_Write_Control_PStream_LE+0xd6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2068:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    206c:	88 23       	and	r24, r24
    206e:	99 f0       	breq	.+38     	; 0x2096 <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2070:	85 30       	cpi	r24, 0x05	; 5
    2072:	99 f0       	breq	.+38     	; 0x209a <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2074:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2076:	83 ff       	sbrs	r24, 3
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <Endpoint_Write_Control_PStream_LE+0xda>
    207a:	11 c0       	rjmp	.+34     	; 0x209e <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    207c:	e8 ee       	ldi	r30, 0xE8	; 232
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2082:	82 ff       	sbrs	r24, 2
    2084:	f1 cf       	rjmp	.-30     	; 0x2068 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	0b c0       	rjmp	.+22     	; 0x20a0 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	09 c0       	rjmp	.+18     	; 0x20a0 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	07 c0       	rjmp	.+14     	; 0x20a0 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	05 c0       	rjmp	.+10     	; 0x20a0 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2096:	82 e0       	ldi	r24, 0x02	; 2
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    209e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	ff 90       	pop	r15
    20aa:	df 90       	pop	r13
    20ac:	cf 90       	pop	r12
    20ae:	08 95       	ret

000020b0 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    20b0:	8f 92       	push	r8
    20b2:	9f 92       	push	r9
    20b4:	bf 92       	push	r11
    20b6:	cf 92       	push	r12
    20b8:	df 92       	push	r13
    20ba:	ef 92       	push	r14
    20bc:	ff 92       	push	r15
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	87 30       	cpi	r24, 0x07	; 7
    20c8:	70 f1       	brcs	.+92     	; 0x2126 <Endpoint_ConfigureEndpoint_Prv+0x76>
    20ca:	26 c0       	rjmp	.+76     	; 0x2118 <Endpoint_ConfigureEndpoint_Prv+0x68>
    20cc:	29 2f       	mov	r18, r25
    20ce:	2f 70       	andi	r18, 0x0F	; 15
    20d0:	e7 01       	movw	r28, r14
    20d2:	28 83       	st	Y, r18
    20d4:	89 17       	cp	r24, r25
    20d6:	31 f0       	breq	.+12     	; 0x20e4 <Endpoint_ConfigureEndpoint_Prv+0x34>
    20d8:	e8 01       	movw	r28, r16
    20da:	78 81       	ld	r23, Y
    20dc:	20 81       	ld	r18, Z
    20de:	e4 01       	movw	r28, r8
    20e0:	58 81       	ld	r21, Y
    20e2:	03 c0       	rjmp	.+6      	; 0x20ea <Endpoint_ConfigureEndpoint_Prv+0x3a>
    20e4:	24 2f       	mov	r18, r20
    20e6:	76 2f       	mov	r23, r22
    20e8:	5b 2d       	mov	r21, r11
    20ea:	21 ff       	sbrs	r18, 1
    20ec:	12 c0       	rjmp	.+36     	; 0x2112 <Endpoint_ConfigureEndpoint_Prv+0x62>
    20ee:	3c 91       	ld	r19, X
    20f0:	3e 7f       	andi	r19, 0xFE	; 254
    20f2:	3c 93       	st	X, r19
    20f4:	30 81       	ld	r19, Z
    20f6:	3d 7f       	andi	r19, 0xFD	; 253
    20f8:	30 83       	st	Z, r19
    20fa:	3c 91       	ld	r19, X
    20fc:	31 60       	ori	r19, 0x01	; 1
    20fe:	3c 93       	st	X, r19
    2100:	e8 01       	movw	r28, r16
    2102:	78 83       	st	Y, r23
    2104:	20 83       	st	Z, r18
    2106:	e4 01       	movw	r28, r8
    2108:	58 83       	st	Y, r21
    210a:	e6 01       	movw	r28, r12
    210c:	28 81       	ld	r18, Y
    210e:	22 23       	and	r18, r18
    2110:	44 f4       	brge	.+16     	; 0x2122 <Endpoint_ConfigureEndpoint_Prv+0x72>
    2112:	9f 5f       	subi	r25, 0xFF	; 255
    2114:	97 30       	cpi	r25, 0x07	; 7
    2116:	d1 f6       	brne	.-76     	; 0x20cc <Endpoint_ConfigureEndpoint_Prv+0x1c>
    2118:	8f 70       	andi	r24, 0x0F	; 15
    211a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	21 c0       	rjmp	.+66     	; 0x2164 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	1f c0       	rjmp	.+62     	; 0x2164 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    2126:	98 2f       	mov	r25, r24
    2128:	9f 70       	andi	r25, 0x0F	; 15
    212a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    212e:	98 2f       	mov	r25, r24
    2130:	24 2f       	mov	r18, r20
    2132:	76 2f       	mov	r23, r22
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	ab ee       	ldi	r26, 0xEB	; 235
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	ed ee       	ldi	r30, 0xED	; 237
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	0c ee       	ldi	r16, 0xEC	; 236
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	0f 2e       	mov	r0, r31
    2144:	f0 ef       	ldi	r31, 0xF0	; 240
    2146:	8f 2e       	mov	r8, r31
    2148:	91 2c       	mov	r9, r1
    214a:	f0 2d       	mov	r31, r0
    214c:	0f 2e       	mov	r0, r31
    214e:	fe ee       	ldi	r31, 0xEE	; 238
    2150:	cf 2e       	mov	r12, r31
    2152:	d1 2c       	mov	r13, r1
    2154:	f0 2d       	mov	r31, r0
    2156:	0f 2e       	mov	r0, r31
    2158:	f9 ee       	ldi	r31, 0xE9	; 233
    215a:	ef 2e       	mov	r14, r31
    215c:	f1 2c       	mov	r15, r1
    215e:	f0 2d       	mov	r31, r0
    2160:	b1 2c       	mov	r11, r1
    2162:	c3 cf       	rjmp	.-122    	; 0x20ea <Endpoint_ConfigureEndpoint_Prv+0x3a>
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	1f 91       	pop	r17
    216a:	0f 91       	pop	r16
    216c:	ff 90       	pop	r15
    216e:	ef 90       	pop	r14
    2170:	df 90       	pop	r13
    2172:	cf 90       	pop	r12
    2174:	bf 90       	pop	r11
    2176:	9f 90       	pop	r9
    2178:	8f 90       	pop	r8
    217a:	08 95       	ret

0000217c <Endpoint_ConfigureEndpointTable>:
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	66 23       	and	r22, r22
    218a:	e9 f1       	breq	.+122    	; 0x2206 <Endpoint_ConfigureEndpointTable+0x8a>
    218c:	06 2f       	mov	r16, r22
    218e:	c8 2f       	mov	r28, r24
    2190:	d9 2f       	mov	r29, r25
    2192:	10 e0       	ldi	r17, 0x00	; 0
    2194:	0f 2e       	mov	r0, r31
    2196:	f6 e0       	ldi	r31, 0x06	; 6
    2198:	ff 2e       	mov	r15, r31
    219a:	f0 2d       	mov	r31, r0
    219c:	68 94       	set
    219e:	ee 24       	eor	r14, r14
    21a0:	e1 f8       	bld	r14, 1
    21a2:	58 81       	ld	r21, Y
    21a4:	55 23       	and	r21, r21
    21a6:	49 f1       	breq	.+82     	; 0x21fa <Endpoint_ConfigureEndpointTable+0x7e>
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	e9 81       	ldd	r30, Y+1	; 0x01
    21ac:	fa 81       	ldd	r31, Y+2	; 0x02
    21ae:	6b 81       	ldd	r22, Y+3	; 0x03
    21b0:	85 2f       	mov	r24, r21
    21b2:	8f 70       	andi	r24, 0x0F	; 15
    21b4:	87 30       	cpi	r24, 0x07	; 7
    21b6:	48 f5       	brcc	.+82     	; 0x220a <Endpoint_ConfigureEndpointTable+0x8e>
    21b8:	92 30       	cpi	r25, 0x02	; 2
    21ba:	10 f4       	brcc	.+4      	; 0x21c0 <Endpoint_ConfigureEndpointTable+0x44>
    21bc:	4e 2d       	mov	r20, r14
    21be:	01 c0       	rjmp	.+2      	; 0x21c2 <Endpoint_ConfigureEndpointTable+0x46>
    21c0:	4f 2d       	mov	r20, r15
    21c2:	e9 30       	cpi	r30, 0x09	; 9
    21c4:	f1 05       	cpc	r31, r1
    21c6:	50 f0       	brcs	.+20     	; 0x21dc <Endpoint_ConfigureEndpointTable+0x60>
    21c8:	28 e0       	ldi	r18, 0x08	; 8
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9f 5f       	subi	r25, 0xFF	; 255
    21d0:	22 0f       	add	r18, r18
    21d2:	33 1f       	adc	r19, r19
    21d4:	2e 17       	cp	r18, r30
    21d6:	3f 07       	cpc	r19, r31
    21d8:	d0 f3       	brcs	.-12     	; 0x21ce <Endpoint_ConfigureEndpointTable+0x52>
    21da:	01 c0       	rjmp	.+2      	; 0x21de <Endpoint_ConfigureEndpointTable+0x62>
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	92 95       	swap	r25
    21e0:	90 7f       	andi	r25, 0xF0	; 240
    21e2:	49 2b       	or	r20, r25
    21e4:	90 e4       	ldi	r25, 0x40	; 64
    21e6:	69 9f       	mul	r22, r25
    21e8:	b0 01       	movw	r22, r0
    21ea:	11 24       	eor	r1, r1
    21ec:	55 1f       	adc	r21, r21
    21ee:	55 27       	eor	r21, r21
    21f0:	55 1f       	adc	r21, r21
    21f2:	65 2b       	or	r22, r21
    21f4:	5d df       	rcall	.-326    	; 0x20b0 <Endpoint_ConfigureEndpoint_Prv>
    21f6:	88 23       	and	r24, r24
    21f8:	49 f0       	breq	.+18     	; 0x220c <Endpoint_ConfigureEndpointTable+0x90>
    21fa:	1f 5f       	subi	r17, 0xFF	; 255
    21fc:	25 96       	adiw	r28, 0x05	; 5
    21fe:	01 13       	cpse	r16, r17
    2200:	d0 cf       	rjmp	.-96     	; 0x21a2 <Endpoint_ConfigureEndpointTable+0x26>
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	03 c0       	rjmp	.+6      	; 0x220c <Endpoint_ConfigureEndpointTable+0x90>
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	01 c0       	rjmp	.+2      	; 0x220c <Endpoint_ConfigureEndpointTable+0x90>
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	08 95       	ret

0000221a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    221a:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <USB_ControlRequest>
    221e:	88 23       	and	r24, r24
    2220:	44 f0       	brlt	.+16     	; 0x2232 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2222:	e8 ee       	ldi	r30, 0xE8	; 232
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	14 c0       	rjmp	.+40     	; 0x2250 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2228:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>
    222c:	81 11       	cpse	r24, r1
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <Endpoint_ClearStatusStage+0x1c>
    2230:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2232:	e8 ee       	ldi	r30, 0xE8	; 232
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2238:	82 ff       	sbrs	r24, 2
    223a:	f6 cf       	rjmp	.-20     	; 0x2228 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    223c:	e8 ee       	ldi	r30, 0xE8	; 232
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8b 77       	andi	r24, 0x7B	; 123
    2244:	80 83       	st	Z, r24
    2246:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2248:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>
    224c:	88 23       	and	r24, r24
    224e:	41 f0       	breq	.+16     	; 0x2260 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2250:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2252:	80 ff       	sbrs	r24, 0
    2254:	f9 cf       	rjmp	.-14     	; 0x2248 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2256:	e8 ee       	ldi	r30, 0xE8	; 232
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	8e 77       	andi	r24, 0x7E	; 126
    225e:	80 83       	st	Z, r24
    2260:	08 95       	ret

00002262 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    226a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
    226e:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
    2272:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2274:	ac ee       	ldi	r26, 0xEC	; 236
    2276:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2278:	e8 ee       	ldi	r30, 0xE8	; 232
    227a:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    227c:	0b ee       	ldi	r16, 0xEB	; 235
    227e:	10 e0       	ldi	r17, 0x00	; 0
    2280:	44 ee       	ldi	r20, 0xE4	; 228
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <Endpoint_WaitUntilReady+0x26>
    2286:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2288:	9c 91       	ld	r25, X
    228a:	89 2f       	mov	r24, r25
    228c:	81 70       	andi	r24, 0x01	; 1
    228e:	90 fd       	sbrc	r25, 0
    2290:	1d c0       	rjmp	.+58     	; 0x22cc <Endpoint_WaitUntilReady+0x6a>
    2292:	20 c0       	rjmp	.+64     	; 0x22d4 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2294:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2298:	88 23       	and	r24, r24
    229a:	81 f0       	breq	.+32     	; 0x22bc <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    229c:	85 30       	cpi	r24, 0x05	; 5
    229e:	81 f0       	breq	.+32     	; 0x22c0 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    22a0:	e8 01       	movw	r28, r16
    22a2:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    22a4:	85 fd       	sbrc	r24, 5
    22a6:	0e c0       	rjmp	.+28     	; 0x22c4 <Endpoint_WaitUntilReady+0x62>
    22a8:	ea 01       	movw	r28, r20
    22aa:	88 81       	ld	r24, Y
    22ac:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    22ae:	28 17       	cp	r18, r24
    22b0:	39 07       	cpc	r19, r25
    22b2:	51 f3       	breq	.-44     	; 0x2288 <Endpoint_WaitUntilReady+0x26>
    22b4:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    22b6:	39 f7       	brne	.-50     	; 0x2286 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    22b8:	84 e0       	ldi	r24, 0x04	; 4
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	0d c0       	rjmp	.+26     	; 0x22da <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	0b c0       	rjmp	.+22     	; 0x22da <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	09 c0       	rjmp	.+18     	; 0x22da <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	07 c0       	rjmp	.+14     	; 0x22da <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22cc:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    22ce:	80 ff       	sbrs	r24, 0
    22d0:	e1 cf       	rjmp	.-62     	; 0x2294 <Endpoint_WaitUntilReady+0x32>
    22d2:	fa cf       	rjmp	.-12     	; 0x22c8 <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    22d4:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    22d6:	92 ff       	sbrs	r25, 2
    22d8:	dd cf       	rjmp	.-70     	; 0x2294 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	08 95       	ret

000022e4 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    22ec:	4c d0       	rcall	.+152    	; 0x2386 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    22ee:	53 d0       	rcall	.+166    	; 0x2396 <USB_INT_ClearAllInterrupts>
    22f0:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    22f2:	d0 e0       	ldi	r29, 0x00	; 0
    22f4:	88 81       	ld	r24, Y
    22f6:	8f 77       	andi	r24, 0x7F	; 127
    22f8:	88 83       	st	Y, r24
    22fa:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    22fc:	80 68       	ori	r24, 0x80	; 128
    22fe:	88 83       	st	Y, r24
    2300:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2302:	8f 7d       	andi	r24, 0xDF	; 223
    2304:	88 83       	st	Y, r24
    2306:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2308:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    230c:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    2310:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2314:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2318:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    231a:	10 e0       	ldi	r17, 0x00	; 0
    231c:	f8 01       	movw	r30, r16
    231e:	80 81       	ld	r24, Z
    2320:	8b 7f       	andi	r24, 0xFB	; 251
    2322:	80 83       	st	Z, r24
    2324:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2326:	81 60       	ori	r24, 0x01	; 1
    2328:	88 83       	st	Y, r24
    232a:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	bf de       	rcall	.-642    	; 0x20b0 <Endpoint_ConfigureEndpoint_Prv>
    2332:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	8e 7f       	andi	r24, 0xFE	; 254
    233a:	80 83       	st	Z, r24
    233c:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	81 60       	ori	r24, 0x01	; 1
    2344:	80 83       	st	Z, r24
    2346:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2348:	88 60       	ori	r24, 0x08	; 8
    234a:	80 83       	st	Z, r24
    234c:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    234e:	80 81       	ld	r24, Z
    2350:	8e 7f       	andi	r24, 0xFE	; 254
    2352:	80 83       	st	Z, r24
    2354:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2356:	80 61       	ori	r24, 0x10	; 16
    2358:	88 83       	st	Y, r24
    235a:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    235c:	cf 91       	pop	r28
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	08 95       	ret

00002364 <USB_Init>:
    2364:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	8f 7e       	andi	r24, 0xEF	; 239
    236c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    236e:	e7 ed       	ldi	r30, 0xD7	; 215
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	81 60       	ori	r24, 0x01	; 1
    2376:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2378:	84 e0       	ldi	r24, 0x04	; 4
    237a:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <USB_IsInitialized>

	USB_ResetInterface();
    2382:	b0 cf       	rjmp	.-160    	; 0x22e4 <USB_ResetInterface>
    2384:	08 95       	ret

00002386 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    2386:	e8 ed       	ldi	r30, 0xD8	; 216
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	8e 7f       	andi	r24, 0xFE	; 254
    238e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2390:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    2394:	08 95       	ret

00002396 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2396:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    239a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    239e:	08 95       	ret

000023a0 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    23a0:	1f 92       	push	r1
    23a2:	0f 92       	push	r0
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	0f 92       	push	r0
    23a8:	11 24       	eor	r1, r1
    23aa:	2f 93       	push	r18
    23ac:	3f 93       	push	r19
    23ae:	4f 93       	push	r20
    23b0:	5f 93       	push	r21
    23b2:	6f 93       	push	r22
    23b4:	7f 93       	push	r23
    23b6:	8f 93       	push	r24
    23b8:	9f 93       	push	r25
    23ba:	af 93       	push	r26
    23bc:	bf 93       	push	r27
    23be:	ef 93       	push	r30
    23c0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    23c2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    23c6:	82 ff       	sbrs	r24, 2
    23c8:	0a c0       	rjmp	.+20     	; 0x23de <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    23ca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    23ce:	82 ff       	sbrs	r24, 2
    23d0:	06 c0       	rjmp	.+12     	; 0x23de <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    23d2:	e1 ee       	ldi	r30, 0xE1	; 225
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8b 7f       	andi	r24, 0xFB	; 251
    23da:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    23dc:	ee d9       	rcall	.-3108   	; 0x17ba <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    23de:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    23e2:	80 ff       	sbrs	r24, 0
    23e4:	1d c0       	rjmp	.+58     	; 0x2420 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    23e6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    23ea:	80 ff       	sbrs	r24, 0
    23ec:	19 c0       	rjmp	.+50     	; 0x2420 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    23ee:	ea ed       	ldi	r30, 0xDA	; 218
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8e 7f       	andi	r24, 0xFE	; 254
    23f6:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    23f8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    23fc:	80 ff       	sbrs	r24, 0
    23fe:	0c c0       	rjmp	.+24     	; 0x2418 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2400:	80 e1       	ldi	r24, 0x10	; 16
    2402:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2404:	82 e1       	ldi	r24, 0x12	; 18
    2406:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2408:	09 b4       	in	r0, 0x29	; 41
    240a:	00 fe       	sbrs	r0, 0
    240c:	fd cf       	rjmp	.-6      	; 0x2408 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <USB_DeviceState>
			EVENT_USB_Device_Connect();
    2414:	c3 d9       	rcall	.-3194   	; 0x179c <EVENT_USB_Device_Connect>
    2416:	04 c0       	rjmp	.+8      	; 0x2420 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2418:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    241a:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    241e:	bf d9       	rcall	.-3202   	; 0x179e <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2420:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2424:	80 ff       	sbrs	r24, 0
    2426:	16 c0       	rjmp	.+44     	; 0x2454 <__vector_10+0xb4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2428:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    242c:	80 ff       	sbrs	r24, 0
    242e:	12 c0       	rjmp	.+36     	; 0x2454 <__vector_10+0xb4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2430:	e2 ee       	ldi	r30, 0xE2	; 226
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	8e 7f       	andi	r24, 0xFE	; 254
    2438:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    243a:	80 81       	ld	r24, Z
    243c:	80 61       	ori	r24, 0x10	; 16
    243e:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2440:	e8 ed       	ldi	r30, 0xD8	; 216
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	80 62       	ori	r24, 0x20	; 32
    2448:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    244a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    244c:	85 e0       	ldi	r24, 0x05	; 5
    244e:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    2452:	e0 d1       	rcall	.+960    	; 0x2814 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2454:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2458:	84 ff       	sbrs	r24, 4
    245a:	2f c0       	rjmp	.+94     	; 0x24ba <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    245c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    2460:	84 ff       	sbrs	r24, 4
    2462:	2b c0       	rjmp	.+86     	; 0x24ba <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2464:	80 e1       	ldi	r24, 0x10	; 16
    2466:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2468:	82 e1       	ldi	r24, 0x12	; 18
    246a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    246c:	09 b4       	in	r0, 0x29	; 41
    246e:	00 fe       	sbrs	r0, 0
    2470:	fd cf       	rjmp	.-6      	; 0x246c <__vector_10+0xcc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2472:	e8 ed       	ldi	r30, 0xD8	; 216
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	8f 7d       	andi	r24, 0xDF	; 223
    247a:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    247c:	e1 ee       	ldi	r30, 0xE1	; 225
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	8f 7e       	andi	r24, 0xEF	; 239
    2484:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2486:	e2 ee       	ldi	r30, 0xE2	; 226
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	8f 7e       	andi	r24, 0xEF	; 239
    248e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2490:	80 81       	ld	r24, Z
    2492:	81 60       	ori	r24, 0x01	; 1
    2494:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2496:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <USB_Device_ConfigurationNumber>
    249a:	88 23       	and	r24, r24
    249c:	21 f0       	breq	.+8      	; 0x24a6 <__vector_10+0x106>
		  USB_DeviceState = DEVICE_STATE_Configured;
    249e:	84 e0       	ldi	r24, 0x04	; 4
    24a0:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <USB_DeviceState>
    24a4:	09 c0       	rjmp	.+18     	; 0x24b8 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    24a6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    24aa:	88 23       	and	r24, r24
    24ac:	14 f0       	brlt	.+4      	; 0x24b2 <__vector_10+0x112>
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	01 c0       	rjmp	.+2      	; 0x24b4 <__vector_10+0x114>
    24b2:	83 e0       	ldi	r24, 0x03	; 3
    24b4:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    24b8:	ad d1       	rcall	.+858    	; 0x2814 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    24ba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    24be:	83 ff       	sbrs	r24, 3
    24c0:	1e c0       	rjmp	.+60     	; 0x24fe <__vector_10+0x15e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    24c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    24c6:	83 ff       	sbrs	r24, 3
    24c8:	1a c0       	rjmp	.+52     	; 0x24fe <__vector_10+0x15e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    24ca:	e1 ee       	ldi	r30, 0xE1	; 225
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	87 7f       	andi	r24, 0xF7	; 247
    24d2:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    24d4:	82 e0       	ldi	r24, 0x02	; 2
    24d6:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    24da:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    24de:	80 81       	ld	r24, Z
    24e0:	8e 7f       	andi	r24, 0xFE	; 254
    24e2:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    24e4:	e2 ee       	ldi	r30, 0xE2	; 226
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	8e 7f       	andi	r24, 0xFE	; 254
    24ec:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    24ee:	80 81       	ld	r24, Z
    24f0:	80 61       	ori	r24, 0x10	; 16
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    24f2:	80 83       	st	Z, r24
    24f4:	42 e0       	ldi	r20, 0x02	; 2
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	da dd       	rcall	.-1100   	; 0x20b0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    24fc:	8b d1       	rcall	.+790    	; 0x2814 <USB_Event_Stub>
    24fe:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2500:	ef 91       	pop	r30
    2502:	bf 91       	pop	r27
    2504:	af 91       	pop	r26
    2506:	9f 91       	pop	r25
    2508:	8f 91       	pop	r24
    250a:	7f 91       	pop	r23
    250c:	6f 91       	pop	r22
    250e:	5f 91       	pop	r21
    2510:	4f 91       	pop	r20
    2512:	3f 91       	pop	r19
    2514:	2f 91       	pop	r18
    2516:	0f 90       	pop	r0
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	0f 90       	pop	r0
    251c:	1f 90       	pop	r1
    251e:	18 95       	reti

00002520 <USB_Device_ProcessControlRequest>:
    2520:	0f 93       	push	r16
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	aa 97       	sbiw	r28, 0x2a	; 42
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	ec ea       	ldi	r30, 0xAC	; 172
    253a:	f3 e0       	ldi	r31, 0x03	; 3
    253c:	24 eb       	ldi	r18, 0xB4	; 180
    253e:	33 e0       	ldi	r19, 0x03	; 3
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2540:	a1 ef       	ldi	r26, 0xF1	; 241
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2546:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2548:	2e 17       	cp	r18, r30
    254a:	3f 07       	cpc	r19, r31
    254c:	d9 f7       	brne	.-10     	; 0x2544 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    254e:	31 d9       	rcall	.-3486   	; 0x17b2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2550:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	if (Endpoint_IsSETUPReceived())
    2554:	83 ff       	sbrs	r24, 3
    2556:	39 c1       	rjmp	.+626    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2558:	ec ea       	ldi	r30, 0xAC	; 172
    255a:	f3 e0       	ldi	r31, 0x03	; 3
    255c:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    255e:	81 81       	ldd	r24, Z+1	; 0x01
    2560:	85 30       	cpi	r24, 0x05	; 5
    2562:	09 f4       	brne	.+2      	; 0x2566 <USB_Device_ProcessControlRequest+0x46>
    2564:	7f c0       	rjmp	.+254    	; 0x2664 <USB_Device_ProcessControlRequest+0x144>
    2566:	30 f4       	brcc	.+12     	; 0x2574 <USB_Device_ProcessControlRequest+0x54>
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	c9 f1       	breq	.+114    	; 0x25de <USB_Device_ProcessControlRequest+0xbe>
    256c:	68 f0       	brcs	.+26     	; 0x2588 <USB_Device_ProcessControlRequest+0x68>
    256e:	83 30       	cpi	r24, 0x03	; 3
    2570:	b1 f1       	breq	.+108    	; 0x25de <USB_Device_ProcessControlRequest+0xbe>
    2572:	2b c1       	rjmp	.+598    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
    2574:	88 30       	cpi	r24, 0x08	; 8
    2576:	09 f4       	brne	.+2      	; 0x257a <USB_Device_ProcessControlRequest+0x5a>
    2578:	f2 c0       	rjmp	.+484    	; 0x275e <USB_Device_ProcessControlRequest+0x23e>
    257a:	89 30       	cpi	r24, 0x09	; 9
    257c:	09 f4       	brne	.+2      	; 0x2580 <USB_Device_ProcessControlRequest+0x60>
    257e:	ff c0       	rjmp	.+510    	; 0x277e <USB_Device_ProcessControlRequest+0x25e>
    2580:	86 30       	cpi	r24, 0x06	; 6
    2582:	09 f0       	breq	.+2      	; 0x2586 <USB_Device_ProcessControlRequest+0x66>
    2584:	22 c1       	rjmp	.+580    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
    2586:	91 c0       	rjmp	.+290    	; 0x26aa <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2588:	90 38       	cpi	r25, 0x80	; 128
    258a:	21 f0       	breq	.+8      	; 0x2594 <USB_Device_ProcessControlRequest+0x74>
    258c:	92 38       	cpi	r25, 0x82	; 130
    258e:	09 f0       	breq	.+2      	; 0x2592 <USB_Device_ProcessControlRequest+0x72>
    2590:	1c c1       	rjmp	.+568    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
    2592:	08 c0       	rjmp	.+16     	; 0x25a4 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2594:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2598:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <USB_Device_RemoteWakeupEnabled>
    259c:	99 23       	and	r25, r25
    259e:	89 f0       	breq	.+34     	; 0x25c2 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    25a0:	82 60       	ori	r24, 0x02	; 2
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <USB_Device_ProcessControlRequest+0xa2>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    25a4:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <USB_ControlRequest+0x4>
    25a8:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    25aa:	87 30       	cpi	r24, 0x07	; 7
    25ac:	08 f0       	brcs	.+2      	; 0x25b0 <USB_Device_ProcessControlRequest+0x90>
    25ae:	0d c1       	rjmp	.+538    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25b0:	e9 ee       	ldi	r30, 0xE9	; 233
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    25b6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    25ba:	85 fb       	bst	r24, 5
    25bc:	88 27       	eor	r24, r24
    25be:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25c0:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25c2:	e8 ee       	ldi	r30, 0xE8	; 232
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	90 81       	ld	r25, Z
    25c8:	97 7f       	andi	r25, 0xF7	; 247
    25ca:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    25cc:	a1 ef       	ldi	r26, 0xF1	; 241
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    25d2:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    25d4:	80 81       	ld	r24, Z
    25d6:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    25d8:	80 83       	st	Z, r24
    25da:	1f de       	rcall	.-962    	; 0x221a <Endpoint_ClearStatusStage>
    25dc:	f6 c0       	rjmp	.+492    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    25de:	99 23       	and	r25, r25
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <USB_Device_ProcessControlRequest+0xc4>
    25e2:	02 c1       	rjmp	.+516    	; 0x27e8 <USB_Device_ProcessControlRequest+0x2c8>
    25e4:	92 30       	cpi	r25, 0x02	; 2
    25e6:	09 f0       	breq	.+2      	; 0x25ea <USB_Device_ProcessControlRequest+0xca>
    25e8:	f0 c0       	rjmp	.+480    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
    25ea:	03 c1       	rjmp	.+518    	; 0x27f2 <USB_Device_ProcessControlRequest+0x2d2>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    25ec:	91 e0       	ldi	r25, 0x01	; 1
    25ee:	83 30       	cpi	r24, 0x03	; 3
    25f0:	09 f0       	breq	.+2      	; 0x25f4 <USB_Device_ProcessControlRequest+0xd4>
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <USB_Device_RemoteWakeupEnabled>
    25f8:	2c c0       	rjmp	.+88     	; 0x2652 <USB_Device_ProcessControlRequest+0x132>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    25fa:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <USB_ControlRequest+0x4>
    25fe:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    2600:	9f ef       	ldi	r25, 0xFF	; 255
    2602:	98 0f       	add	r25, r24
    2604:	96 30       	cpi	r25, 0x06	; 6
    2606:	08 f0       	brcs	.+2      	; 0x260a <USB_Device_ProcessControlRequest+0xea>
    2608:	e0 c0       	rjmp	.+448    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    260a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    260e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2612:	90 ff       	sbrs	r25, 0
    2614:	1e c0       	rjmp	.+60     	; 0x2652 <USB_Device_ProcessControlRequest+0x132>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2616:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <USB_ControlRequest+0x1>
    261a:	93 30       	cpi	r25, 0x03	; 3
    261c:	31 f4       	brne	.+12     	; 0x262a <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    261e:	eb ee       	ldi	r30, 0xEB	; 235
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	80 62       	ori	r24, 0x20	; 32
    2626:	80 83       	st	Z, r24
    2628:	14 c0       	rjmp	.+40     	; 0x2652 <USB_Device_ProcessControlRequest+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    262a:	eb ee       	ldi	r30, 0xEB	; 235
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	90 81       	ld	r25, Z
    2630:	90 61       	ori	r25, 0x10	; 16
    2632:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2634:	21 e0       	ldi	r18, 0x01	; 1
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	a9 01       	movw	r20, r18
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <USB_Device_ProcessControlRequest+0x120>
    263c:	44 0f       	add	r20, r20
    263e:	55 1f       	adc	r21, r21
    2640:	8a 95       	dec	r24
    2642:	e2 f7       	brpl	.-8      	; 0x263c <USB_Device_ProcessControlRequest+0x11c>
    2644:	aa ee       	ldi	r26, 0xEA	; 234
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	4c 93       	st	X, r20
				UERST = 0;
    264a:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    264c:	80 81       	ld	r24, Z
    264e:	88 60       	ori	r24, 0x08	; 8
    2650:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2652:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2656:	e8 ee       	ldi	r30, 0xE8	; 232
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    265e:	80 83       	st	Z, r24
    2660:	dc dd       	rcall	.-1096   	; 0x221a <Endpoint_ClearStatusStage>
    2662:	b3 c0       	rjmp	.+358    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2664:	91 11       	cpse	r25, r1
    2666:	b1 c0       	rjmp	.+354    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2668:	10 91 ae 03 	lds	r17, 0x03AE	; 0x8003ae <USB_ControlRequest+0x2>
    266c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    266e:	e3 ee       	ldi	r30, 0xE3	; 227
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	80 78       	andi	r24, 0x80	; 128
    2676:	81 2b       	or	r24, r17
    2678:	80 83       	st	Z, r24
    267a:	e8 ee       	ldi	r30, 0xE8	; 232
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2682:	80 83       	st	Z, r24
    2684:	ca dd       	rcall	.-1132   	; 0x221a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2686:	e8 ee       	ldi	r30, 0xE8	; 232
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    268c:	80 ff       	sbrs	r24, 0
    268e:	fd cf       	rjmp	.-6      	; 0x268a <USB_Device_ProcessControlRequest+0x16a>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2690:	e3 ee       	ldi	r30, 0xE3	; 227
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	80 68       	ori	r24, 0x80	; 128
    2698:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    269a:	11 11       	cpse	r17, r1
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <USB_Device_ProcessControlRequest+0x182>
    269e:	82 e0       	ldi	r24, 0x02	; 2
    26a0:	01 c0       	rjmp	.+2      	; 0x26a4 <USB_Device_ProcessControlRequest+0x184>
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <USB_DeviceState>
    26a8:	90 c0       	rjmp	.+288    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    26aa:	90 58       	subi	r25, 0x80	; 128
    26ac:	92 30       	cpi	r25, 0x02	; 2
    26ae:	08 f0       	brcs	.+2      	; 0x26b2 <USB_Device_ProcessControlRequest+0x192>
    26b0:	8c c0       	rjmp	.+280    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    26b2:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <USB_ControlRequest+0x2>
    26b6:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <USB_ControlRequest+0x3>
    26ba:	8c 3d       	cpi	r24, 0xDC	; 220
    26bc:	53 e0       	ldi	r21, 0x03	; 3
    26be:	95 07       	cpc	r25, r21
    26c0:	99 f5       	brne	.+102    	; 0x2728 <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    26c2:	83 e0       	ldi	r24, 0x03	; 3
    26c4:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    26c6:	8a e2       	ldi	r24, 0x2A	; 42
    26c8:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    26ca:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    26cc:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    26ce:	de 01       	movw	r26, r28
    26d0:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    26d2:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    26d4:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    26d6:	41 e2       	ldi	r20, 0x21	; 33
    26d8:	e3 2f       	mov	r30, r19
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    26e0:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    26e2:	20 ff       	sbrs	r18, 0
    26e4:	03 c0       	rjmp	.+6      	; 0x26ec <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
    26e6:	82 95       	swap	r24
    26e8:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    26ea:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    26ec:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    26ee:	8a 30       	cpi	r24, 0x0A	; 10
    26f0:	18 f0       	brcs	.+6      	; 0x26f8 <USB_Device_ProcessControlRequest+0x1d8>
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	c7 96       	adiw	r24, 0x37	; 55
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <USB_Device_ProcessControlRequest+0x1dc>
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	c0 96       	adiw	r24, 0x30	; 48
    26fc:	8d 93       	st	X+, r24
    26fe:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2700:	2f 5f       	subi	r18, 0xFF	; 255
    2702:	24 31       	cpi	r18, 0x14	; 20
    2704:	49 f7       	brne	.-46     	; 0x26d8 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2706:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2708:	08 ee       	ldi	r16, 0xE8	; 232
    270a:	10 e0       	ldi	r17, 0x00	; 0
    270c:	f8 01       	movw	r30, r16
    270e:	80 81       	ld	r24, Z
    2710:	87 7f       	andi	r24, 0xF7	; 247
    2712:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2714:	6a e2       	ldi	r22, 0x2A	; 42
    2716:	70 e0       	ldi	r23, 0x00	; 0
    2718:	ce 01       	movw	r24, r28
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	46 db       	rcall	.-2420   	; 0x1daa <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    271e:	f8 01       	movw	r30, r16
    2720:	80 81       	ld	r24, Z
    2722:	8b 77       	andi	r24, 0x7B	; 123
    2724:	80 83       	st	Z, r24
    2726:	51 c0       	rjmp	.+162    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2728:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <USB_ControlRequest+0x4>
    272c:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <USB_ControlRequest+0x5>
    2730:	ae 01       	movw	r20, r28
    2732:	4f 5f       	subi	r20, 0xFF	; 255
    2734:	5f 4f       	sbci	r21, 0xFF	; 255
    2736:	0e 94 b2 01 	call	0x364	; 0x364 <CALLBACK_USB_GetDescriptor>
    273a:	bc 01       	movw	r22, r24
    273c:	89 2b       	or	r24, r25
    273e:	09 f4       	brne	.+2      	; 0x2742 <USB_Device_ProcessControlRequest+0x222>
    2740:	44 c0       	rjmp	.+136    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2742:	08 ee       	ldi	r16, 0xE8	; 232
    2744:	10 e0       	ldi	r17, 0x00	; 0
    2746:	f8 01       	movw	r30, r16
    2748:	90 81       	ld	r25, Z
    274a:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    274c:	90 83       	st	Z, r25
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	29 dc       	rcall	.-1966   	; 0x1fa6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2754:	f8 01       	movw	r30, r16
    2756:	80 81       	ld	r24, Z
    2758:	8b 77       	andi	r24, 0x7B	; 123
    275a:	80 83       	st	Z, r24
    275c:	36 c0       	rjmp	.+108    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    275e:	90 38       	cpi	r25, 0x80	; 128
    2760:	a1 f5       	brne	.+104    	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2762:	e8 ee       	ldi	r30, 0xE8	; 232
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	87 7f       	andi	r24, 0xF7	; 247
    276a:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    276c:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2770:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2774:	80 81       	ld	r24, Z
    2776:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2778:	80 83       	st	Z, r24
    277a:	4f dd       	rcall	.-1378   	; 0x221a <Endpoint_ClearStatusStage>
    277c:	26 c0       	rjmp	.+76     	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    277e:	91 11       	cpse	r25, r1
    2780:	24 c0       	rjmp	.+72     	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2782:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <USB_ControlRequest+0x2>
    2786:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <USB_ControlRequest+0x3>
    278a:	99 27       	eor	r25, r25
    278c:	02 97       	sbiw	r24, 0x02	; 2
    278e:	ec f4       	brge	.+58     	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2790:	e8 ee       	ldi	r30, 0xE8	; 232
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2798:	80 83       	st	Z, r24
    279a:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <USB_ControlRequest+0x2>
    279e:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    27a2:	3b dd       	rcall	.-1418   	; 0x221a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    27a4:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <USB_Device_ConfigurationNumber>
    27a8:	88 23       	and	r24, r24
    27aa:	21 f0       	breq	.+8      	; 0x27b4 <USB_Device_ProcessControlRequest+0x294>
	  USB_DeviceState = DEVICE_STATE_Configured;
    27ac:	84 e0       	ldi	r24, 0x04	; 4
    27ae:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <USB_DeviceState>
    27b2:	09 c0       	rjmp	.+18     	; 0x27c6 <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    27b4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    27b8:	88 23       	and	r24, r24
    27ba:	14 f0       	brlt	.+4      	; 0x27c0 <USB_Device_ProcessControlRequest+0x2a0>
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	01 c0       	rjmp	.+2      	; 0x27c2 <USB_Device_ProcessControlRequest+0x2a2>
    27c0:	84 e0       	ldi	r24, 0x04	; 4
    27c2:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    27c6:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    27ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    27ce:	83 ff       	sbrs	r24, 3
    27d0:	16 c0       	rjmp	.+44     	; 0x27fe <USB_Device_ProcessControlRequest+0x2de>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    27d2:	e8 ee       	ldi	r30, 0xE8	; 232
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	87 7f       	andi	r24, 0xF7	; 247
    27da:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    27dc:	eb ee       	ldi	r30, 0xEB	; 235
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	80 62       	ori	r24, 0x20	; 32
    27e4:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    27e6:	0b c0       	rjmp	.+22     	; 0x27fe <USB_Device_ProcessControlRequest+0x2de>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    27e8:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <USB_ControlRequest+0x2>
    27ec:	91 30       	cpi	r25, 0x01	; 1
    27ee:	69 f7       	brne	.-38     	; 0x27ca <USB_Device_ProcessControlRequest+0x2aa>
    27f0:	fd ce       	rjmp	.-518    	; 0x25ec <USB_Device_ProcessControlRequest+0xcc>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    27f2:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <USB_ControlRequest+0x2>
    27f6:	88 23       	and	r24, r24
    27f8:	09 f4       	brne	.+2      	; 0x27fc <USB_Device_ProcessControlRequest+0x2dc>
    27fa:	ff ce       	rjmp	.-514    	; 0x25fa <USB_Device_ProcessControlRequest+0xda>
    27fc:	2a cf       	rjmp	.-428    	; 0x2652 <USB_Device_ProcessControlRequest+0x132>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    27fe:	aa 96       	adiw	r28, 0x2a	; 42
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	0f 91       	pop	r16
    2812:	08 95       	ret

00002814 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    2814:	08 95       	ret

00002816 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2816:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2818:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <USB_DeviceState>
    281c:	88 23       	and	r24, r24
    281e:	99 f0       	breq	.+38     	; 0x2846 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2820:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    2824:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2826:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    282a:	98 2f       	mov	r25, r24
    282c:	91 70       	andi	r25, 0x01	; 1
    282e:	80 fd       	sbrc	r24, 0
    2830:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2832:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2834:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2838:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    283c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    283e:	70 de       	rcall	.-800    	; 0x2520 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2840:	cf 70       	andi	r28, 0x0F	; 15
    2842:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2846:	cf 91       	pop	r28
    2848:	08 95       	ret

0000284a <memcmp>:
    284a:	fb 01       	movw	r30, r22
    284c:	dc 01       	movw	r26, r24
    284e:	04 c0       	rjmp	.+8      	; 0x2858 <memcmp+0xe>
    2850:	8d 91       	ld	r24, X+
    2852:	01 90       	ld	r0, Z+
    2854:	80 19       	sub	r24, r0
    2856:	21 f4       	brne	.+8      	; 0x2860 <memcmp+0x16>
    2858:	41 50       	subi	r20, 0x01	; 1
    285a:	50 40       	sbci	r21, 0x00	; 0
    285c:	c8 f7       	brcc	.-14     	; 0x2850 <memcmp+0x6>
    285e:	88 1b       	sub	r24, r24
    2860:	99 0b       	sbc	r25, r25
    2862:	08 95       	ret

00002864 <memcpy>:
    2864:	fb 01       	movw	r30, r22
    2866:	dc 01       	movw	r26, r24
    2868:	02 c0       	rjmp	.+4      	; 0x286e <memcpy+0xa>
    286a:	01 90       	ld	r0, Z+
    286c:	0d 92       	st	X+, r0
    286e:	41 50       	subi	r20, 0x01	; 1
    2870:	50 40       	sbci	r21, 0x00	; 0
    2872:	d8 f7       	brcc	.-10     	; 0x286a <memcpy+0x6>
    2874:	08 95       	ret

00002876 <memset>:
    2876:	dc 01       	movw	r26, r24
    2878:	01 c0       	rjmp	.+2      	; 0x287c <memset+0x6>
    287a:	6d 93       	st	X+, r22
    287c:	41 50       	subi	r20, 0x01	; 1
    287e:	50 40       	sbci	r21, 0x00	; 0
    2880:	e0 f7       	brcc	.-8      	; 0x287a <memset+0x4>
    2882:	08 95       	ret

00002884 <_exit>:
    2884:	f8 94       	cli

00002886 <__stop_program>:
    2886:	ff cf       	rjmp	.-2      	; 0x2886 <__stop_program>
